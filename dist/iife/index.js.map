{"version":3,"sources":["../../src/components/pages/error/index.tsx","../../src/hooks/auth/usePermissions/index.ts","../../src/contexts/auth/index.tsx","../../src/hooks/auth/useGetIdentity/index.ts","../../src/hooks/auth/useLogout/index.ts","../../src/hooks/auth/useLogin/index.ts","../../src/hooks/auth/useAuthenticated/index.ts","../../src/hooks/auth/useCheckError/index.ts","../../src/hooks/auth/useIsExistAuthentication.ts","../../src/hooks/data/useList.ts","../../src/definitions/helpers/userFriendlySeconds/index.ts","../../src/definitions/helpers/importCSVMapper/index.ts","../../src/definitions/helpers/userFriendlyResourceName/index.ts","../../src/definitions/helpers/handleUseParams/index.tsx","../../src/definitions/helpers/queryKeys/index.ts","../../src/definitions/helpers/hasPermission/index.ts","../../src/definitions/helpers/routeGenerator/index.ts","../../src/definitions/helpers/treeView/createTreeView/index.ts","../../src/hooks/data/useOne.ts","../../src/definitions/table/index.ts","../../src/definitions/upload/file2Base64/index.ts","../../src/hooks/data/useMany.ts","../../src/hooks/data/useUpdate.ts","../../src/contexts/undoableQueue/undoableQueueContext.tsx","../../src/hooks/data/useCreate.ts","../../src/hooks/data/useDelete.ts","../../src/hooks/data/useCreateMany.ts","../../src/hooks/data/useUpdateMany.ts","../../src/hooks/data/useDeleteMany.ts","../../src/hooks/data/useApiUrl.ts","../../src/hooks/data/useCustom.ts","../../src/hooks/data/useCustomMutation.ts","../../src/hooks/data/useDataProvider.tsx","../../src/contexts/data/index.tsx","../../src/hooks/live/useResourceSubscription/index.ts","../../src/contexts/live/index.tsx","../../src/contexts/refine/index.tsx","../../src/components/layoutWrapper/defaultLayout/index.tsx","../../src/hooks/live/useLiveMode/index.ts","../../src/hooks/live/useSubscription/index.ts","../../src/hooks/live/usePublish/index.ts","../../src/hooks/resource/useResource/index.ts","../../src/contexts/resource/index.tsx","../../src/hooks/resource/useResourceWithRoute/index.ts","../../src/hooks/notification/useCancelNotification/index.tsx","../../src/hooks/notification/useNotification/index.ts","../../src/contexts/notification/index.tsx","../../src/hooks/notification/useHandleNotification/index.ts","../../src/hooks/translate/useSetLocale.ts","../../src/contexts/translation/index.tsx","../../src/hooks/translate/useTranslate.ts","../../src/hooks/translate/useGetLocale.ts","../../src/hooks/refine/useMutationMode.ts","../../src/hooks/refine/useWarnAboutChange/index.ts","../../src/contexts/unsavedWarn/index.tsx","../../src/hooks/refine/useSyncWithLocation.ts","../../src/hooks/refine/useTitle.tsx","../../src/hooks/refine/useRefineContex.ts","../../src/hooks/export/index.ts","../../src/hooks/form/useForm.ts","../../src/hooks/redirection/index.ts","../../src/hooks/navigation/index.ts","../../src/hooks/show/useShow.ts","../../src/hooks/import/index.tsx","../../src/hooks/modal/useModal/index.tsx","../../src/hooks/router/useRouterContext.ts","../../src/contexts/router/index.tsx","../../src/hooks/accessControl/useCan/index.ts","../../src/contexts/accessControl/index.tsx","../../src/hooks/accessControl/useCanWithoutCache.ts","../../src/hooks/useSelect/index.ts","../../src/hooks/useTable/index.ts","../../src/hooks/auditLog/useLog/index.ts","../../src/contexts/auditLog/index.tsx","../../src/hooks/auditLog/useLogList/index.ts","../../src/hooks/invalidate/index.tsx","../../src/hooks/breadcrumb/index.ts","../../src/hooks/menu/useMenu.tsx","../../src/components/pages/login/index.tsx","../../src/components/pages/ready/index.tsx","../../src/components/containers/refine/index.tsx","../../src/components/telemetry/index.tsx","../../src/hooks/useTelemetryData/index.ts","../../src/components/undoableQueue/index.tsx","../../src/components/layoutWrapper/index.tsx","../../src/components/authenticated/index.tsx","../../src/components/routeChangeHandler/index.tsx","../../src/components/canAccess/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n    useNavigation,\r\n    useTranslate,\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n} from \"@hooks\";\r\nimport { ResourceErrorRouterParams } from \"../../../interfaces\";\r\n\r\n/**\r\n * When the app is navigated to a non-existent route, refine shows a default error page.\r\n * A custom error component can be used for this error page.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#catchall} for more details.\r\n */\r\nexport const ErrorComponent: React.FC = () => {\r\n    const [errorMessage, setErrorMessage] = useState<string>();\r\n    const { push } = useNavigation();\r\n    const translate = useTranslate();\r\n    const actionTypes = [\"edit\", \"create\", \"show\"];\r\n\r\n    const { useParams } = useRouterContext();\r\n\r\n    const params = useParams<ResourceErrorRouterParams>();\r\n    const resource = useResourceWithRoute();\r\n\r\n    useEffect(() => {\r\n        if (params.resource) {\r\n            const resourceFromRoute = resource(params.resource);\r\n            if (\r\n                params.action &&\r\n                actionTypes.includes(params.action) &&\r\n                !resourceFromRoute[params.action]\r\n            ) {\r\n                setErrorMessage(\r\n                    translate(\r\n                        \"pages.error.info\",\r\n                        {\r\n                            action: params.action,\r\n                            resource: params.resource,\r\n                        },\r\n                        `You may have forgotten to add the \"${params.action}\" component to \"${params.resource}\" resource.`,\r\n                    ),\r\n                );\r\n            }\r\n        }\r\n    }, [params]);\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                {translate(\r\n                    \"pages.error.404\",\r\n                    undefined,\r\n                    \"Sorry, the page you visited does not exist.\",\r\n                )}\r\n            </h1>\r\n            {errorMessage && <p>{errorMessage}</p>}\r\n            <button onClick={() => push(\"/\")}>\r\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\n/**\r\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/usePermissions} for more details.\r\n *\r\n * @typeParam TData - Result data of the query\r\n *\r\n */\r\nexport const usePermissions = <TData = any>(\r\n    options?: UseQueryOptions<TData>,\r\n): UseQueryResult<TData, unknown> => {\r\n    const { getPermissions } = useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery<TData>(\r\n        [\"usePermissions\"],\r\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\r\n        getPermissions ?? (() => Promise.resolve(undefined)),\r\n        {\r\n            enabled: !!getPermissions,\r\n            ...options,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\n\r\nimport { useNavigation } from \"@hooks\";\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\nexport const AuthContext = React.createContext<IAuthContext>({});\r\n\r\nexport const AuthContextProvider: React.FC<\r\n    IAuthContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ children, isProvided, ...authOperations }) => {\r\n    const { replace } = useNavigation();\r\n    const queryClient = useQueryClient();\r\n\r\n    const invalidateAuthStore = () => {\r\n        queryClient.invalidateQueries([\"useAuthenticated\"]);\r\n        queryClient.invalidateQueries([\"getUserIdentity\"]);\r\n        queryClient.invalidateQueries([\"usePermissions\"]);\r\n    };\r\n\r\n    const loginFunc = async (params: any) => {\r\n        try {\r\n            const result = await authOperations.login?.(params);\r\n            return Promise.resolve(result);\r\n        } catch (error) {\r\n            return Promise.reject(error);\r\n        } finally {\r\n            invalidateAuthStore();\r\n        }\r\n    };\r\n\r\n    const logoutFunc = async (params: any) => {\r\n        try {\r\n            const redirectPath = await authOperations.logout?.(params);\r\n            return Promise.resolve(redirectPath);\r\n        } catch (error) {\r\n            return Promise.reject(error);\r\n        } finally {\r\n            invalidateAuthStore();\r\n        }\r\n    };\r\n\r\n    const checkAuthFunc = async (params: any) => {\r\n        try {\r\n            await authOperations.checkAuth?.(params);\r\n            return Promise.resolve();\r\n        } catch (error) {\r\n            if ((error as { redirectPath?: string })?.redirectPath) {\r\n                replace((error as { redirectPath: string }).redirectPath);\r\n            }\r\n            return Promise.reject(error);\r\n        } finally {\r\n            invalidateAuthStore();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                ...authOperations,\r\n                login: loginFunc,\r\n                logout: logoutFunc,\r\n                checkAuth: checkAuthFunc,\r\n                isProvided,\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\n\r\nexport type UseGetIdentityProps<TData> = {\r\n    queryOptions?: UseQueryOptions<TData>;\r\n};\r\n\r\n/**\r\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useGetIdentity} for more details.\r\n *\r\n * @typeParam TData - Result data of the query\r\n *\r\n */\r\nexport const useGetIdentity = <TData = any>({\r\n    queryOptions,\r\n}: UseGetIdentityProps<TData> = {}): UseQueryResult<TData, unknown> => {\r\n    const { getUserIdentity } = React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery<TData>(\r\n        [\"getUserIdentity\"],\r\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\r\n        getUserIdentity ?? (() => Promise.resolve(undefined)),\r\n        {\r\n            enabled: !!getUserIdentity,\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext, TLogoutData } from \"../../../interfaces\";\r\nimport { useNavigation, useNotification } from \"@hooks\";\r\n\r\n/**\r\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogout} for more details.\r\n *\r\n */\r\nexport const useLogout = <TVariables = void>(): UseMutationResult<\r\n    TLogoutData,\r\n    Error,\r\n    TVariables,\r\n    unknown\r\n> => {\r\n    const { push } = useNavigation();\r\n    const { logout: logoutFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n    const { open } = useNotification();\r\n\r\n    const queryResponse = useMutation<TLogoutData, Error, TVariables, unknown>(\r\n        \"useLogout\",\r\n        logoutFromContext,\r\n        {\r\n            onSuccess: (redirectPathFromAuth) => {\r\n                if (redirectPathFromAuth !== false) {\r\n                    if (redirectPathFromAuth) {\r\n                        push(redirectPathFromAuth);\r\n                    } else {\r\n                        push(\"/login\");\r\n                    }\r\n                }\r\n            },\r\n            onError: (error: Error) => {\r\n                open?.({\r\n                    key: \"useLogout-error\",\r\n                    type: \"error\",\r\n                    message: error?.name || \"Logout Error\",\r\n                    description:\r\n                        error?.message || \"Something went wrong during logout\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\nimport qs from \"qs\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\n\r\nimport { IAuthContext, TLoginData } from \"../../../interfaces\";\r\nimport { useNavigation, useRouterContext, useNotification } from \"@hooks\";\r\n\r\n/**\r\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogin} for more details.\r\n *\r\n * @typeParam TData - Result data of the query\r\n * @typeParam TVariables - Values for mutation function. default `{}`\r\n *\r\n */\r\nexport const useLogin = <TVariables = {}>(): UseMutationResult<\r\n    TLoginData,\r\n    Error,\r\n    TVariables,\r\n    unknown\r\n> => {\r\n    const { replace } = useNavigation();\r\n    const { login: loginFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const { useLocation } = useRouterContext();\r\n    const { search } = useLocation();\r\n    const { close, open } = useNotification();\r\n\r\n    const { to } = qs.parse(search?.substring(1));\r\n\r\n    const queryResponse = useMutation<TLoginData, Error, TVariables, unknown>(\r\n        \"useLogin\",\r\n        loginFromContext,\r\n        {\r\n            onSuccess: (redirectPathFromAuth) => {\r\n                if (to) {\r\n                    return replace(to as string);\r\n                }\r\n\r\n                if (redirectPathFromAuth !== false) {\r\n                    if (redirectPathFromAuth) {\r\n                        replace(redirectPathFromAuth);\r\n                    } else {\r\n                        replace(\"/\");\r\n                    }\r\n                }\r\n                close?.(\"login-error\");\r\n            },\r\n            onError: (error: any) => {\r\n                open?.({\r\n                    message: error?.name || \"Login Error\",\r\n                    description: error?.message || \"Invalid credentials\",\r\n                    key: \"login-error\",\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import { useContext } from \"react\";\r\nimport { useQuery, UseQueryResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\n\r\n/**\r\n *  `useAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated} for more details.\r\n *\r\n */\r\nexport const useAuthenticated = (\r\n    params?: any,\r\n): UseQueryResult<any, unknown> => {\r\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery(\r\n        [\"useAuthenticated\", params],\r\n        async () => {\r\n            await checkAuth?.(params);\r\n        },\r\n        {\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\nimport { useLogout } from \"@hooks\";\r\n\r\n/**\r\n * `useCheckError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useCheckError} for more details.\r\n *\r\n */\r\nexport const useCheckError = (): UseMutationResult<\r\n    void,\r\n    string | undefined,\r\n    any,\r\n    unknown\r\n> => {\r\n    const { checkError: checkErrorFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const { mutate: logout } = useLogout<{ redirectPath?: string }>();\r\n\r\n    const queryResponse = useMutation(\"useCheckError\", checkErrorFromContext, {\r\n        onError: (redirectPath?: string) => {\r\n            logout({ redirectPath });\r\n        },\r\n    });\r\n\r\n    return queryResponse;\r\n};\r\n","import { useContext } from \"react\";\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\n/**\r\n * A hook that the UI uses\r\n * @internal\r\n */\r\nexport const useIsExistAuthentication = (): boolean => {\r\n    const { isProvided } = useContext<IAuthContext>(AuthContext);\r\n\r\n    return isProvided || false;\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\nimport {\r\n    GetListResponse,\r\n    CrudFilters,\r\n    Pagination,\r\n    BaseRecord,\r\n    HttpError,\r\n    CrudSorting,\r\n    MetaDataQuery,\r\n    SuccessErrorNotification,\r\n    LiveModeProps,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useCheckError,\r\n    useHandleNotification,\r\n    useResourceSubscription,\r\n    useTranslate,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport interface UseListConfig {\r\n    pagination?: Pagination;\r\n    hasPagination?: boolean;\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n}\r\n\r\nexport type UseListProps<TData, TError> = {\r\n    resource: string;\r\n    config?: UseListConfig;\r\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\n/**\r\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\r\n *\r\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useList} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n *\r\n */\r\nexport const useList = <\r\n    TData = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    resource,\r\n    config,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    dataProviderName,\r\n}: UseListProps<TData, TError>): QueryObserverResult<\r\n    GetListResponse<TData>,\r\n    TError\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n    const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n    const { getList } = dataProvider(dataProviderName);\r\n\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    const isEnabled =\r\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\r\n\r\n    useResourceSubscription({\r\n        resource,\r\n        types: [\"*\"],\r\n        params: {\r\n            metaData,\r\n            pagination: config?.pagination,\r\n            hasPagination: config?.hasPagination,\r\n            sort: config?.sort,\r\n            filters: config?.filters,\r\n            subscriptionType: \"useList\",\r\n            ...liveParams,\r\n        },\r\n        channel: `resources/${resource}`,\r\n        enabled: isEnabled,\r\n        liveMode,\r\n        onLiveEvent,\r\n    });\r\n\r\n    const queryResponse = useQuery<GetListResponse<TData>, TError>(\r\n        queryKey.list(config),\r\n        () => {\r\n            const { hasPagination, ...restConfig } = config || {};\r\n            return getList<TData>({\r\n                resource,\r\n                ...restConfig,\r\n                hasPagination,\r\n                metaData,\r\n            });\r\n        },\r\n        {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                queryOptions?.onSuccess?.(data);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(\r\n                              data,\r\n                              { metaData, config },\r\n                              resource,\r\n                          )\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (err: TError) => {\r\n                checkError(err);\r\n                queryOptions?.onError?.(err);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, { metaData, config }, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${resource}-useList-notification`,\r\n                    message: translate(\r\n                        \"common:notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","export const userFriendlySecond = (miliseconds: number): number => {\r\n    return miliseconds / 1000; //convert to seconds\r\n};\r\n","import zip from \"lodash/zip\";\r\nimport fromPairs from \"lodash/fromPairs\";\r\nimport { MapDataFn } from \"../../../interfaces\";\r\n\r\nexport const importCSVMapper = <TItem = any, TVariables = any>(\r\n    data: any[][],\r\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\r\n): TVariables[] => {\r\n    const [headers, ...body] = data;\r\n    return body\r\n        .map((entry) => fromPairs(zip(headers, entry)))\r\n        .map((item: any, index, array: any) =>\r\n            mapData.call(undefined, item, index, array),\r\n        );\r\n};\r\n","import humanizeString from \"humanize-string\";\r\nimport pluralize from \"pluralize\";\r\n\r\n/**\r\n * A method that the internal uses\r\n * @internal\r\n */\r\nexport const userFriendlyResourceName = (\r\n    resource = \"\",\r\n    type: \"singular\" | \"plural\",\r\n): string => {\r\n    const humanizeResource = humanizeString(resource);\r\n    if (type === \"singular\") {\r\n        return pluralize.singular(humanizeResource);\r\n    }\r\n    return pluralize.plural(humanizeResource);\r\n};\r\n","export const handleUseParams = (params: any = {}): any => {\r\n    if (params?.id) {\r\n        return {\r\n            ...params,\r\n            id: decodeURIComponent(params.id),\r\n        };\r\n    }\r\n    return params;\r\n};\r\n","import { IQueryKeys } from \"src/interfaces\";\r\nimport { QueryKey } from \"react-query\";\r\n\r\nimport { MetaDataQuery } from \"src/interfaces\";\r\n\r\nexport const queryKeys = (\r\n    resource?: string,\r\n    dataProviderName?: string,\r\n    metaData?: MetaDataQuery | undefined,\r\n): IQueryKeys => {\r\n    const providerName = dataProviderName || \"default\";\r\n    const keys: IQueryKeys = {\r\n        all: [providerName],\r\n        resourceAll: [providerName, resource || \"\"],\r\n        list: (config) => [\r\n            ...keys.resourceAll,\r\n            \"list\",\r\n            { ...config, ...metaData } as QueryKey,\r\n        ],\r\n        many: (ids) =>\r\n            [\r\n                ...keys.resourceAll,\r\n                \"getMany\",\r\n                (ids && ids.map(String)) as QueryKey,\r\n                { ...metaData } as QueryKey,\r\n            ].filter((item) => item !== undefined),\r\n        detail: (id) => [\r\n            ...keys.resourceAll,\r\n            \"detail\",\r\n            id?.toString(),\r\n            { ...metaData } as QueryKey,\r\n        ],\r\n        logList: (meta) =>\r\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\r\n                (item) => item !== undefined,\r\n            ),\r\n    };\r\n    return keys;\r\n};\r\n","export const hasPermission = (\r\n    permissions: string[] | undefined,\r\n    action: string | undefined,\r\n): boolean => {\r\n    if (!permissions || !action) {\r\n        return false;\r\n    }\r\n    return !!permissions.find((i) => i === action);\r\n};\r\n","import { ResourceProps } from \"src/interfaces\";\r\n\r\nexport const routeGenerator = (\r\n    item: ResourceProps,\r\n    resourcesFromProps: ResourceProps[],\r\n): string | undefined => {\r\n    let route;\r\n\r\n    if (item.parentName) {\r\n        const hasParentName = resourcesFromProps.find(\r\n            (p) => p.name === item.parentName,\r\n        );\r\n        if (hasParentName?.parentName) {\r\n            const routePrefix = routeGenerator(\r\n                hasParentName,\r\n                resourcesFromProps,\r\n            );\r\n            route = `${routePrefix}/${item.name}`;\r\n            routeGenerator(hasParentName, resourcesFromProps);\r\n        } else if (item.parentName) {\r\n            route = `${item.parentName}/${item.name}`;\r\n        }\r\n    } else {\r\n        route = item.name;\r\n    }\r\n    return route;\r\n};\r\n","import { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\r\n\r\nexport const createTreeView = (\r\n    resources: IResourceItem[] | IMenuItem[],\r\n): ITreeMenu[] | ITreeMenu[] => {\r\n    const tree = [];\r\n    const resourcesRouteObject: { [key: string]: any } = {};\r\n    const resourcesNameObject: { [key: string]: any } = {};\r\n    let parent: IResourceItem | IMenuItem;\r\n    let child: ITreeMenu;\r\n\r\n    for (let i = 0; i < resources.length; i++) {\r\n        parent = resources[i];\r\n\r\n        const route = parent.route ?? parent.options?.route ?? \"\";\r\n\r\n        resourcesRouteObject[route] = parent;\r\n        resourcesRouteObject[route][\"children\"] = [];\r\n\r\n        resourcesNameObject[parent.name] = parent;\r\n        resourcesNameObject[parent.name][\"children\"] = [];\r\n    }\r\n\r\n    for (const name in resourcesRouteObject) {\r\n        if (resourcesRouteObject.hasOwnProperty(name)) {\r\n            child = resourcesRouteObject[name];\r\n\r\n            if (child.parentName && resourcesNameObject[child.parentName]) {\r\n                resourcesNameObject[child.parentName][\"children\"].push(child);\r\n            } else {\r\n                tree.push(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    return tree;\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    GetOneResponse,\r\n    HttpError,\r\n    BaseRecord,\r\n    BaseKey,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    SuccessErrorNotification,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useCheckError,\r\n    useTranslate,\r\n    useResourceSubscription,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions\";\r\n\r\nexport type UseOneProps<TData, TError> = {\r\n    resource: string;\r\n    id: BaseKey;\r\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\n/**\r\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\r\n *\r\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useOne} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n *\r\n */\r\nexport const useOne = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    resource,\r\n    id,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    dataProviderName,\r\n}: UseOneProps<TData, TError>): QueryObserverResult<GetOneResponse<TData>> => {\r\n    const dataProvider = useDataProvider();\r\n    const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n\r\n    const { getOne } = dataProvider(dataProviderName);\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    useResourceSubscription({\r\n        resource,\r\n        types: [\"*\"],\r\n        channel: `resources/${resource}`,\r\n        params: {\r\n            ids: id ? [id] : [],\r\n            id: id,\r\n            metaData,\r\n            subscriptionType: \"useOne\",\r\n            ...liveParams,\r\n        },\r\n        enabled: queryOptions?.enabled,\r\n        liveMode,\r\n        onLiveEvent,\r\n    });\r\n\r\n    const queryResponse = useQuery<GetOneResponse<TData>, TError>(\r\n        queryKey.detail(id),\r\n        () => getOne<TData>({ resource, id, metaData }),\r\n        {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                queryOptions?.onSuccess?.(data);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, { id, metaData }, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (err: TError) => {\r\n                checkError(err);\r\n                queryOptions?.onError?.(err);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, { id, metaData }, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${id}-${resource}-getOne-notification`,\r\n                    message: translate(\r\n                        \"notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import qs, { IStringifyOptions } from \"qs\";\r\nimport unionWith from \"lodash/unionWith\";\r\nimport differenceWith from \"lodash/differenceWith\";\r\n\r\nimport {\r\n    CrudFilters,\r\n    CrudSorting,\r\n    CrudFilter,\r\n    CrudSort,\r\n    CrudOperators,\r\n    SortOrder,\r\n} from \"../../interfaces\";\r\n\r\nexport const parseTableParams = (url: string) => {\r\n    const { current, pageSize, sorter, filters } = qs.parse(\r\n        url.substring(1), // remove first ? character\r\n    );\r\n\r\n    return {\r\n        parsedCurrent: current && Number(current),\r\n        parsedPageSize: pageSize && Number(pageSize),\r\n        parsedSorter: (sorter as CrudSorting) ?? [],\r\n        parsedFilters: (filters as CrudFilters) ?? [],\r\n    };\r\n};\r\n\r\nexport const parseTableParamsFromQuery = (params: any) => {\r\n    const url = qs.stringify(params);\r\n    return parseTableParams(`/${url}`);\r\n};\r\n\r\nexport const stringifyTableParams = (params: {\r\n    pagination?: { current?: number; pageSize?: number };\r\n    sorter: CrudSorting;\r\n    filters: CrudFilters;\r\n}): string => {\r\n    const options: IStringifyOptions = {\r\n        skipNulls: true,\r\n        arrayFormat: \"indices\",\r\n        encode: false,\r\n    };\r\n    const { pagination, sorter, filters } = params;\r\n\r\n    const queryString = qs.stringify(\r\n        { ...(pagination ? pagination : {}), sorter, filters },\r\n        options,\r\n    );\r\n\r\n    return queryString;\r\n};\r\n\r\nexport const compareFilters = (\r\n    left: CrudFilter,\r\n    right: CrudFilter,\r\n): boolean => {\r\n    return (\r\n        (\"field\" in left ? left.field : undefined) ==\r\n            (\"field\" in right ? right.field : undefined) &&\r\n        left.operator == right.operator\r\n    );\r\n};\r\n\r\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\r\n    left.field == right.field;\r\n// Keep only one CrudFilter per type according to compareFilters\r\n// Items in the array that is passed first to unionWith have higher priority\r\n// CrudFilter items with undefined values are necessary to signify no filter\r\n// After union, don't keep CrudFilter items with undefined value in the result\r\n// Items in the arrays with higher priority are put at the end.\r\nexport const unionFilters = (\r\n    permanentFilter: CrudFilters,\r\n    newFilters: CrudFilters,\r\n    prevFilters: CrudFilters = [],\r\n): CrudFilters =>\r\n    unionWith(permanentFilter, newFilters, prevFilters, compareFilters).filter(\r\n        (crudFilter) =>\r\n            crudFilter.value !== undefined &&\r\n            crudFilter.value !== null &&\r\n            (crudFilter.operator !== \"or\" ||\r\n                (crudFilter.operator === \"or\" &&\r\n                    crudFilter.value.length !== 0)),\r\n    );\r\n\r\nexport const unionSorters = (\r\n    permanentSorter: CrudSorting,\r\n    newSorters: CrudSorting,\r\n): CrudSorting =>\r\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\r\n        (crudSorter) =>\r\n            crudSorter.order !== undefined && crudSorter.order !== null,\r\n    );\r\n// Prioritize filters in the permanentFilter and put it at the end of result array\r\nexport const setInitialFilters = (\r\n    permanentFilter: CrudFilters,\r\n    defaultFilter: CrudFilters,\r\n): CrudFilters => [\r\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\r\n    ...permanentFilter,\r\n];\r\n\r\nexport const setInitialSorters = (\r\n    permanentSorter: CrudSorting,\r\n    defaultSorter: CrudSorting,\r\n): CrudSorting => [\r\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\r\n    ...permanentSorter,\r\n];\r\n\r\nexport const getDefaultSortOrder = (\r\n    columnName: string,\r\n    sorter?: CrudSorting,\r\n): SortOrder | undefined => {\r\n    if (!sorter) {\r\n        return undefined;\r\n    }\r\n\r\n    const sortItem = sorter.find((item) => item.field === columnName);\r\n\r\n    if (sortItem) {\r\n        return sortItem.order as SortOrder;\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\nexport const getDefaultFilter = (\r\n    columnName: string,\r\n    filters?: CrudFilters,\r\n    operatorType: CrudOperators = \"eq\",\r\n): CrudFilter[\"value\"] | undefined => {\r\n    const filter = filters?.find((filter) => {\r\n        if (filter.operator !== \"or\") {\r\n            const { operator, field } = filter;\r\n            return field === columnName && operator === operatorType;\r\n        }\r\n        return undefined;\r\n    });\r\n\r\n    if (filter) {\r\n        return filter.value || [];\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","export const file2Base64 = (file: any): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        const resultHandler = () => {\r\n            if (reader.result) {\r\n                reader.removeEventListener(\"load\", resultHandler, false);\r\n\r\n                resolve(reader.result as string);\r\n            }\r\n        };\r\n\r\n        reader.addEventListener(\"load\", resultHandler, false);\r\n\r\n        reader.readAsDataURL(file.originFileObj as Blob);\r\n        reader.onerror = (error) => {\r\n            reader.removeEventListener(\"load\", resultHandler, false);\r\n            return reject(error);\r\n        };\r\n    });\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    GetManyResponse,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    SuccessErrorNotification,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useCheckError,\r\n    useResourceSubscription,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport type UseManyProps<TData, TError> = {\r\n    resource: string;\r\n    ids: BaseKey[];\r\n    queryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\n/**\r\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\r\n *\r\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n *\r\n */\r\nexport const useMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    resource,\r\n    ids,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    dataProviderName,\r\n}: UseManyProps<TData, TError>): QueryObserverResult<\r\n    GetManyResponse<TData>\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n    const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n\r\n    const { getMany } = dataProvider(dataProviderName);\r\n\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    const isEnabled =\r\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\r\n\r\n    useResourceSubscription({\r\n        resource,\r\n        types: [\"*\"],\r\n        params: {\r\n            ids: ids ?? [],\r\n            metaData,\r\n            subscriptionType: \"useMany\",\r\n            ...liveParams,\r\n        },\r\n        channel: `resources/${resource}`,\r\n        enabled: isEnabled,\r\n        liveMode,\r\n        onLiveEvent,\r\n    });\r\n\r\n    const queryResponse = useQuery<GetManyResponse<TData>, TError>(\r\n        queryKey.many(ids),\r\n        () => getMany<TData>({ resource, ids, metaData }),\r\n        {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                queryOptions?.onSuccess?.(data);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, ids, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (err: TError) => {\r\n                checkError(err);\r\n                queryOptions?.onError?.(err);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, ids, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${ids[0]}-${resource}-getMany-notification`,\r\n                    message: translate(\r\n                        \"notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\n\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    UpdateResponse,\r\n    MutationMode,\r\n    PrevContext as UpdateContext,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    PreviousQuery,\r\n    GetListResponse,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport pluralize from \"pluralize\";\r\nimport {\r\n    useMutationMode,\r\n    useCancelNotification,\r\n    useTranslate,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useLog,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport type UpdateParams<TVariables> = {\r\n    id: BaseKey;\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseUpdateReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    UpdateResponse<TData>,\r\n    TError,\r\n    UpdateParams<TVariables>,\r\n    UpdateContext<TData>\r\n>;\r\n\r\n/**\r\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\r\n *\r\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useUpdate} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useUpdate = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseUpdateReturnType<TData, TError, TVariables> => {\r\n    const queryClient = useQueryClient();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const publish = usePublish();\r\n    const { log } = useLog();\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        UpdateResponse<TData>,\r\n        TError,\r\n        UpdateParams<TVariables>,\r\n        UpdateContext<TData>\r\n    >(\r\n        ({\r\n            id,\r\n            values,\r\n            resource,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n        }) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).update<TData, TVariables>(\r\n                    {\r\n                        resource,\r\n                        id,\r\n                        variables: values,\r\n                        metaData,\r\n                    },\r\n                );\r\n            }\r\n            const updatePromise = new Promise<UpdateResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .update<TData, TVariables>({\r\n                                resource,\r\n                                id,\r\n                                variables: values,\r\n                                metaData,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id: id,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                resource,\r\n                id,\r\n                mutationMode,\r\n                values,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (record.id?.toString() === id?.toString()) {\r\n                                    return {\r\n                                        id,\r\n                                        ...values,\r\n                                    } as unknown as TData;\r\n                                }\r\n                                return record;\r\n                            });\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (record.id?.toString() === id?.toString()) {\r\n                                    record = {\r\n                                        id,\r\n                                        ...values,\r\n                                    } as unknown as TData;\r\n                                }\r\n                                return record;\r\n                            });\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.detail(id),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data: {\r\n                                    ...previous.data,\r\n                                    ...values,\r\n                                },\r\n                            };\r\n                        },\r\n                    );\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\", \"detail\"],\r\n                },\r\n            ) => {\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                    id,\r\n                });\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                data,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    successNotification,\r\n                    dataProviderName,\r\n                    values,\r\n                    metaData,\r\n                },\r\n                context,\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, { id, values }, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${id}-${resource}-notification`,\r\n                    description: translate(\r\n                        \"notifications.success\",\r\n                        \"Successful\",\r\n                    ),\r\n                    message: translate(\r\n                        \"notifications.editSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                        },\r\n                        `Successfully updated ${resourceSingular}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"updated\",\r\n                    payload: {\r\n                        ids: data.data?.id ? [data.data.id] : undefined,\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n\r\n                let previousData: any;\r\n                if (context) {\r\n                    const queryData = queryClient.getQueryData<\r\n                        UpdateResponse<TData>\r\n                    >(context.queryKey.detail(id));\r\n\r\n                    previousData = Object.keys(values).reduce<any>(\r\n                        (acc, item) => {\r\n                            acc[item] = queryData?.data?.[item];\r\n                            return acc;\r\n                        },\r\n                        {},\r\n                    );\r\n                }\r\n\r\n                const { fields, operation, variables, ...rest } =\r\n                    metaData || {};\r\n\r\n                log?.mutate({\r\n                    action: \"update\",\r\n                    resource,\r\n                    data: values,\r\n                    previousData,\r\n                    meta: {\r\n                        id,\r\n                        dataProviderName,\r\n                        ...rest,\r\n                    },\r\n                });\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { id, resource, errorNotification, values },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError?.(err);\r\n\r\n                    const resourceSingular = pluralize.singular(resource);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, { id, values }, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${id}-${resource}-notification`,\r\n                        message: translate(\r\n                            \"notifications.editError\",\r\n                            {\r\n                                resource: translate(\r\n                                    `${resource}.${resource}`,\r\n                                    resourceSingular,\r\n                                ),\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import React, { ReactNode, useReducer } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nimport { UndoableQueue } from \"@components\";\r\n\r\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\n\r\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\r\n    notifications: [],\r\n    notificationDispatch: () => false,\r\n});\r\n\r\nconst initialState: IUndoableQueue[] = [];\r\n\r\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD:\r\n            return [\r\n                ...state.filter(\r\n                    (notificationItem: IUndoableQueue) =>\r\n                        notificationItem.id != action.payload.id &&\r\n                        notificationItem.resource == action.payload.resource,\r\n                ),\r\n                {\r\n                    ...action.payload,\r\n                    isRunning: true,\r\n                },\r\n            ];\r\n        case ActionTypes.REMOVE:\r\n            return state.filter(\r\n                (notificationItem: IUndoableQueue) =>\r\n                    notificationItem.id != action.payload.id &&\r\n                    notificationItem.resource == action.payload.resource,\r\n            );\r\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\r\n            return state.map((notificationItem: IUndoableQueue) => {\r\n                if (\r\n                    notificationItem.id == action.payload.id &&\r\n                    notificationItem.resource == action.payload.resource\r\n                ) {\r\n                    return {\r\n                        ...notificationItem,\r\n                        seconds: action.payload.seconds - 1000,\r\n                    };\r\n                }\r\n                return notificationItem;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const UndoableQueueContextProvider: React.FC<{ children: ReactNode }> =\r\n    ({ children }) => {\r\n        const [notifications, notificationDispatch] = useReducer(\r\n            undoableQueueReducer,\r\n            initialState,\r\n        );\r\n\r\n        const notificationData = { notifications, notificationDispatch };\r\n\r\n        return (\r\n            <UndoableQueueContext.Provider value={notificationData}>\r\n                {children}\r\n                {typeof window !== \"undefined\" &&\r\n                    createPortal(\r\n                        <UndoableQueue notifications={notifications} />,\r\n                        document.body,\r\n                    )}\r\n            </UndoableQueueContext.Provider>\r\n        );\r\n    };\r\n","import { useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    CreateResponse,\r\n    BaseRecord,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useLog,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\n\r\ntype useCreateParams<TVariables> = {\r\n    resource: string;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseCreateReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    CreateResponse<TData>,\r\n    TError,\r\n    useCreateParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\r\n *\r\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCreate} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\n\r\nexport const useCreate = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseCreateReturnType<TData, TError, TVariables> => {\r\n    const { mutate: checkError } = useCheckError();\r\n    const dataProvider = useDataProvider();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const { log } = useLog();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    const mutation = useMutation<\r\n        CreateResponse<TData>,\r\n        TError,\r\n        useCreateParams<TVariables>,\r\n        unknown\r\n    >(\r\n        ({\r\n            resource,\r\n            values,\r\n            metaData,\r\n            dataProviderName,\r\n        }: useCreateParams<TVariables>) => {\r\n            return dataProvider(dataProviderName).create<TData, TVariables>({\r\n                resource,\r\n                variables: values,\r\n                metaData,\r\n            });\r\n        },\r\n        {\r\n            onSuccess: (\r\n                data,\r\n                {\r\n                    resource,\r\n                    successNotification: successNotificationFromProp,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                    values,\r\n                    metaData,\r\n                },\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotificationFromProp === \"function\"\r\n                        ? successNotificationFromProp(data, values, resource)\r\n                        : successNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `create-${resource}-notification`,\r\n                    message: translate(\r\n                        \"notifications.createSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                        },\r\n                        `Successfully created ${resourceSingular}`,\r\n                    ),\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    type: \"success\",\r\n                });\r\n\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"created\",\r\n                    payload: {\r\n                        ids: data?.data?.id ? [data.data.id] : undefined,\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n\r\n                const { fields, operation, variables, ...rest } =\r\n                    metaData || {};\r\n\r\n                log?.mutate({\r\n                    action: \"create\",\r\n                    resource,\r\n                    data: values,\r\n                    meta: {\r\n                        dataProviderName,\r\n                        id: data?.data?.id ?? undefined,\r\n                        ...rest,\r\n                    },\r\n                });\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                {\r\n                    resource,\r\n                    errorNotification: errorNotificationFromProp,\r\n                    values,\r\n                },\r\n            ) => {\r\n                checkError(err);\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotificationFromProp === \"function\"\r\n                        ? errorNotificationFromProp(err, values, resource)\r\n                        : errorNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `create-${resource}-notification`,\r\n                    description: err.message,\r\n                    message: translate(\r\n                        \"notifications.createError\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                            statusCode: err.statusCode,\r\n                        },\r\n                        `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\r\n                    ),\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useQueryClient, useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    useMutationMode,\r\n    useCancelNotification,\r\n    useTranslate,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useLog,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport {\r\n    DeleteOneResponse,\r\n    MutationMode,\r\n    PrevContext as DeleteContext,\r\n    BaseRecord,\r\n    BaseKey,\r\n    HttpError,\r\n    GetListResponse,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    PreviousQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport type DeleteParams<TVariables> = {\r\n    id: BaseKey;\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    values?: TVariables;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseDeleteReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    DeleteOneResponse<TData>,\r\n    TError,\r\n    DeleteParams<TVariables>,\r\n    DeleteContext<TData>\r\n>;\r\n\r\n/**\r\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\r\n *\r\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useDelete} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for params. default `{}`\r\n *\r\n */\r\nexport const useDelete = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseDeleteReturnType<TData, TError, TVariables> => {\r\n    const { mutate: checkError } = useCheckError();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const { log } = useLog();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        DeleteOneResponse<TData>,\r\n        TError,\r\n        DeleteParams<TVariables>,\r\n        DeleteContext<TData>\r\n    >(\r\n        ({\r\n            id,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            resource,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n            values,\r\n        }) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).deleteOne<TData>({\r\n                    resource,\r\n                    id,\r\n                    metaData,\r\n                    variables: values,\r\n                });\r\n            }\r\n\r\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .deleteOne<TData>({\r\n                                resource,\r\n                                id,\r\n                                metaData,\r\n                                variables: values,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return deletePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                id,\r\n                resource,\r\n                mutationMode,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.filter(\r\n                                (record: TData) =>\r\n                                    record.id?.toString() !== id.toString(),\r\n                            );\r\n\r\n                            return {\r\n                                data,\r\n                                total: previous.total - 1,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.filter(\r\n                                (record: TData) => {\r\n                                    return (\r\n                                        record.id?.toString() !== id?.toString()\r\n                                    );\r\n                                },\r\n                            );\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                },\r\n            ) => {\r\n                // invalidate the cache for the list and many queries:\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                _data,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    successNotification,\r\n                    dataProviderName,\r\n                    metaData,\r\n                },\r\n                context,\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource ?? \"\");\r\n\r\n                // Remove the queries from the cache:\r\n                queryClient.removeQueries(context?.queryKey.detail(id));\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(_data, id, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${id}-${resource}-notification`,\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    message: translate(\r\n                        \"notifications.deleteSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                        },\r\n                        `Successfully deleted a ${resourceSingular}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"deleted\",\r\n                    payload: {\r\n                        ids: id ? [id] : [],\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n\r\n                const { fields, operation, variables, ...rest } =\r\n                    metaData || {};\r\n\r\n                log?.mutate({\r\n                    action: \"delete\",\r\n                    resource,\r\n                    meta: {\r\n                        id,\r\n                        dataProviderName,\r\n                        ...rest,\r\n                    },\r\n                });\r\n\r\n                // Remove the queries from the cache:\r\n                queryClient.removeQueries(context?.queryKey.detail(id));\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { id, resource, errorNotification },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError(err);\r\n\r\n                    const resourceSingular = pluralize.singular(resource ?? \"\");\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, id, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${id}-${resource}-notification`,\r\n                        message: translate(\r\n                            \"notifications.deleteError\",\r\n                            {\r\n                                resource: resourceSingular,\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    CreateManyResponse,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport pluralize from \"pluralize\";\r\n\r\ntype useCreateManyParams<TVariables> = {\r\n    resource: string;\r\n    values: TVariables[];\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseCreateManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    CreateManyResponse<TData>,\r\n    TError,\r\n    useCreateManyParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\r\n *\r\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useCreateMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useCreateMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseCreateManyReturnType<TData, TError, TVariables> => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        CreateManyResponse<TData>,\r\n        TError,\r\n        useCreateManyParams<TVariables>\r\n    >(\r\n        ({\r\n            resource,\r\n            values,\r\n            metaData,\r\n            dataProviderName,\r\n        }: useCreateManyParams<TVariables>) =>\r\n            dataProvider(dataProviderName).createMany<TData, TVariables>({\r\n                resource,\r\n                variables: values,\r\n                metaData,\r\n            }),\r\n        {\r\n            onSuccess: (\r\n                response,\r\n                {\r\n                    resource,\r\n                    successNotification,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                    values,\r\n                },\r\n            ) => {\r\n                const resourcePlural = pluralize.plural(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(response, values, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `createMany-${resource}-notification`,\r\n                    message: translate(\r\n                        \"notifications.createSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                        },\r\n                        `Successfully created ${resourcePlural}`,\r\n                    ),\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    type: \"success\",\r\n                });\r\n\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                const ids = response?.data\r\n                    .filter((item) => item?.id !== undefined)\r\n                    .map((item) => item.id!);\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"created\",\r\n                    payload: {\r\n                        ids,\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n            },\r\n            onError: (err: TError, { resource, errorNotification, values }) => {\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, values, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `createMany-${resource}-notification`,\r\n                    description: err.message,\r\n                    message: translate(\r\n                        \"notifications.createError\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                            statusCode: err.statusCode,\r\n                        },\r\n                        `There was an error creating ${resource} (status code: ${err.statusCode}`,\r\n                    ),\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    useCancelNotification,\r\n    useCheckError,\r\n    useMutationMode,\r\n    useTranslate,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    UpdateManyResponse,\r\n    HttpError,\r\n    MutationMode,\r\n    QueryResponse,\r\n    PrevContext as UpdateContext,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    GetListResponse,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\ntype UpdateManyParams<TVariables> = {\r\n    ids: BaseKey[];\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\ntype UseUpdateManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    UpdateManyResponse<TData>,\r\n    TError,\r\n    UpdateManyParams<TVariables>,\r\n    UpdateContext<TData>\r\n>;\r\n\r\n/**\r\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\r\n *\r\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useUpdateMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useUpdateMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseUpdateManyReturnType<TData, TError, TVariables> => {\r\n    const queryClient = useQueryClient();\r\n    const dataProvider = useDataProvider();\r\n    const translate = useTranslate();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const { mutate: checkError } = useCheckError();\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const publish = usePublish();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        UpdateManyResponse<TData>,\r\n        TError,\r\n        UpdateManyParams<TVariables>,\r\n        UpdateContext<TData>\r\n    >(\r\n        ({\r\n            ids,\r\n            values,\r\n            resource,\r\n            onCancel,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            metaData,\r\n            dataProviderName,\r\n        }: UpdateManyParams<TVariables>) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).updateMany<\r\n                    TData,\r\n                    TVariables\r\n                >({\r\n                    resource,\r\n                    ids,\r\n                    variables: values,\r\n                    metaData,\r\n                });\r\n            }\r\n\r\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .updateMany<TData, TVariables>({\r\n                                resource,\r\n                                ids,\r\n                                variables: values,\r\n                                metaData,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id: ids,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n\r\n        {\r\n            onMutate: async ({\r\n                resource,\r\n                ids,\r\n                values,\r\n                mutationMode,\r\n                dataProviderName,\r\n                metaData,\r\n            }) => {\r\n                const queryKey = queryKeys(\r\n                    resource,\r\n                    dataProviderName,\r\n                    metaData,\r\n                );\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries = queryClient.getQueriesData<\r\n                    QueryResponse<TData>\r\n                >(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (\r\n                                    record.id !== undefined &&\r\n                                    ids\r\n                                        .filter((id) => id !== undefined)\r\n                                        .map(String)\r\n                                        .includes(record.id.toString())\r\n                                ) {\r\n                                    return {\r\n                                        ...record,\r\n                                        ...values,\r\n                                    };\r\n                                }\r\n\r\n                                return record;\r\n                            });\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (\r\n                                    record.id !== undefined &&\r\n                                    ids\r\n                                        .filter((id) => id !== undefined)\r\n                                        .map(String)\r\n                                        .includes(record.id.toString())\r\n                                ) {\r\n                                    return {\r\n                                        ...record,\r\n                                        ...values,\r\n                                    };\r\n                                }\r\n                                return record;\r\n                            });\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n                    for (const id of ids) {\r\n                        queryClient.setQueriesData(\r\n                            queryKey.detail(id),\r\n                            (previous?: GetListResponse<TData> | null) => {\r\n                                if (!previous) {\r\n                                    return null;\r\n                                }\r\n\r\n                                const data = {\r\n                                    ...previous.data,\r\n                                    ...values,\r\n                                };\r\n                                return {\r\n                                    ...previous,\r\n                                    data,\r\n                                };\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (_data, _error, { ids, resource, dataProviderName }) => {\r\n                // invalidate the cache for the list and many queries:\r\n                invalidateStore({\r\n                    resource,\r\n                    invalidates: [\"list\", \"many\"],\r\n                    dataProviderName,\r\n                });\r\n\r\n                ids.forEach((id) =>\r\n                    invalidateStore({\r\n                        resource,\r\n                        invalidates: [\"detail\"],\r\n                        dataProviderName,\r\n                        id,\r\n                    }),\r\n                );\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id: ids, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                data,\r\n                { ids, resource, successNotification, values },\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, { ids, values }, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${ids}-${resource}-notification`,\r\n                    description: translate(\r\n                        \"notifications.success\",\r\n                        \"Successful\",\r\n                    ),\r\n                    message: translate(\r\n                        \"notifications.editSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                        },\r\n                        `Successfully updated ${resourceSingular}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"updated\",\r\n                    payload: {\r\n                        ids: ids.map(String),\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { ids, resource, errorNotification, values },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError?.(err);\r\n\r\n                    const resourceSingular = pluralize.singular(resource);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, { ids, values }, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${ids}-${resource}-updateMany-error-notification`,\r\n                        message: translate(\r\n                            \"notifications.editError\",\r\n                            {\r\n                                resource: resourceSingular,\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useQueryClient, useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    DeleteManyResponse,\r\n    HttpError,\r\n    BaseRecord,\r\n    BaseKey,\r\n    MutationMode,\r\n    PreviousQuery,\r\n    GetListResponse,\r\n    PrevContext as DeleteContext,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useMutationMode,\r\n    useCancelNotification,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport { queryKeys } from \"@definitions\";\r\n\r\nexport type DeleteManyParams<TVariables> = {\r\n    ids: BaseKey[];\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    values?: TVariables;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseDeleteManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    DeleteManyResponse<TData>,\r\n    TError,\r\n    DeleteManyParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\r\n *\r\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useDeleteMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for params. default `{}`\r\n *\r\n */\r\nexport const useDeleteMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseDeleteManyReturnType<TData, TError, TVariables> => {\r\n    const { mutate: checkError } = useCheckError();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    const mutation = useMutation<\r\n        DeleteManyResponse<TData>,\r\n        TError,\r\n        DeleteManyParams<TVariables>,\r\n        DeleteContext<TData>\r\n    >(\r\n        ({\r\n            resource,\r\n            ids,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n            values,\r\n        }: DeleteManyParams<TVariables>) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).deleteMany<TData>({\r\n                    resource,\r\n                    ids,\r\n                    metaData,\r\n                    variables: values,\r\n                });\r\n            }\r\n\r\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .deleteMany<TData>({\r\n                                resource,\r\n                                ids,\r\n                                metaData,\r\n                                variables: values,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id: ids,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                ids,\r\n                resource,\r\n                mutationMode,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.filter(\r\n                                (item) =>\r\n                                    item.id &&\r\n                                    !ids\r\n                                        .map(String)\r\n                                        .includes(item.id.toString()),\r\n                            );\r\n\r\n                            return {\r\n                                data,\r\n                                total: previous.total - 1,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.filter(\r\n                                (record: TData) => {\r\n                                    if (record.id) {\r\n                                        return !ids\r\n                                            .map(String)\r\n                                            .includes(record.id.toString());\r\n                                    }\r\n                                    return false;\r\n                                },\r\n                            );\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    for (const id of ids) {\r\n                        queryClient.setQueriesData(\r\n                            queryKey.detail(id),\r\n                            (previous?: any | null) => {\r\n                                if (!previous || previous.data.id == id) {\r\n                                    return null;\r\n                                }\r\n                                return {\r\n                                    ...previous,\r\n                                };\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            // Always refetch after error or success:\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    resource,\r\n                    ids,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                },\r\n            ) => {\r\n                // invalidate the cache for the list and many queries:\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id: ids, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                _data,\r\n                { ids, resource, successNotification },\r\n                context,\r\n            ) => {\r\n                // Remove the queries from the cache:\r\n                ids.forEach((id) =>\r\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\r\n                );\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(_data, ids, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${ids}-${resource}-notification`,\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    message: translate(\r\n                        \"notifications.deleteSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                        },\r\n                        `Successfully deleted ${resource}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"deleted\",\r\n                    payload: { ids },\r\n                    date: new Date(),\r\n                });\r\n\r\n                // Remove the queries from the cache:\r\n                ids.forEach((id) =>\r\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\r\n                );\r\n            },\r\n            onError: (err, { ids, resource, errorNotification }, context) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError(err);\r\n                    const resourceSingular = pluralize.singular(resource);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, ids, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${ids}-${resource}-notification`,\r\n                        message: translate(\r\n                            \"notifications.deleteError\",\r\n                            {\r\n                                resource: resourceSingular,\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useDataProvider } from \"@hooks\";\r\n\r\nexport const useApiUrl = (dataProviderName?: string): string => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { getApiUrl } = dataProvider(dataProviderName);\r\n\r\n    return getApiUrl();\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    CustomResponse,\r\n    CrudSorting,\r\n    CrudFilters,\r\n    BaseRecord,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    SuccessErrorNotification,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useCheckError,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\n\r\ninterface UseCustomConfig<TQuery, TPayload> {\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n    query?: TQuery;\r\n    payload?: TPayload;\r\n    headers?: {};\r\n}\r\n\r\nexport type UseCustomProps<TData, TError, TQuery, TPayload> = {\r\n    url: string;\r\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\r\n    config?: UseCustomConfig<TQuery, TPayload>;\r\n    queryOptions?: UseQueryOptions<CustomResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification;\r\n\r\n/**\r\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\r\n *\r\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useCustom} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TQuery - Values for query params\r\n * @typeParam TPayload - Values for params\r\n *\r\n */\r\nexport const useCustom = <\r\n    TData = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TQuery = unknown,\r\n    TPayload = unknown,\r\n>({\r\n    url,\r\n    method,\r\n    config,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    dataProviderName,\r\n}: UseCustomProps<TData, TError, TQuery, TPayload>): QueryObserverResult<\r\n    CustomResponse<TData>,\r\n    TError\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { custom } = dataProvider(dataProviderName);\r\n    const { mutate: checkError } = useCheckError();\r\n    const translate = useTranslate();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    if (custom) {\r\n        const queryResponse = useQuery<CustomResponse<TData>, TError>(\r\n            [\r\n                dataProviderName,\r\n                \"custom\",\r\n                method,\r\n                url,\r\n                { ...config, ...metaData },\r\n            ],\r\n            () => custom<TData>({ url, method, ...config, metaData }),\r\n            {\r\n                ...queryOptions,\r\n                onSuccess: (data) => {\r\n                    queryOptions?.onSuccess?.(data);\r\n\r\n                    const notificationConfig =\r\n                        typeof successNotification === \"function\"\r\n                            ? successNotification(data, {\r\n                                  ...config,\r\n                                  ...metaData,\r\n                              })\r\n                            : successNotification;\r\n\r\n                    handleNotification(notificationConfig);\r\n                },\r\n                onError: (err: TError) => {\r\n                    checkError(err);\r\n                    queryOptions?.onError?.(err);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, { ...config, ...metaData })\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${method}-notification`,\r\n                        message: translate(\r\n                            \"common:notifications.error\",\r\n                            { statusCode: err.statusCode },\r\n                            `Error (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                },\r\n            },\r\n        );\r\n        return queryResponse;\r\n    } else {\r\n        throw Error(\"Not implemented custom on data provider.\");\r\n    }\r\n};\r\n","import { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { useDataProvider, useHandleNotification, useTranslate } from \"@hooks\";\r\nimport {\r\n    CreateResponse,\r\n    BaseRecord,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\n\r\ninterface UseCustomMutationConfig {\r\n    headers?: {};\r\n}\r\n\r\ntype useCustomMutationParams<TVariables> = {\r\n    url: string;\r\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    config?: UseCustomMutationConfig;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseCustomMutationReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    CreateResponse<TData>,\r\n    TError,\r\n    useCustomMutationParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\r\n *\r\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCustomMutation} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\n\r\nexport const useCustomMutation = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseCustomMutationReturnType<TData, TError, TVariables> => {\r\n    const handleNotification = useHandleNotification();\r\n    const dataProvider = useDataProvider();\r\n    const translate = useTranslate();\r\n\r\n    const mutation = useMutation<\r\n        CreateResponse<TData>,\r\n        TError,\r\n        useCustomMutationParams<TVariables>,\r\n        unknown\r\n    >(\r\n        ({\r\n            url,\r\n            method,\r\n            values,\r\n            metaData,\r\n            dataProviderName,\r\n            config,\r\n        }: useCustomMutationParams<TVariables>) => {\r\n            const { custom } = dataProvider(dataProviderName);\r\n\r\n            if (custom) {\r\n                return custom<TData>({\r\n                    url,\r\n                    method,\r\n                    payload: values,\r\n                    metaData,\r\n                    headers: { ...config?.headers },\r\n                });\r\n            }\r\n\r\n            throw Error(\"Not implemented custom on data provider.\");\r\n        },\r\n        {\r\n            onSuccess: (\r\n                data,\r\n                {\r\n                    successNotification: successNotificationFromProp,\r\n                    config,\r\n                    metaData,\r\n                },\r\n            ) => {\r\n                const notificationConfig =\r\n                    typeof successNotificationFromProp === \"function\"\r\n                        ? successNotificationFromProp(data, {\r\n                              ...config,\r\n                              ...metaData,\r\n                          })\r\n                        : successNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                {\r\n                    errorNotification: errorNotificationFromProp,\r\n                    method,\r\n                    config,\r\n                    metaData,\r\n                },\r\n            ) => {\r\n                const notificationConfig =\r\n                    typeof errorNotificationFromProp === \"function\"\r\n                        ? errorNotificationFromProp(err, {\r\n                              ...config,\r\n                              ...metaData,\r\n                          })\r\n                        : errorNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${method}-notification`,\r\n                    message: translate(\r\n                        \"common:notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useCallback, useContext } from \"react\";\r\n\r\nimport { DataContext } from \"@contexts/data\";\r\nimport {\r\n    IDataContextProvider,\r\n    IDataMultipleContextProvider,\r\n} from \"../../interfaces\";\r\n\r\nexport const useDataProvider = (): ((\r\n    dataProviderName?: string,\r\n) => IDataContextProvider) => {\r\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\r\n\r\n    const handleDataProvider = useCallback(\r\n        (dataProviderName?: string) => {\r\n            if (dataProviderName) {\r\n                const dataProvider = context[dataProviderName];\r\n                if (!dataProvider) {\r\n                    throw new Error(\r\n                        `\"${dataProviderName}\" Data provider not found`,\r\n                    );\r\n                }\r\n                return context[dataProviderName];\r\n            }\r\n            if (context.default) {\r\n                return context.default;\r\n            } else\r\n                throw new Error(\r\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\r\n                );\r\n        },\r\n        [context],\r\n    );\r\n\r\n    return handleDataProvider;\r\n};\r\n","import React from \"react\";\r\nimport { ReactNode } from \"react\";\r\n\r\nimport {\r\n    IDataContextProvider,\r\n    IDataMultipleContextProvider,\r\n} from \"../../interfaces\";\r\n\r\nexport const defaultDataProvider = () => {\r\n    return {\r\n        default: {\r\n            create: () => Promise.resolve({ data: { id: 1 } }),\r\n            createMany: () => Promise.resolve({ data: [] }),\r\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\r\n            deleteMany: () => Promise.resolve({ data: [] }),\r\n            getList: () => Promise.resolve({ data: [], total: 0 }),\r\n            getMany: () => Promise.resolve({ data: [] }),\r\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\r\n            update: () => Promise.resolve({ data: { id: 1 } }),\r\n            updateMany: () => Promise.resolve({ data: [] }),\r\n            custom: () => Promise.resolve({ data: {} }),\r\n            getApiUrl: () => \"\",\r\n        },\r\n    };\r\n};\r\n\r\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\r\n    defaultDataProvider() as IDataMultipleContextProvider,\r\n);\r\n\r\nexport const DataContextProvider: React.FC<\r\n    | IDataMultipleContextProvider\r\n    | (IDataContextProvider & {\r\n          children: ReactNode;\r\n      })\r\n> = ({ children, ...rest }) => {\r\n    let dataProviders;\r\n    if (\r\n        !rest.hasOwnProperty(\"updateMany\") ||\r\n        !rest.hasOwnProperty(\"createMany\")\r\n    ) {\r\n        dataProviders = rest as IDataMultipleContextProvider;\r\n    } else {\r\n        dataProviders = {\r\n            default: rest,\r\n        } as IDataMultipleContextProvider;\r\n    }\r\n    return (\r\n        <DataContext.Provider value={dataProviders}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    );\r\n};\r\n","import { useContext, useEffect } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport {\r\n    BaseKey,\r\n    CrudFilters,\r\n    CrudSorting,\r\n    ILiveContext,\r\n    IRefineContext,\r\n    LiveEvent,\r\n    LiveModeProps,\r\n    MetaDataQuery,\r\n    Pagination,\r\n} from \"../../../interfaces\";\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { queryKeys } from \"@definitions\";\r\n\r\nexport type UseResourceSubscriptionProps = {\r\n    channel: string;\r\n    params?: {\r\n        ids?: BaseKey[];\r\n        id?: BaseKey;\r\n        metaData?: MetaDataQuery;\r\n        pagination?: Pagination;\r\n        hasPagination?: boolean;\r\n        sort?: CrudSorting;\r\n        filters?: CrudFilters;\r\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\r\n        [key: string]: any;\r\n    };\r\n    types: LiveEvent[\"type\"][];\r\n    resource: string;\r\n    enabled?: boolean;\r\n} & LiveModeProps;\r\n\r\nexport type PublishType = {\r\n    (event: LiveEvent): void;\r\n};\r\n\r\nexport const useResourceSubscription = ({\r\n    resource,\r\n    params,\r\n    channel,\r\n    types,\r\n    enabled = true,\r\n    liveMode: liveModeFromProp,\r\n    onLiveEvent,\r\n}: UseResourceSubscriptionProps): void => {\r\n    const queryClient = useQueryClient();\r\n    const queryKey = queryKeys(resource);\r\n\r\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\r\n    const {\r\n        liveMode: liveModeFromContext,\r\n        onLiveEvent: onLiveEventContextCallback,\r\n    } = useContext<IRefineContext>(RefineContext);\r\n\r\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\r\n\r\n    useEffect(() => {\r\n        let subscription: any;\r\n\r\n        if (liveMode && liveMode !== \"off\" && enabled) {\r\n            subscription = liveDataContext?.subscribe({\r\n                channel,\r\n                params: {\r\n                    resource,\r\n                    ...params,\r\n                },\r\n                types,\r\n                callback: (event) => {\r\n                    if (liveMode === \"auto\") {\r\n                        queryClient.invalidateQueries(queryKey.resourceAll);\r\n                    }\r\n\r\n                    onLiveEvent?.(event);\r\n                    onLiveEventContextCallback?.(event);\r\n                },\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if (subscription) {\r\n                liveDataContext?.unsubscribe(subscription);\r\n            }\r\n        };\r\n    }, [enabled]);\r\n};\r\n","import React from \"react\";\r\n\r\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\r\n\r\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\r\n\r\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\r\n    liveProvider,\r\n    children,\r\n}) => {\r\n    return (\r\n        <LiveContext.Provider value={liveProvider}>\r\n            {children}\r\n        </LiveContext.Provider>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IRefineContext, IRefineContextProvider } from \"./IRefineContext\";\r\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\r\n\r\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\r\n\r\nexport const RefineContext = React.createContext<IRefineContext>({\r\n    hasDashboard: false,\r\n    mutationMode: \"pessimistic\",\r\n    warnWhenUnsavedChanges: false,\r\n    syncWithLocation: false,\r\n    undoableTimeout: 5000,\r\n    Title: undefined,\r\n    Sider: undefined,\r\n    Header: undefined,\r\n    Footer: undefined,\r\n    Layout: DefaultLayout,\r\n    OffLayoutArea: undefined,\r\n    liveMode: \"off\",\r\n    onLiveEvent: undefined,\r\n});\r\n\r\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\r\n    hasDashboard,\r\n    mutationMode,\r\n    warnWhenUnsavedChanges,\r\n    syncWithLocation,\r\n    undoableTimeout,\r\n    children,\r\n    DashboardPage,\r\n    Title,\r\n    Layout = DefaultLayout,\r\n    Header,\r\n    Sider,\r\n    Footer,\r\n    OffLayoutArea,\r\n    LoginPage = DefaultLoginPage,\r\n    catchAll,\r\n    liveMode = \"off\",\r\n    onLiveEvent,\r\n}) => {\r\n    return (\r\n        <RefineContext.Provider\r\n            value={{\r\n                hasDashboard,\r\n                mutationMode,\r\n                warnWhenUnsavedChanges,\r\n                syncWithLocation,\r\n                Title,\r\n                undoableTimeout,\r\n                Layout,\r\n                Header,\r\n                Sider,\r\n                Footer,\r\n                OffLayoutArea,\r\n                DashboardPage,\r\n                LoginPage,\r\n                catchAll,\r\n                liveMode,\r\n                onLiveEvent,\r\n            }}\r\n        >\r\n            {children}\r\n        </RefineContext.Provider>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { LayoutProps } from \"../../../interfaces\";\r\n\r\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\r\n    return <div>{children}</div>;\r\n};\r\n","import { useContext } from \"react\";\r\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\r\nimport { RefineContext } from \"@contexts/refine\";\r\n\r\nexport const useLiveMode = (\r\n    liveMode: LiveModeProps[\"liveMode\"],\r\n): LiveModeProps[\"liveMode\"] => {\r\n    const { liveMode: liveModeFromContext } =\r\n        useContext<IRefineContext>(RefineContext);\r\n\r\n    return liveMode ?? liveModeFromContext;\r\n};\r\n","import { useContext, useEffect } from \"react\";\r\n\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport {\r\n    BaseKey,\r\n    CrudFilters,\r\n    CrudSorting,\r\n    ILiveContext,\r\n    LiveEvent,\r\n    MetaDataQuery,\r\n    Pagination,\r\n} from \"../../../interfaces\";\r\n\r\nexport type UseSubscriptionProps = {\r\n    channel: string;\r\n    onLiveEvent: (event: LiveEvent) => void;\r\n    params?: {\r\n        ids?: BaseKey[];\r\n        id?: BaseKey;\r\n        metaData?: MetaDataQuery;\r\n        pagination?: Pagination;\r\n        hasPagination?: boolean;\r\n        sort?: CrudSorting;\r\n        filters?: CrudFilters;\r\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\r\n        resource?: string;\r\n        [key: string]: any;\r\n    };\r\n    types?: LiveEvent[\"type\"][];\r\n    enabled?: boolean;\r\n};\r\n\r\nexport const useSubscription = ({\r\n    params,\r\n    channel,\r\n    types = [\"*\"],\r\n    enabled = true,\r\n    onLiveEvent,\r\n}: UseSubscriptionProps): void => {\r\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\r\n\r\n    useEffect(() => {\r\n        let subscription: any;\r\n\r\n        if (enabled) {\r\n            subscription = liveDataContext?.subscribe({\r\n                channel,\r\n                params,\r\n                types,\r\n                callback: onLiveEvent,\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if (subscription) {\r\n                liveDataContext?.unsubscribe(subscription);\r\n            }\r\n        };\r\n    }, [enabled]);\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport { ILiveContext } from \"../../../interfaces\";\r\n\r\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\r\n    const liveContext = useContext<ILiveContext>(LiveContext);\r\n\r\n    return liveContext?.publish;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { ResourceContext, IResourceContext } from \"@contexts/resource\";\r\nimport { BaseKey, IResourceItem, ResourceRouterParams } from \"src/interfaces\";\r\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\r\n\r\nexport type UseResourcePropsType = {\r\n    /**\r\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/pankod/refine/issues/1618\r\n     */\r\n    resourceName?: string;\r\n    resourceNameOrRouteName?: string;\r\n    recordItemId?: BaseKey;\r\n};\r\n\r\ntype UseResourceReturnType = {\r\n    resources: IResourceContext[\"resources\"];\r\n    resource: IResourceItem;\r\n    resourceName: string;\r\n    id?: BaseKey;\r\n};\r\n\r\n/**\r\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/resource/useResource} for more details.\r\n */\r\nexport const useResource = ({\r\n    resourceName: propResourceName,\r\n    resourceNameOrRouteName,\r\n    recordItemId,\r\n}: UseResourcePropsType = {}): UseResourceReturnType => {\r\n    const { resources } = useContext(ResourceContext);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const { useParams } = useRouterContext();\r\n\r\n    const params = useParams<ResourceRouterParams>();\r\n\r\n    const resource = resourceWithRoute(\r\n        resourceNameOrRouteName ?? params.resource,\r\n    );\r\n\r\n    const resourceName = propResourceName ?? resource.name;\r\n\r\n    const id = recordItemId ?? params.id;\r\n\r\n    return { resources, resource, resourceName, id };\r\n};\r\n","import React, { ReactNode } from \"react\";\r\n\r\nimport { IResourceContext } from \"./IResourceContext\";\r\n\r\nexport {\r\n    IResourceItem,\r\n    IResourceComponents,\r\n    IResourceComponentsProps,\r\n    IResourceContext,\r\n} from \"./IResourceContext\";\r\n\r\nexport const ResourceContext = React.createContext<IResourceContext>({\r\n    resources: [],\r\n});\r\n\r\nexport const ResourceContextProvider: React.FC<\r\n    IResourceContext & { children: ReactNode }\r\n> = ({ resources, children }) => {\r\n    return (\r\n        <ResourceContext.Provider value={{ resources }}>\r\n            {children}\r\n        </ResourceContext.Provider>\r\n    );\r\n};\r\n","import { useContext, useCallback } from \"react\";\r\nimport { ResourceContext } from \"@contexts/resource\";\r\nimport { IResourceItem } from \"../../../interfaces\";\r\n\r\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\r\n\r\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\r\n    const { resources } = useContext(ResourceContext);\r\n\r\n    const resourceWithRoute = useCallback(\r\n        (route: string) => {\r\n            const resource = resources.find((p) => p.route === route);\r\n\r\n            if (!resource) {\r\n                const resourceWithName = resources.find(\r\n                    (p) => p.name === route,\r\n                );\r\n                return (\r\n                    resourceWithName ??\r\n                    ({ name: route, route: route } as IResourceItem)\r\n                );\r\n            }\r\n            return resource;\r\n        },\r\n        [resources],\r\n    );\r\n\r\n    return resourceWithRoute;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\r\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\r\n\r\nexport type UseCancelNotificationType = () => {\r\n    notifications: IUndoableQueue[];\r\n    notificationDispatch: React.Dispatch<any>;\r\n};\r\n\r\nexport const useCancelNotification: UseCancelNotificationType = () => {\r\n    const { notifications, notificationDispatch } =\r\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\r\n\r\n    return { notifications, notificationDispatch };\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { NotificationContext } from \"@contexts/notification\";\r\nimport { INotificationContext } from \"../../../interfaces\";\r\n\r\nexport const useNotification = (): INotificationContext => {\r\n    const { open, close } = useContext(NotificationContext);\r\n\r\n    return { open, close };\r\n};\r\n","import React, { createContext } from \"react\";\r\n\r\nimport { INotificationContext } from \"./INotificationContext\";\r\n\r\n/** @deprecated default value for notification context has no use and is an empty object.  */\r\nexport const defaultNotificationProvider: INotificationContext = {};\r\n\r\nexport const NotificationContext = createContext<INotificationContext>({});\r\n\r\nexport const NotificationContextProvider: React.FC<\r\n    INotificationContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ open, close, children }) => {\r\n    return (\r\n        <NotificationContext.Provider value={{ open, close }}>\r\n            {children}\r\n        </NotificationContext.Provider>\r\n    );\r\n};\r\n","import { useCallback } from \"react\";\r\n\r\nimport { OpenNotificationParams } from \"../../../interfaces\";\r\nimport { useNotification } from \"@hooks\";\r\n\r\nexport const useHandleNotification = (): typeof handleNotification => {\r\n    const { open } = useNotification();\r\n\r\n    const handleNotification = useCallback(\r\n        (\r\n            notification: OpenNotificationParams | false | undefined,\r\n            fallbackNotification?: OpenNotificationParams,\r\n        ) => {\r\n            if (notification !== false) {\r\n                if (notification) {\r\n                    open?.(notification);\r\n                } else if (fallbackNotification) {\r\n                    open?.(fallbackNotification);\r\n                }\r\n            }\r\n        },\r\n        [],\r\n    );\r\n\r\n    return handleNotification;\r\n};\r\n","import { useCallback, useContext } from \"react\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\n/**\r\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\r\n * It returns the changeLocale method from `i18nProvider` under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/translate/useSetLocale} for more details.\r\n */\r\nexport const useSetLocale = () => {\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\r\n};\r\n","import React from \"react\";\r\n\r\nimport { ITranslationContext } from \"../../interfaces\";\r\n\r\n/** @deprecated default value for translation context has no use and is an empty object.  */\r\nexport const defaultProvider: ITranslationContext = {};\r\n\r\nexport const TranslationContext = React.createContext<ITranslationContext>({});\r\n\r\nexport const TranslationContextProvider: React.FC<\r\n    ITranslationContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ children, i18nProvider }) => {\r\n    return (\r\n        <TranslationContext.Provider\r\n            value={{\r\n                i18nProvider: i18nProvider,\r\n            }}\r\n        >\r\n            {children}\r\n        </TranslationContext.Provider>\r\n    );\r\n};\r\n","import { useContext, useMemo } from \"react\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\n/**\r\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\r\n * It returns the translate method from `i18nProvider` under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/translate/useTranslate} for more details.\r\n */\r\nexport const useTranslate = () => {\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    const fn = useMemo(() => {\r\n        function translate(\r\n            key: string,\r\n            options?: any,\r\n            defaultMessage?: string,\r\n        ): string;\r\n        function translate(key: string, defaultMessage?: string): string;\r\n\r\n        function translate(\r\n            key: string,\r\n            options?: string | any,\r\n            defaultMessage?: string,\r\n        ) {\r\n            return (\r\n                i18nProvider?.translate(key, options, defaultMessage) ??\r\n                defaultMessage ??\r\n                (typeof options === \"string\" &&\r\n                typeof defaultMessage === \"undefined\"\r\n                    ? options\r\n                    : key)\r\n            );\r\n        }\r\n\r\n        return translate;\r\n    }, [i18nProvider]);\r\n\r\n    return fn;\r\n};\r\n","import { useContext, useCallback } from \"react\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\nexport type UseGetLocaleType = () => () => string | undefined;\r\n\r\n/**\r\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\r\n * It returns the `getLocale` method from `i18nProvider` under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/translate/useGetLocale} for more details.\r\n */\r\nexport const useGetLocale: UseGetLocaleType = () => {\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    return useCallback(() => i18nProvider?.getLocale(), []);\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { IRefineContext } from \"../../interfaces\";\r\n\r\ntype UseMutationModeType = () => {\r\n    mutationMode: IRefineContext[\"mutationMode\"];\r\n    undoableTimeout: IRefineContext[\"undoableTimeout\"];\r\n};\r\n\r\n/**\r\n * Mutation mode determines which mode the mutation runs with.\r\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\r\n * Each mode corresponds to a different type of user experience.\r\n *\r\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\r\n */\r\nexport const useMutationMode: UseMutationModeType = () => {\r\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\r\n\r\n    return { mutationMode, undoableTimeout };\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\r\nimport { IRefineContext, IUnsavedWarnContext } from \"../../../interfaces\";\r\n\r\ntype UseWarnAboutChangeType = () => {\r\n    warnWhenUnsavedChanges: IRefineContext[\"warnWhenUnsavedChanges\"];\r\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\r\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\r\n};\r\n\r\n/**\r\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\r\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#warnwhenunsavedchanges} for more details.\r\n */\r\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\r\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\r\n\r\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\r\n\r\n    return {\r\n        warnWhenUnsavedChanges,\r\n        warnWhen: Boolean(warnWhen),\r\n        setWarnWhen: setWarnWhen ?? (() => undefined),\r\n    };\r\n};\r\n","import React, { ReactNode, useState } from \"react\";\r\n\r\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\r\n\r\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\r\n\r\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\r\n    children,\r\n}) => {\r\n    const [warnWhen, setWarnWhen] = useState(false);\r\n\r\n    return (\r\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\r\n            {children}\r\n        </UnsavedWarnContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { IRefineContext } from \"../../interfaces\";\r\n\r\ntype UseSyncWithLocationType = () => {\r\n    syncWithLocation: IRefineContext[\"syncWithLocation\"];\r\n};\r\n\r\n/**\r\n * List query parameter values can be edited manually by typing directly in the URL.\r\n * To activate this feature `syncWithLocation` needs to be set to `true`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#syncwithlocation} for more details.\r\n */\r\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\r\n    const { syncWithLocation } = useContext(RefineContext);\r\n\r\n    return { syncWithLocation };\r\n};\r\n","import { useContext } from \"react\";\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { TitleProps } from \"../../interfaces\";\r\n\r\n/**\r\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\r\n * In this way, it becomes easier for us to access this component in various parts of the application.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/refine/useTitle} for more details.\r\n */\r\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\r\n    const { Title } = useContext(RefineContext);\r\n\r\n    return Title;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\n\r\nexport const useRefineContext = () => {\r\n    const {\r\n        Footer,\r\n        Header,\r\n        Layout,\r\n        OffLayoutArea,\r\n        Sider,\r\n        Title,\r\n        hasDashboard,\r\n        mutationMode,\r\n        syncWithLocation,\r\n        undoableTimeout,\r\n        warnWhenUnsavedChanges,\r\n        DashboardPage,\r\n        LoginPage,\r\n        catchAll,\r\n    } = useContext(RefineContext);\r\n\r\n    return {\r\n        Footer,\r\n        Header,\r\n        Layout,\r\n        OffLayoutArea,\r\n        Sider,\r\n        Title,\r\n        hasDashboard,\r\n        mutationMode,\r\n        syncWithLocation,\r\n        undoableTimeout,\r\n        warnWhenUnsavedChanges,\r\n        DashboardPage,\r\n        LoginPage,\r\n        catchAll,\r\n    };\r\n};\r\n","import { useState } from \"react\";\r\nimport {\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport {\r\n    ResourceRouterParams,\r\n    BaseRecord,\r\n    MapDataFn,\r\n    CrudSorting,\r\n    CrudFilters,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport { userFriendlyResourceName } from \"@definitions\";\r\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\r\n\r\ntype UseExportOptionsType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TVariables = any,\r\n> = {\r\n    resourceName?: string;\r\n    mapData?: MapDataFn<TData, TVariables>;\r\n    sorter?: CrudSorting;\r\n    filters?: CrudFilters;\r\n    maxItemCount?: number;\r\n    pageSize?: number;\r\n    exportOptions?: Options;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    onError?: (error: any) => void;\r\n};\r\n\r\ntype UseExportReturnType = {\r\n    isLoading: boolean;\r\n    triggerExport: () => Promise<void>;\r\n};\r\n\r\n/**\r\n * `useExport` hook allows you to make your resources exportable.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useExport} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TVariables - Values for params.\r\n *\r\n */\r\nexport const useExport = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TVariables = any,\r\n>({\r\n    resourceName,\r\n    sorter,\r\n    filters,\r\n    maxItemCount,\r\n    pageSize = 20,\r\n    mapData = (item) => item as any,\r\n    exportOptions,\r\n    metaData,\r\n    dataProviderName,\r\n    onError,\r\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { useParams } = useRouterContext();\r\n\r\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\r\n    let { name: resource } = resourceWithRoute(routeResourceName);\r\n\r\n    if (resourceName) {\r\n        resource = resourceName;\r\n    }\r\n\r\n    const filename = `${userFriendlyResourceName(\r\n        resource,\r\n        \"plural\",\r\n    )}-${new Date().toLocaleString()}`;\r\n\r\n    const { getList } = dataProvider(dataProviderName);\r\n\r\n    const triggerExport = async () => {\r\n        setIsLoading(true);\r\n\r\n        let rawData: BaseRecord[] = [];\r\n\r\n        let current = 1;\r\n        let preparingData = true;\r\n        while (preparingData) {\r\n            try {\r\n                const { data, total } = await getList<TData>({\r\n                    resource,\r\n                    filters,\r\n                    sort: sorter,\r\n                    pagination: {\r\n                        current,\r\n                        pageSize,\r\n                    },\r\n                    metaData,\r\n                });\r\n\r\n                current++;\r\n\r\n                rawData.push(...data);\r\n\r\n                if (maxItemCount && rawData.length >= maxItemCount) {\r\n                    rawData = rawData.slice(0, maxItemCount);\r\n                    preparingData = false;\r\n                }\r\n\r\n                if (total === rawData.length) {\r\n                    preparingData = false;\r\n                }\r\n            } catch (error) {\r\n                setIsLoading(false);\r\n                preparingData = false;\r\n\r\n                onError?.(error);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        const csvExporter = new ExportToCsv({\r\n            filename,\r\n            useKeysAsHeaders: true,\r\n            ...exportOptions,\r\n        });\r\n\r\n        csvExporter.generateCsv(rawData.map(mapData as any));\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    return {\r\n        isLoading,\r\n        triggerExport,\r\n    };\r\n};\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { QueryObserverResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n    useWarnAboutChange,\r\n    useCreate,\r\n    useUpdate,\r\n    useRedirectionAfterSubmission,\r\n    useMutationMode,\r\n    useOne,\r\n} from \"@hooks\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    CreateResponse,\r\n    GetOneResponse,\r\n    HttpError,\r\n    LiveModeProps,\r\n    ResourceRouterParams,\r\n    RedirectionTypes,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    UpdateResponse,\r\n    MutationMode,\r\n    BaseKey,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { UpdateParams, UseUpdateReturnType } from \"../data/useUpdate\";\r\nimport { UseCreateReturnType } from \"../data/useCreate\";\r\n\r\nexport type ActionParams = {\r\n    action?: \"edit\" | \"create\" | \"clone\";\r\n};\r\n\r\ntype ActionFormProps<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = {\r\n    onMutationSuccess?: (\r\n        data: CreateResponse<TData> | UpdateResponse<TData>,\r\n        variables: TVariables,\r\n        context: any,\r\n    ) => void;\r\n    onMutationError?: (\r\n        error: TError,\r\n        variables: TVariables,\r\n        context: any,\r\n    ) => void;\r\n    redirect?: RedirectionTypes;\r\n    resource?: string;\r\n    id?: BaseKey;\r\n    metaData?: MetaDataQuery;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\r\n} & SuccessErrorNotification &\r\n    ActionParams &\r\n    LiveModeProps;\r\n\r\nexport type UseFormProps<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = ActionParams & ActionFormProps<TData, TError, TVariables> & LiveModeProps;\r\n\r\nexport type UseFormReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = {\r\n    id?: BaseKey;\r\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\r\n\r\n    queryResult?: QueryObserverResult<GetOneResponse<TData>>;\r\n    mutationResult:\r\n        | UseUpdateReturnType<TData, TError, TVariables>\r\n        | UseCreateReturnType<TData, TError, TVariables>;\r\n    formLoading: boolean;\r\n    onFinish: (\r\n        values: TVariables,\r\n    ) => Promise<CreateResponse<TData> | UpdateResponse<TData> | void>;\r\n    redirect: (\r\n        redirect: \"show\" | \"list\" | \"edit\" | \"create\" | false,\r\n        idFromFunction?: BaseKey | undefined,\r\n    ) => void;\r\n};\r\n\r\n/**\r\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/form/useForm} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for params. default `{}`\r\n *\r\n *\r\n */\r\nexport const useForm = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>({\r\n    action: actionFromProps,\r\n    resource: resourceFromProps,\r\n    id: idFromProps,\r\n    onMutationSuccess,\r\n    onMutationError,\r\n    redirect: redirectFromProps,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    mutationMode: mutationModeProp,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    undoableTimeout,\r\n    dataProviderName,\r\n    invalidates,\r\n    queryOptions,\r\n}: UseFormProps<TData, TError, TVariables> = {}): UseFormReturnType<\r\n    TData,\r\n    TError,\r\n    TVariables\r\n> => {\r\n    const { useParams } = useRouterContext();\r\n    const {\r\n        resource: resourceFromRoute,\r\n        action: actionFromRoute,\r\n        id: idFromParams,\r\n    } = useParams<ResourceRouterParams>();\r\n\r\n    const defaultId =\r\n        !resourceFromProps || resourceFromProps === resourceFromRoute\r\n            ? idFromProps ?? idFromParams\r\n            : idFromProps;\r\n\r\n    // id state is needed to determine selected record in a context for example useModal\r\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\r\n\r\n    const resourceName = resourceFromProps ?? resourceFromRoute;\r\n    const action = actionFromProps ?? actionFromRoute ?? \"create\";\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n    const resource = resourceWithRoute(resourceName);\r\n\r\n    const { mutationMode: mutationModeContext } = useMutationMode();\r\n    const mutationMode = mutationModeProp ?? mutationModeContext;\r\n\r\n    const isCreate = action === \"create\";\r\n    const isEdit = action === \"edit\";\r\n    const isClone = action === \"clone\";\r\n\r\n    const redirect = redirectFromProps ?? \"list\";\r\n\r\n    const enableQuery = id !== undefined && (isEdit || isClone);\r\n\r\n    const queryResult = useOne<TData>({\r\n        resource: resource.name,\r\n        id: id ?? \"\",\r\n        queryOptions: {\r\n            enabled: enableQuery,\r\n            ...queryOptions,\r\n        },\r\n        liveMode,\r\n        onLiveEvent,\r\n        liveParams,\r\n        metaData,\r\n        dataProviderName,\r\n    });\r\n\r\n    const { isFetching: isFetchingQuery } = queryResult;\r\n\r\n    const mutationResultCreate = useCreate<TData, TError, TVariables>();\r\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\r\n        mutationResultCreate;\r\n\r\n    const mutationResultUpdate = useUpdate<TData, TError, TVariables>();\r\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\r\n        mutationResultUpdate;\r\n\r\n    const { setWarnWhen } = useWarnAboutChange();\r\n\r\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\r\n\r\n    const onFinishCreate = async (values: TVariables) => {\r\n        setWarnWhen(false);\r\n\r\n        const onSuccess = (id?: BaseKey) => {\r\n            handleSubmitWithRedirect({\r\n                redirect,\r\n                resource,\r\n                id,\r\n            });\r\n        };\r\n\r\n        if (mutationMode !== \"pessimistic\") {\r\n            setTimeout(() => {\r\n                onSuccess();\r\n            });\r\n        }\r\n\r\n        return new Promise<CreateResponse<TData> | void>((resolve, reject) => {\r\n            if (mutationMode !== \"pessimistic\") {\r\n                resolve();\r\n            }\r\n            return mutateCreate(\r\n                {\r\n                    values,\r\n                    resource: resource.name,\r\n                    successNotification,\r\n                    errorNotification,\r\n                    metaData,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                },\r\n                {\r\n                    onSuccess: (data, _, context) => {\r\n                        if (onMutationSuccess) {\r\n                            onMutationSuccess(data, values, context);\r\n                        }\r\n\r\n                        const responseId = data?.data?.id;\r\n\r\n                        onSuccess(responseId);\r\n\r\n                        resolve(data);\r\n                    },\r\n                    onError: (error: TError, _, context) => {\r\n                        if (onMutationError) {\r\n                            return onMutationError(error, values, context);\r\n                        }\r\n                        reject();\r\n                    },\r\n                },\r\n            );\r\n        });\r\n    };\r\n\r\n    const onFinishUpdate = async (values: TVariables) => {\r\n        setWarnWhen(false);\r\n\r\n        const variables: UpdateParams<TVariables> = {\r\n            id: id ?? \"\",\r\n            values,\r\n            resource: resource.name,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            successNotification,\r\n            errorNotification,\r\n            metaData,\r\n            dataProviderName,\r\n            invalidates,\r\n        };\r\n\r\n        const onSuccess = () => {\r\n            // If it is in modal mode set it to undefined. Otherwise set it to current id from route.\r\n            setId(defaultId);\r\n            handleSubmitWithRedirect({\r\n                redirect,\r\n                resource,\r\n                id,\r\n            });\r\n        };\r\n\r\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\r\n        if (mutationMode !== \"pessimistic\") {\r\n            setTimeout(() => {\r\n                onSuccess();\r\n            });\r\n        }\r\n\r\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\r\n        return new Promise<UpdateResponse<TData> | void>((resolve, reject) => {\r\n            if (mutationMode !== \"pessimistic\") {\r\n                resolve();\r\n            }\r\n            return setTimeout(() => {\r\n                mutateUpdate(variables, {\r\n                    onSuccess: (data, _, context) => {\r\n                        if (onMutationSuccess) {\r\n                            onMutationSuccess(data, values, context);\r\n                        }\r\n\r\n                        if (mutationMode === \"pessimistic\") {\r\n                            onSuccess();\r\n                        }\r\n\r\n                        resolve(data);\r\n                    },\r\n                    onError: (error: TError, _, context) => {\r\n                        if (onMutationError) {\r\n                            return onMutationError(error, values, context);\r\n                        }\r\n                        reject();\r\n                    },\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    const createResult = {\r\n        formLoading: isFetchingQuery || isLoadingCreate,\r\n        mutationResult: mutationResultCreate,\r\n        onFinish: onFinishCreate,\r\n    };\r\n\r\n    const editResult = {\r\n        formLoading: isFetchingQuery || isLoadingUpdate,\r\n        mutationResult: mutationResultUpdate,\r\n        onFinish: onFinishUpdate,\r\n    };\r\n\r\n    const result = isCreate || isClone ? createResult : editResult;\r\n\r\n    return {\r\n        ...result,\r\n        queryResult,\r\n        id,\r\n        setId,\r\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\r\n            handleSubmitWithRedirect({\r\n                redirect:\r\n                    redirect !== undefined\r\n                        ? redirect\r\n                        : isEdit\r\n                        ? \"list\"\r\n                        : \"edit\",\r\n                resource,\r\n                id: idFromFunction ?? id,\r\n            });\r\n        },\r\n    };\r\n};\r\n","import { useCallback } from \"react\";\r\n\r\nimport { BaseKey, IResourceItem } from \"../../interfaces\";\r\nimport { useNavigation } from \"@hooks\";\r\n\r\nexport type UseRedirectionAfterSubmissionType = () => (options: {\r\n    redirect: \"show\" | \"list\" | \"edit\" | \"create\" | false;\r\n    resource: IResourceItem;\r\n    id?: BaseKey;\r\n}) => void;\r\n\r\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\r\n    () => {\r\n        const { show, edit, list, create } = useNavigation();\r\n\r\n        const handleSubmitWithRedirect = useCallback(\r\n            ({\r\n                redirect,\r\n                resource,\r\n                id,\r\n            }: {\r\n                redirect: \"show\" | \"list\" | \"edit\" | \"create\" | false;\r\n                resource: IResourceItem;\r\n                id?: BaseKey;\r\n            }) => {\r\n                if (redirect && resource.route) {\r\n                    if (resource.canShow && redirect === \"show\" && id) {\r\n                        return show(resource.route, id);\r\n                    }\r\n\r\n                    if (resource.canEdit && redirect === \"edit\" && id) {\r\n                        return edit(resource.route, id);\r\n                    }\r\n\r\n                    if (resource.canCreate && redirect === \"create\") {\r\n                        return create(resource.route);\r\n                    }\r\n\r\n                    return list(resource.route, \"push\");\r\n                } else {\r\n                    return;\r\n                }\r\n            },\r\n            [],\r\n        );\r\n\r\n        return handleSubmitWithRedirect;\r\n    };\r\n","import { useResourceWithRoute, useRouterContext } from \"@hooks\";\r\nimport { BaseKey } from \"../../interfaces\";\r\n\r\nexport type HistoryType = \"push\" | \"replace\";\r\n\r\n/**\r\n * `refine` uses {@link https://reactrouter.com/web/api/Hooks `React Router`} and comes with all redirects out of the box.\r\n * It allows you to manage your routing operations in refine.\r\n * Using this hook, you can manage all the routing operations of your application very easily.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/navigation/useNavigation} for more details.\r\n */\r\nexport const useNavigation = () => {\r\n    const { useHistory } = useRouterContext();\r\n    const history = useHistory();\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\r\n        type === \"push\" ? history.push(url) : history.replace(url);\r\n    };\r\n\r\n    const createUrl = (resource: string) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        return `/${resourceName.route}/create`;\r\n    };\r\n\r\n    const editUrl = (resource: string, id: BaseKey) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        const encodedId = encodeURIComponent(id);\r\n\r\n        return `/${resourceName.route}/edit/${encodedId}`;\r\n    };\r\n\r\n    const cloneUrl = (resource: string, id: BaseKey) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        const encodedId = encodeURIComponent(id);\r\n        return `/${resourceName.route}/clone/${encodedId}`;\r\n    };\r\n\r\n    const showUrl = (resource: string, id: BaseKey) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        const encodedId = encodeURIComponent(id);\r\n        return `/${resourceName.route}/show/${encodedId}`;\r\n    };\r\n\r\n    const listUrl = (resource: string) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        return `/${resourceName.route}`;\r\n    };\r\n\r\n    const create = (resource: string, type: HistoryType = \"push\") => {\r\n        handleUrl(createUrl(resource), type);\r\n    };\r\n\r\n    const edit = (\r\n        resource: string,\r\n        id: BaseKey,\r\n        type: HistoryType = \"push\",\r\n    ) => {\r\n        handleUrl(editUrl(resource, id), type);\r\n    };\r\n\r\n    const clone = (\r\n        resource: string,\r\n        id: BaseKey,\r\n        type: HistoryType = \"push\",\r\n    ) => {\r\n        handleUrl(cloneUrl(resource, id), type);\r\n    };\r\n\r\n    const show = (\r\n        resource: string,\r\n        id: BaseKey,\r\n        type: HistoryType = \"push\",\r\n    ) => {\r\n        handleUrl(showUrl(resource, id), type);\r\n    };\r\n\r\n    const list = (resource: string, type: HistoryType = \"push\") => {\r\n        handleUrl(listUrl(resource), type);\r\n    };\r\n\r\n    const push = (path: string, state?: unknown) => {\r\n        history.push(path, state);\r\n    };\r\n\r\n    const replace = (path: string, state?: unknown) => {\r\n        history.replace(path, state);\r\n    };\r\n\r\n    const goBack = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    return {\r\n        create,\r\n        createUrl,\r\n        edit,\r\n        editUrl,\r\n        clone,\r\n        cloneUrl,\r\n        show,\r\n        showUrl,\r\n        list,\r\n        listUrl,\r\n        push,\r\n        replace,\r\n        goBack,\r\n    };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { QueryObserverResult } from \"react-query\";\r\n\r\nimport { useOne, useResourceWithRoute, useRouterContext } from \"@hooks\";\r\n\r\nimport {\r\n    ResourceRouterParams,\r\n    BaseRecord,\r\n    GetOneResponse,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    BaseKey,\r\n} from \"../../interfaces\";\r\n\r\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord> = {\r\n    queryResult: QueryObserverResult<GetOneResponse<TData>>;\r\n    showId?: BaseKey;\r\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\r\n};\r\n\r\nexport type useShowProps = {\r\n    resource?: string;\r\n    id?: BaseKey;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & LiveModeProps &\r\n    SuccessErrorNotification;\r\n\r\n/**\r\n * `useShow` hook allows you to fetch the desired record.\r\n * It uses `getOne` method as query function from the dataProvider that is\r\n * passed to {@link https://refine.dev/docs/api-references/components/refine-config `<Refine>`}.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/show/useShow} for more details.\r\n */\r\nexport const useShow = <TData extends BaseRecord = BaseRecord>({\r\n    resource: resourceFromProp,\r\n    id,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    dataProviderName,\r\n}: useShowProps = {}): useShowReturnType<TData> => {\r\n    const { useParams } = useRouterContext();\r\n\r\n    const { resource: routeResourceName, id: idFromRoute } =\r\n        useParams<ResourceRouterParams>();\r\n\r\n    const defaultId =\r\n        !resourceFromProp || resourceFromProp === routeResourceName\r\n            ? id ?? idFromRoute\r\n            : id;\r\n\r\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\r\n\r\n    const queryResult = useOne<TData>({\r\n        resource: resource.name,\r\n        id: showId ?? \"\",\r\n        queryOptions: {\r\n            enabled: showId !== undefined,\r\n        },\r\n        successNotification,\r\n        errorNotification,\r\n        metaData,\r\n        liveMode,\r\n        onLiveEvent,\r\n        dataProviderName,\r\n    });\r\n\r\n    return {\r\n        queryResult,\r\n        showId,\r\n        setShowId,\r\n    };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { parse, ParseConfig } from \"papaparse\";\r\nimport chunk from \"lodash/chunk\";\r\n\r\nimport {\r\n    useCreate,\r\n    useCreateMany,\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n} from \"@hooks\";\r\nimport {\r\n    MapDataFn,\r\n    BaseRecord,\r\n    HttpError,\r\n    ResourceRouterParams,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport { importCSVMapper } from \"@definitions\";\r\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\r\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\r\n\r\nexport type ImportSuccessResult<TVariables, TData> = {\r\n    request: TVariables[];\r\n    type: \"success\";\r\n    response: TData[];\r\n};\r\n\r\nexport type ImportErrorResult<TVariables> = {\r\n    request: TVariables[];\r\n    type: \"error\";\r\n    response: HttpError[];\r\n};\r\n\r\nexport type OnFinishParams<TVariables, TData> = {\r\n    succeeded: ImportSuccessResult<TVariables, TData>[];\r\n    errored: ImportErrorResult<TVariables>[];\r\n};\r\n\r\nexport type OnProgressParams = {\r\n    totalAmount: number;\r\n    processedAmount: number;\r\n};\r\n\r\nexport type ImportOptions<\r\n    TItem,\r\n    TVariables = any,\r\n    TData extends BaseRecord = BaseRecord,\r\n> = {\r\n    resourceName?: string;\r\n    mapData?: MapDataFn<TItem, TVariables>;\r\n    paparseOptions?: ParseConfig;\r\n    batchSize?: number;\r\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\r\n    metaData?: MetaDataQuery;\r\n    onProgress?: (onProgressParams: OnProgressParams) => void;\r\n    dataProviderName?: string;\r\n};\r\n\r\nexport type CreatedValuesType<TVariables, TData> =\r\n    | ImportSuccessResult<TVariables, TData>\r\n    | ImportErrorResult<TVariables>;\r\n\r\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\r\n    file: Partial<File>;\r\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\r\n\r\nexport type UseImportInputPropsType = {\r\n    type: \"file\";\r\n    accept: string;\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport type UseImportReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TVariables = {},\r\n    TError extends HttpError = HttpError,\r\n> = {\r\n    inputProps: UseImportInputPropsType;\r\n    mutationResult:\r\n        | UseCreateReturnType<TData, TError, TVariables>\r\n        | UseCreateManyReturnType<TData, TError, TVariables>;\r\n    isLoading: boolean;\r\n    handleChange: HandleChangeType<TVariables, TData>;\r\n};\r\n\r\n/**\r\n * `useImport` hook allows you to handle your csv import logic easily.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useImport} for more details.\r\n *\r\n * @typeParam TItem - Interface of parsed csv data\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useImport = <\r\n    TItem extends unknown = any,\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = any,\r\n>({\r\n    resourceName,\r\n    mapData = (item) => item as unknown as TVariables,\r\n    paparseOptions,\r\n    batchSize = Number.MAX_SAFE_INTEGER,\r\n    onFinish,\r\n    metaData,\r\n    onProgress,\r\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\r\n    TData,\r\n    TVariables,\r\n    TError\r\n> => {\r\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\r\n    const [totalAmount, setTotalAmount] = useState<number>(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n    const { useParams } = useRouterContext();\r\n\r\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\r\n    const { name: resource } = resourceWithRoute(\r\n        resourceName ?? routeResourceName,\r\n    );\r\n\r\n    const createMany = useCreateMany<TData, TError, TVariables>();\r\n    const create = useCreate<TData, TError, TVariables>();\r\n\r\n    let mutationResult:\r\n        | UseCreateReturnType<TData, TError, TVariables>\r\n        | UseCreateManyReturnType<TData, TError, TVariables>;\r\n\r\n    if (batchSize === 1) {\r\n        mutationResult = create;\r\n    } else {\r\n        mutationResult = createMany;\r\n    }\r\n\r\n    const handleCleanup = () => {\r\n        setTotalAmount(0);\r\n        setProcessedAmount(0);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const handleFinish = (\r\n        createdValues: CreatedValuesType<TVariables, TData>[],\r\n    ) => {\r\n        const result = {\r\n            succeeded: createdValues.filter(\r\n                (item) => item.type === \"success\",\r\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\r\n            errored: createdValues.filter(\r\n                (item) => item.type === \"error\",\r\n            ) as unknown as ImportErrorResult<TVariables>[],\r\n        };\r\n\r\n        onFinish?.(result);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        onProgress?.({ totalAmount, processedAmount });\r\n    }, [totalAmount, processedAmount]);\r\n\r\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\r\n        handleCleanup();\r\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\r\n            (resolve) => {\r\n                setIsLoading(true);\r\n                parse(file as any, {\r\n                    complete: async ({ data }: { data: unknown[][] }) => {\r\n                        const values = importCSVMapper(data, mapData);\r\n\r\n                        setTotalAmount(values.length);\r\n                        if (batchSize === 1) {\r\n                            const createdValues = await Promise.all(\r\n                                values\r\n                                    .map((value) => {\r\n                                        const response = create.mutateAsync({\r\n                                            resource,\r\n                                            values: value,\r\n                                            successNotification: false,\r\n                                            errorNotification: false,\r\n                                            metaData,\r\n                                        });\r\n\r\n                                        return { response, value };\r\n                                    })\r\n                                    .map(({ response, value }) =>\r\n                                        response\r\n                                            .then(({ data }) => {\r\n                                                setProcessedAmount(\r\n                                                    (currentAmount) => {\r\n                                                        return (\r\n                                                            currentAmount + 1\r\n                                                        );\r\n                                                    },\r\n                                                );\r\n\r\n                                                return {\r\n                                                    response: [data],\r\n                                                    type: \"success\",\r\n                                                    request: [value],\r\n                                                } as ImportSuccessResult<\r\n                                                    TVariables,\r\n                                                    TData\r\n                                                >;\r\n                                            })\r\n                                            .catch(\r\n                                                (error: HttpError) =>\r\n                                                    ({\r\n                                                        response: [error],\r\n                                                        type: \"error\",\r\n                                                        request: [value],\r\n                                                    } as ImportErrorResult<TVariables>),\r\n                                            ),\r\n                                    ),\r\n                            );\r\n                            resolve(createdValues);\r\n                        } else {\r\n                            const createdValues = await Promise.all(\r\n                                chunk(values, batchSize)\r\n                                    .map((batch) => {\r\n                                        return {\r\n                                            response: createMany.mutateAsync({\r\n                                                resource,\r\n                                                values: batch,\r\n                                                successNotification: false,\r\n                                                errorNotification: false,\r\n                                                metaData,\r\n                                            }),\r\n                                            currentBatchLength: batch.length,\r\n                                            value: batch,\r\n                                        };\r\n                                    })\r\n                                    .map(\r\n                                        ({\r\n                                            response,\r\n                                            value,\r\n                                            currentBatchLength,\r\n                                        }) =>\r\n                                            response\r\n                                                .then((response) => {\r\n                                                    setProcessedAmount(\r\n                                                        (currentAmount) => {\r\n                                                            return (\r\n                                                                currentAmount +\r\n                                                                currentBatchLength\r\n                                                            );\r\n                                                        },\r\n                                                    );\r\n\r\n                                                    return {\r\n                                                        response: response.data,\r\n                                                        type: \"success\",\r\n                                                        request: value,\r\n                                                    } as ImportSuccessResult<\r\n                                                        TVariables,\r\n                                                        TData\r\n                                                    >;\r\n                                                })\r\n                                                .catch(\r\n                                                    (error: HttpError) =>\r\n                                                        ({\r\n                                                            response: [error],\r\n                                                            type: \"error\",\r\n                                                            request: value,\r\n                                                        } as ImportErrorResult<TVariables>),\r\n                                                ),\r\n                                    ),\r\n                            );\r\n\r\n                            resolve(createdValues);\r\n                        }\r\n                    },\r\n\r\n                    ...paparseOptions,\r\n                });\r\n            },\r\n        ).then((createdValues) => {\r\n            handleFinish(createdValues);\r\n            return createdValues;\r\n        });\r\n    };\r\n\r\n    return {\r\n        inputProps: {\r\n            type: \"file\",\r\n            accept: \".csv\",\r\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\r\n                if (event.target.files && event.target.files.length > 0) {\r\n                    handleChange({ file: event.target.files[0] });\r\n                }\r\n            },\r\n        },\r\n        mutationResult,\r\n        isLoading,\r\n        handleChange,\r\n    };\r\n};\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport type useModalReturnType = {\r\n    visible: boolean;\r\n    show: () => void;\r\n    close: () => void;\r\n};\r\n\r\nexport type useModalProps = {\r\n    defaultVisible?: boolean;\r\n};\r\n\r\nexport const useModal = ({\r\n    defaultVisible = false,\r\n}: useModalProps = {}): useModalReturnType => {\r\n    const [visible, setVisible] = useState(defaultVisible);\r\n\r\n    const show = useCallback(() => setVisible(true), [visible]);\r\n    const close = useCallback(() => setVisible(false), [visible]);\r\n\r\n    return {\r\n        visible,\r\n        show,\r\n        close,\r\n    };\r\n};\r\n","import { useContext } from \"react\";\r\nimport { RouterContext } from \"@contexts/router\";\r\n\r\nexport const useRouterContext = () => {\r\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\r\n        useContext(RouterContext);\r\n\r\n    return {\r\n        useHistory,\r\n        useLocation,\r\n        useParams,\r\n        Prompt,\r\n        Link,\r\n        routes,\r\n    };\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IRouterContext } from \"../../interfaces\";\r\n\r\nexport const defaultProvider: IRouterContext = {\r\n    useHistory: () => false,\r\n    useLocation: () => false,\r\n    useParams: () => ({} as any),\r\n    Prompt: () => null,\r\n    Link: () => null,\r\n};\r\n\r\nexport const RouterContext =\r\n    React.createContext<IRouterContext>(defaultProvider);\r\n\r\nexport const RouterContextProvider: React.FC<\r\n    IRouterContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({\r\n    children,\r\n    useHistory,\r\n    useLocation,\r\n    useParams,\r\n    Prompt,\r\n    Link,\r\n    routes,\r\n}) => {\r\n    return (\r\n        <RouterContext.Provider\r\n            value={{\r\n                useHistory,\r\n                useLocation,\r\n                useParams,\r\n                Prompt,\r\n                Link,\r\n                routes,\r\n            }}\r\n        >\r\n            {children}\r\n        </RouterContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport { AccessControlContext } from \"@contexts/accessControl\";\r\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\r\n\r\nexport type UseCanProps = CanParams & {\r\n    queryOptions?: UseQueryOptions<CanReturnType>;\r\n};\r\n\r\n/**\r\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\r\n * @see {@link https://refine.dev/docs/core/hooks/accessControl/useCan} for more details.\r\n *\r\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\r\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\r\n *\r\n */\r\nexport const useCan = ({\r\n    action,\r\n    resource,\r\n    params,\r\n    queryOptions,\r\n}: UseCanProps): UseQueryResult<CanReturnType> => {\r\n    const { can } = useContext(AccessControlContext);\r\n\r\n    const queryResponse = useQuery<CanReturnType>(\r\n        [\"useCan\", { action, resource, params }],\r\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\r\n        () => can?.({ action, resource, params }) ?? { can: true },\r\n        {\r\n            enabled: typeof can !== \"undefined\",\r\n            ...queryOptions,\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return typeof can === \"undefined\"\r\n        ? ({ data: { can: true } } as typeof queryResponse)\r\n        : queryResponse;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IAccessControlContext } from \"./IAccessControlContext\";\r\n\r\n/** @deprecated default value for access control context has no use and is an empty object. */\r\nexport const defaultAccessControlContext: IAccessControlContext = {};\r\n\r\nexport const AccessControlContext = React.createContext<IAccessControlContext>(\r\n    {},\r\n);\r\n\r\nexport const AccessControlContextProvider: React.FC<\r\n    IAccessControlContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ can, children }) => {\r\n    return (\r\n        <AccessControlContext.Provider value={{ can }}>\r\n            {children}\r\n        </AccessControlContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { AccessControlContext } from \"@contexts/accessControl\";\r\nimport { IAccessControlContext } from \"../../interfaces\";\r\n\r\nexport const useCanWithoutCache = (): IAccessControlContext => {\r\n    const { can } = useContext(AccessControlContext);\r\n\r\n    return { can };\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { QueryObserverResult, UseQueryOptions } from \"react-query\";\r\nimport uniqBy from \"lodash/uniqBy\";\r\nimport debounce from \"lodash/debounce\";\r\n\r\nimport { useList, useMany } from \"@hooks\";\r\nimport {\r\n    CrudSorting,\r\n    Option,\r\n    BaseRecord,\r\n    GetManyResponse,\r\n    GetListResponse,\r\n    CrudFilters,\r\n    SuccessErrorNotification,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    BaseKey,\r\n} from \"../../interfaces\";\r\n\r\nexport type UseSelectProps<TData, TError> = {\r\n    resource: string;\r\n    optionLabel?: string;\r\n    optionValue?: string;\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n    defaultValue?: BaseKey | BaseKey[];\r\n    debounce?: number;\r\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\r\n    fetchSize?: number;\r\n    defaultValueQueryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\r\n    onSearch?: (value: string) => CrudFilters;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\nexport type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {\r\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\r\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\r\n    onSearch: (value: string | undefined) => void;\r\n    options: Option[];\r\n};\r\n\r\nexport const useSelect = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>(\r\n    props: UseSelectProps<TData, TError>,\r\n): UseSelectReturnType<TData> => {\r\n    const [search, setSearch] = useState<CrudFilters>([]);\r\n    const [options, setOptions] = useState<Option[]>([]);\r\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\r\n\r\n    const {\r\n        resource,\r\n        sort,\r\n        filters = [],\r\n        optionLabel = \"title\",\r\n        optionValue = \"id\",\r\n        debounce: debounceValue = 300,\r\n        successNotification,\r\n        errorNotification,\r\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\r\n        queryOptions,\r\n        fetchSize,\r\n        liveMode,\r\n        defaultValue = [],\r\n        onLiveEvent,\r\n        onSearch: onSearchFromProp,\r\n        liveParams,\r\n        metaData,\r\n        dataProviderName,\r\n    } = props;\r\n\r\n    const defaultValues = Array.isArray(defaultValue)\r\n        ? defaultValue\r\n        : [defaultValue];\r\n\r\n    const defaultValueQueryOnSuccess = (data: GetManyResponse<TData>) => {\r\n        setSelectedOptions(\r\n            data.data.map((item) => ({\r\n                label: item[optionLabel],\r\n                value: item[optionValue],\r\n            })),\r\n        );\r\n    };\r\n\r\n    const defaultValueQueryOptions =\r\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\r\n\r\n    const defaultValueQueryResult = useMany<TData, TError>({\r\n        resource,\r\n        ids: defaultValues,\r\n        queryOptions: {\r\n            enabled: defaultValues.length > 0,\r\n            ...defaultValueQueryOptions,\r\n            onSuccess: (data) => {\r\n                defaultValueQueryOnSuccess(data);\r\n                defaultValueQueryOptions?.onSuccess?.(data);\r\n            },\r\n        },\r\n        metaData,\r\n        liveMode: \"off\",\r\n        dataProviderName,\r\n    });\r\n\r\n    const defaultQueryOnSuccess = (data: GetListResponse<TData>) => {\r\n        setOptions(\r\n            data.data.map((item) => ({\r\n                label: item[optionLabel],\r\n                value: item[optionValue],\r\n            })),\r\n        );\r\n    };\r\n\r\n    const queryResult = useList<TData, TError>({\r\n        resource,\r\n        config: {\r\n            sort,\r\n            filters: filters.concat(search),\r\n            pagination: fetchSize\r\n                ? {\r\n                      pageSize: fetchSize,\r\n                  }\r\n                : undefined,\r\n        },\r\n        queryOptions: {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                defaultQueryOnSuccess(data);\r\n                queryOptions?.onSuccess?.(data);\r\n            },\r\n        },\r\n        successNotification,\r\n        errorNotification,\r\n        metaData,\r\n        liveMode,\r\n        liveParams,\r\n        onLiveEvent,\r\n        dataProviderName,\r\n    });\r\n\r\n    const onSearch = (value: string | undefined) => {\r\n        if (!value) {\r\n            setSearch([]);\r\n            return;\r\n        }\r\n\r\n        if (onSearchFromProp) {\r\n            setSearch(onSearchFromProp(value));\r\n        } else {\r\n            setSearch([\r\n                {\r\n                    field: optionLabel,\r\n                    operator: \"contains\",\r\n                    value,\r\n                },\r\n            ]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        queryResult,\r\n        defaultValueQueryResult,\r\n        options: useMemo(\r\n            () => uniqBy([...options, ...selectedOptions], \"value\"),\r\n            [options, selectedOptions],\r\n        ),\r\n        onSearch: debounce(onSearch, debounceValue),\r\n    };\r\n};\r\n","import { useMemo, useState, useEffect } from \"react\";\r\nimport { QueryObserverResult, UseQueryOptions } from \"react-query\";\r\nimport differenceWith from \"lodash/differenceWith\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nimport {\r\n    useRouterContext,\r\n    useSyncWithLocation,\r\n    useNavigation,\r\n    useResourceWithRoute,\r\n    useList,\r\n    useLiveMode,\r\n} from \"@hooks\";\r\nimport {\r\n    stringifyTableParams,\r\n    parseTableParams,\r\n    unionFilters,\r\n    setInitialFilters,\r\n    setInitialSorters,\r\n    unionSorters,\r\n} from \"@definitions/table\";\r\n\r\nimport {\r\n    ResourceRouterParams,\r\n    BaseRecord,\r\n    CrudFilters,\r\n    CrudSorting,\r\n    GetListResponse,\r\n    SuccessErrorNotification,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n} from \"../../interfaces\";\r\n\r\ntype SetFilterBehavior = \"merge\" | \"replace\";\r\n\r\nexport type useTableProps<TData, TError> = {\r\n    resource?: string;\r\n    initialCurrent?: number;\r\n    initialPageSize?: number;\r\n    hasPagination?: boolean;\r\n    initialSorter?: CrudSorting;\r\n    permanentSorter?: CrudSorting;\r\n    defaultSetFilterBehavior?: SetFilterBehavior;\r\n    initialFilter?: CrudFilters;\r\n    permanentFilter?: CrudFilters;\r\n    syncWithLocation?: boolean;\r\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\r\n\r\ntype SyncWithLocationParams = {\r\n    pagination: { current?: number; pageSize?: number };\r\n    sorter: CrudSorting;\r\n    filters: CrudFilters;\r\n};\r\n\r\nexport type useTablePaginationKeys =\r\n    | \"current\"\r\n    | \"setCurrent\"\r\n    | \"pageSize\"\r\n    | \"setPageSize\"\r\n    | \"pageCount\";\r\n\r\nexport type useTableReturnType<TData extends BaseRecord = BaseRecord> = {\r\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>>;\r\n    sorter: CrudSorting;\r\n    setSorter: (sorter: CrudSorting) => void;\r\n    filters: CrudFilters;\r\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\r\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\r\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\r\n    current: number;\r\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\r\n    pageSize: number;\r\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\r\n    pageCount: number;\r\n};\r\n\r\nexport type useTableNoPaginationReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n> = Omit<useTableReturnType<TData>, useTablePaginationKeys> &\r\n    Record<useTablePaginationKeys, undefined>;\r\n\r\n/**\r\n * By using useTable, you are able to get properties that are compatible with\r\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\r\n * All features such as sorting, filtering and pagination comes as out of box.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/table/useTable} for more details.\r\n */\r\n\r\nconst defaultPermanentFilter: CrudFilters = [];\r\nconst defaultPermanentSorter: CrudSorting = [];\r\n\r\n// overload with pagination\r\nexport function useTable<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>(\r\n    props?: useTableProps<TData, TError> & {\r\n        hasPagination?: true;\r\n    },\r\n): useTableReturnType<TData>;\r\n// overload without pagination\r\nexport function useTable<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>(\r\n    props?: useTableProps<TData, TError> & {\r\n        hasPagination: false;\r\n    },\r\n): useTableNoPaginationReturnType<TData>;\r\n// implementation\r\nexport function useTable<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    initialCurrent = 1,\r\n    initialPageSize = 10,\r\n    hasPagination = true,\r\n    initialSorter,\r\n    permanentSorter = defaultPermanentSorter,\r\n    defaultSetFilterBehavior = \"merge\",\r\n    initialFilter,\r\n    permanentFilter = defaultPermanentFilter,\r\n    syncWithLocation: syncWithLocationProp,\r\n    resource: resourceFromProp,\r\n    successNotification,\r\n    errorNotification,\r\n    queryOptions,\r\n    liveMode: liveModeFromProp,\r\n    onLiveEvent,\r\n    liveParams,\r\n    metaData,\r\n    dataProviderName,\r\n}: useTableProps<TData, TError> = {}):\r\n    | useTableReturnType<TData>\r\n    | useTableNoPaginationReturnType<TData> {\r\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\r\n\r\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\r\n\r\n    const { useLocation, useParams } = useRouterContext();\r\n    const { search, pathname } = useLocation();\r\n    const liveMode = useLiveMode(liveModeFromProp);\r\n\r\n    // We want to always parse the query string even when syncWithLocation is\r\n    // deactivated, for hotlinking to work properly\r\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\r\n        parseTableParams(search);\r\n\r\n    const defaultCurrent = parsedCurrent || initialCurrent;\r\n    const defaultPageSize = parsedPageSize || initialPageSize;\r\n    const defaultSorter = parsedSorter.length ? parsedSorter : initialSorter;\r\n    const defaultFilter = parsedFilters.length ? parsedFilters : initialFilter;\r\n\r\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\r\n\r\n    const { push } = useNavigation();\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\r\n\r\n    const [sorter, setSorter] = useState<CrudSorting>(\r\n        setInitialSorters(permanentSorter, defaultSorter ?? []),\r\n    );\r\n    const [filters, setFilters] = useState<CrudFilters>(\r\n        setInitialFilters(permanentFilter, defaultFilter ?? []),\r\n    );\r\n    const [current, setCurrent] = useState<number>(defaultCurrent);\r\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\r\n\r\n    const createLinkForSyncWithLocation = ({\r\n        pagination: { current, pageSize },\r\n        sorter,\r\n        filters,\r\n    }: SyncWithLocationParams) => {\r\n        const stringifyParams = stringifyTableParams({\r\n            pagination: {\r\n                pageSize,\r\n                current,\r\n            },\r\n            sorter,\r\n            filters,\r\n        });\r\n        return `${pathname}?${stringifyParams}`;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (search === \"\") {\r\n            setCurrent(defaultCurrent);\r\n            setPageSize(defaultPageSize);\r\n            setSorter(setInitialSorters(permanentSorter, defaultSorter ?? []));\r\n            setFilters(setInitialFilters(permanentFilter, defaultFilter ?? []));\r\n        }\r\n    }, [search]);\r\n\r\n    useEffect(() => {\r\n        if (syncWithLocation) {\r\n            const stringifyParams = stringifyTableParams({\r\n                ...(hasPagination\r\n                    ? {\r\n                          pagination: {\r\n                              pageSize,\r\n                              current,\r\n                          },\r\n                      }\r\n                    : {}),\r\n                sorter: differenceWith(sorter, permanentSorter, isEqual),\r\n                filters: differenceWith(filters, permanentFilter, isEqual),\r\n            });\r\n\r\n            // Careful! This triggers render\r\n            return push(`${pathname}?${stringifyParams}`);\r\n        }\r\n    }, [syncWithLocation, current, pageSize, sorter, filters]);\r\n\r\n    const queryResult = useList<TData, TError>({\r\n        resource: resource.name,\r\n        config: {\r\n            hasPagination,\r\n            pagination: { current, pageSize },\r\n            filters: unionFilters(permanentFilter, filters),\r\n            sort: unionSorters(permanentSorter, sorter),\r\n        },\r\n        queryOptions,\r\n        successNotification,\r\n        errorNotification,\r\n        metaData,\r\n        liveMode,\r\n        liveParams,\r\n        onLiveEvent,\r\n        dataProviderName,\r\n    });\r\n\r\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\r\n        setFilters((prevFilters) =>\r\n            unionFilters(permanentFilter, newFilters, prevFilters),\r\n        );\r\n    };\r\n\r\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\r\n        setFilters(unionFilters(permanentFilter, newFilters));\r\n    };\r\n\r\n    const setFiltersWithSetter = (\r\n        setter: (prevFilters: CrudFilters) => CrudFilters,\r\n    ) => {\r\n        setFilters((prev) => unionFilters(permanentFilter, setter(prev)));\r\n    };\r\n\r\n    const setFiltersFn: useTableReturnType<TData>[\"setFilters\"] = (\r\n        setterOrFilters,\r\n        behavior: SetFilterBehavior = defaultSetFilterBehavior,\r\n    ) => {\r\n        if (typeof setterOrFilters === \"function\") {\r\n            setFiltersWithSetter(setterOrFilters);\r\n        } else {\r\n            if (behavior === \"replace\") {\r\n                setFiltersAsReplace(setterOrFilters);\r\n            } else {\r\n                setFiltersAsMerge(setterOrFilters);\r\n            }\r\n        }\r\n    };\r\n\r\n    const setSortWithUnion = (newSorter: CrudSorting) => {\r\n        setSorter(() => unionSorters(permanentSorter, newSorter));\r\n    };\r\n\r\n    const paginationValues = useMemo(() => {\r\n        if (hasPagination) {\r\n            return {\r\n                current,\r\n                setCurrent,\r\n                pageSize,\r\n                setPageSize,\r\n                pageCount: pageSize\r\n                    ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\r\n                    : 1,\r\n            };\r\n        }\r\n\r\n        return {\r\n            current: undefined,\r\n            setCurrent: undefined,\r\n            pageSize: undefined,\r\n            setPageSize: undefined,\r\n            pageCount: undefined,\r\n        };\r\n    }, [hasPagination, current, pageSize, queryResult.data?.total]);\r\n\r\n    return {\r\n        tableQueryResult: queryResult,\r\n        sorter,\r\n        setSorter: setSortWithUnion,\r\n        filters,\r\n        setFilters: setFiltersFn,\r\n        ...paginationValues,\r\n        createLinkForSyncWithLocation,\r\n    };\r\n}\r\n","import { useContext } from \"react\";\r\nimport { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\n\r\nimport { AuditLogContext } from \"@contexts/auditLog\";\r\nimport { ResourceContext } from \"@contexts/resource\";\r\nimport { useGetIdentity } from \"@hooks/auth\";\r\nimport { BaseKey, LogParams } from \"../../../interfaces\";\r\nimport { hasPermission, queryKeys } from \"@definitions/helpers\";\r\n\r\ntype LogRenameData =\r\n    | {\r\n          resource?: string;\r\n      }\r\n    | undefined;\r\n\r\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\r\n    log: UseMutationResult<TLogData, Error, LogParams>;\r\n    rename: UseMutationResult<\r\n        TLogRenameData,\r\n        Error,\r\n        {\r\n            id: BaseKey;\r\n            name: string;\r\n        }\r\n    >;\r\n};\r\n\r\n/**\r\n * useLog is used to `create` a new and `rename` the existing audit log.\r\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLog} for more details.\r\n */\r\n\r\nexport const useLog = <\r\n    TLogData,\r\n    TLogRenameData extends LogRenameData = LogRenameData,\r\n>(): UseLogReturnType<TLogData, TLogRenameData> => {\r\n    const queryClient = useQueryClient();\r\n    const auditLogContext = useContext(AuditLogContext);\r\n\r\n    const { resources } = useContext(ResourceContext);\r\n    const {\r\n        data: identityData,\r\n        refetch,\r\n        isLoading,\r\n    } = useGetIdentity({\r\n        queryOptions: {\r\n            enabled: !!auditLogContext,\r\n        },\r\n    });\r\n\r\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\r\n        async (params) => {\r\n            const resource = resources.find((p) => p.name === params.resource);\r\n            const logPermissions = resource?.options?.auditLog?.permissions;\r\n\r\n            if (logPermissions) {\r\n                if (!hasPermission(logPermissions, params.action)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let authorData;\r\n            if (isLoading) {\r\n                authorData = await refetch();\r\n            }\r\n\r\n            return await auditLogContext.create?.({\r\n                ...params,\r\n                author: identityData ?? authorData?.data,\r\n            });\r\n        },\r\n    );\r\n\r\n    const rename = useMutation<\r\n        TLogRenameData,\r\n        Error,\r\n        { id: BaseKey; name: string },\r\n        unknown\r\n    >(\r\n        async (params) => {\r\n            return await auditLogContext.update?.(params);\r\n        },\r\n        {\r\n            onSuccess: (data) => {\r\n                if (data?.resource) {\r\n                    const queryKey = queryKeys(data?.resource);\r\n                    queryClient.invalidateQueries(queryKey.logList());\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return { log, rename };\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IAuditLogContext } from \"./IAuditLogContext\";\r\n\r\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\r\n\r\nexport const AuditLogContextProvider: React.FC<\r\n    IAuditLogContext & {\r\n        children: React.ReactNode;\r\n    }\r\n> = ({ create, get, update, children }) => {\r\n    return (\r\n        <AuditLogContext.Provider value={{ create, get, update }}>\r\n            {children}\r\n        </AuditLogContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport { AuditLogContext } from \"@contexts/auditLog\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\nimport { HttpError, MetaDataQuery } from \"../../../interfaces\";\r\n\r\nexport type UseLogProps<TData, TError> = {\r\n    resource: string;\r\n    action?: string;\r\n    meta?: Record<number | string, any>;\r\n    author?: Record<number | string, any>;\r\n    queryOptions?: UseQueryOptions<TData, TError>;\r\n    metaData?: MetaDataQuery;\r\n};\r\n\r\n/**\r\n * useLogList is used to get and filter audit logs.\r\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLogList} for more details.\r\n */\r\nexport const useLogList = <TData = any, TError extends HttpError = HttpError>({\r\n    resource,\r\n    action,\r\n    meta,\r\n    author,\r\n    metaData,\r\n    queryOptions,\r\n}: UseLogProps<TData, TError>): UseQueryResult<TData> => {\r\n    const { get } = useContext(AuditLogContext);\r\n\r\n    const queryKey = queryKeys(resource, undefined, metaData);\r\n\r\n    const queryResponse = useQuery<TData, TError>(\r\n        queryKey.logList(meta),\r\n        () =>\r\n            get?.({\r\n                resource,\r\n                action,\r\n                author,\r\n                meta,\r\n                metaData,\r\n            }) ?? Promise.resolve([]),\r\n        {\r\n            enabled: typeof get !== \"undefined\",\r\n            ...queryOptions,\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\n\r\nimport { queryKeys } from \"@definitions\";\r\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\r\n\r\nexport type UseInvalidateProp = {\r\n    resource?: string;\r\n    id?: BaseKey;\r\n    dataProviderName?: string;\r\n    invalidates: Array<keyof IQueryKeys> | false;\r\n};\r\n\r\nexport const useInvalidate = (): ((props: UseInvalidateProp) => void) => {\r\n    const queryClient = useQueryClient();\r\n\r\n    const invalidate = useCallback(\r\n        ({\r\n            resource,\r\n            dataProviderName,\r\n            invalidates,\r\n            id,\r\n        }: UseInvalidateProp) => {\r\n            if (invalidates === false) {\r\n                return;\r\n            }\r\n            const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n            invalidates.forEach((key) => {\r\n                switch (key) {\r\n                    case \"all\":\r\n                        queryClient.invalidateQueries(queryKey.all);\r\n                        break;\r\n                    case \"list\":\r\n                        queryClient.invalidateQueries(queryKey.list());\r\n                        break;\r\n                    case \"many\":\r\n                        queryClient.invalidateQueries(queryKey.many());\r\n                        break;\r\n                    case \"resourceAll\":\r\n                        queryClient.invalidateQueries(queryKey.resourceAll);\r\n                        break;\r\n                    case \"detail\":\r\n                        queryClient.invalidateQueries(\r\n                            queryKey.detail(id || \"\"),\r\n                        );\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        },\r\n        [],\r\n    );\r\n\r\n    return invalidate;\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport humanizeString from \"humanize-string\";\r\nimport warnOnce from \"warn-once\";\r\n\r\nimport { useResource, useRouterContext, useTranslate } from \"@hooks\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\nimport { ResourceRouterParams } from \"../../interfaces\";\r\n\r\nexport type BreadcrumbsType = {\r\n    label: string;\r\n    href?: string;\r\n    icon?: React.ReactNode;\r\n};\r\n\r\ntype UseBreadcrumbReturnType = {\r\n    breadcrumbs: BreadcrumbsType[];\r\n};\r\n\r\nexport const useBreadcrumb = (): UseBreadcrumbReturnType => {\r\n    const { useParams } = useRouterContext();\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    const translate = useTranslate();\r\n\r\n    const { resources, resource } = useResource();\r\n\r\n    const { action } = useParams<ResourceRouterParams>();\r\n\r\n    const breadcrumbs: BreadcrumbsType[] = [];\r\n\r\n    if (!resource?.name) {\r\n        return { breadcrumbs };\r\n    }\r\n\r\n    const addBreadcrumb = (parentName: string) => {\r\n        const parentResource = resources.find(\r\n            (resource) => resource.name === parentName,\r\n        );\r\n\r\n        if (parentResource) {\r\n            if (parentResource.parentName) {\r\n                addBreadcrumb(parentResource.parentName);\r\n            }\r\n            breadcrumbs.push({\r\n                label:\r\n                    parentResource.label ??\r\n                    translate(\r\n                        `${parentResource.name}.${parentResource.name}`,\r\n                        humanizeString(parentResource.name),\r\n                    ),\r\n\r\n                href: !!parentResource.list\r\n                    ? `/${parentResource.route}`\r\n                    : undefined,\r\n                icon: parentResource.icon,\r\n            });\r\n        }\r\n    };\r\n\r\n    if (resource.parentName) {\r\n        addBreadcrumb(resource.parentName);\r\n    }\r\n\r\n    breadcrumbs.push({\r\n        label:\r\n            resource.label ??\r\n            translate(\r\n                `${resource.name}.${resource.name}`,\r\n                humanizeString(resource.name),\r\n            ),\r\n        href: !!resource.list ? `/${resource.route}` : undefined,\r\n        icon: resource.icon,\r\n    });\r\n\r\n    if (action) {\r\n        const key = `actions.${action}`;\r\n        const actionLabel = translate(key);\r\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\r\n            warnOnce(\r\n                true,\r\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/core/hooks/useBreadcrumb/#i18n-support`,\r\n            );\r\n            breadcrumbs.push({\r\n                label: translate(`buttons.${action}`, humanizeString(action)),\r\n            });\r\n        } else {\r\n            breadcrumbs.push({\r\n                label: translate(key, humanizeString(action)),\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        breadcrumbs,\r\n    };\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    useRefineContext,\r\n    useTranslate,\r\n    useResource,\r\n    useRouterContext,\r\n} from \"..\";\r\nimport { IMenuItem, ITreeMenu } from \"../../interfaces\";\r\nimport { userFriendlyResourceName, createTreeView } from \"@definitions\";\r\n\r\ntype useMenuReturnType = {\r\n    defaultOpenKeys: string[];\r\n    selectedKey: string;\r\n    menuItems: ITreeMenu[];\r\n};\r\n\r\n/**\r\n * `useMenu` is used to get menu items of the default sidebar.\r\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\r\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\r\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/ui/useMenu} for more details.\r\n */\r\nexport const useMenu: () => useMenuReturnType = () => {\r\n    const { resources } = useResource();\r\n    const translate = useTranslate();\r\n\r\n    const { useLocation, useParams } = useRouterContext();\r\n    const location = useLocation();\r\n    const params = useParams<{ resource: string }>();\r\n\r\n    const { hasDashboard } = useRefineContext();\r\n\r\n    const selectedKey = React.useMemo(() => {\r\n        let selectedResource = resources.find(\r\n            (el) => location?.pathname === `/${el.route}`,\r\n        );\r\n\r\n        if (!selectedResource) {\r\n            selectedResource = resources.find(\r\n                (el) => params?.resource === (el.route as string),\r\n            );\r\n        }\r\n\r\n        let _selectedKey: string;\r\n        if (selectedResource?.route) {\r\n            _selectedKey = `/${selectedResource?.route}`;\r\n        } else if (location.pathname === \"/\") {\r\n            _selectedKey = \"/\";\r\n        } else {\r\n            _selectedKey = location?.pathname;\r\n        }\r\n        return _selectedKey;\r\n    }, [resources, location, params]);\r\n\r\n    const treeMenuItems: IMenuItem[] = React.useMemo(\r\n        () =>\r\n            resources.map((resource) => {\r\n                const route = `/${resource.route}`;\r\n\r\n                return {\r\n                    ...resource,\r\n                    icon: resource.icon,\r\n                    route: route,\r\n                    key: resource.key ?? route,\r\n                    label:\r\n                        resource.label ??\r\n                        translate(\r\n                            `${resource.name}.${resource.name}`,\r\n                            userFriendlyResourceName(resource.name, \"plural\"),\r\n                        ),\r\n                };\r\n            }),\r\n        [resources, hasDashboard],\r\n    );\r\n    const menuItems: ITreeMenu[] = React.useMemo(\r\n        () => createTreeView(treeMenuItems),\r\n        [treeMenuItems],\r\n    );\r\n\r\n    const crawlNestedKeys = React.useCallback(\r\n        (\r\n            currentKey: string,\r\n            currentResources: typeof resources,\r\n            isParent = false,\r\n        ): string[] => {\r\n            const currentElement = currentResources.find((el) =>\r\n                isParent ? el.name === currentKey : el.route === currentKey,\r\n            );\r\n\r\n            if (currentElement) {\r\n                const keysArray: string[] = [];\r\n\r\n                if (isParent && currentElement.route) {\r\n                    keysArray.unshift(...[currentElement.route]);\r\n                }\r\n\r\n                if (currentElement.parentName) {\r\n                    keysArray.unshift(\r\n                        ...crawlNestedKeys(\r\n                            currentElement.parentName,\r\n                            currentResources,\r\n                            true,\r\n                        ),\r\n                    );\r\n                }\r\n                return keysArray;\r\n            }\r\n\r\n            return [];\r\n        },\r\n        [],\r\n    );\r\n\r\n    const defaultOpenKeys = React.useMemo(\r\n        () => crawlNestedKeys(selectedKey, treeMenuItems),\r\n        [selectedKey, treeMenuItems],\r\n    );\r\n\r\n    const values = React.useMemo(() => {\r\n        const filterMenuItemsByListView = (menus: ITreeMenu[]): ITreeMenu[] => {\r\n            return menus.reduce((menuItem: ITreeMenu[], obj) => {\r\n                if (obj.children.length > 0)\r\n                    return [\r\n                        ...menuItem,\r\n                        {\r\n                            ...obj,\r\n                            children: filterMenuItemsByListView(obj.children),\r\n                        },\r\n                    ];\r\n                else if (typeof obj.list !== \"undefined\")\r\n                    return [...menuItem, obj];\r\n\r\n                return menuItem;\r\n            }, []);\r\n        };\r\n\r\n        return {\r\n            defaultOpenKeys,\r\n            selectedKey,\r\n            menuItems: filterMenuItemsByListView(menuItems),\r\n        };\r\n    }, [defaultOpenKeys, selectedKey, menuItems]);\r\n\r\n    return values;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useLogin, useTranslate } from \"@hooks\";\r\nexport interface ILoginForm {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\n/**\r\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\r\n */\r\nexport const LoginPage: React.FC = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const translate = useTranslate();\r\n\r\n    const { mutate: login } = useLogin<ILoginForm>();\r\n\r\n    return (\r\n        <>\r\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\r\n            <form\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    login({ username, password });\r\n                }}\r\n            >\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                {translate(\r\n                                    \"pages.login.username\",\r\n                                    undefined,\r\n                                    \"username\",\r\n                                )}\r\n                                :\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    size={20}\r\n                                    autoCorrect=\"off\"\r\n                                    spellCheck={false}\r\n                                    autoCapitalize=\"off\"\r\n                                    autoFocus\r\n                                    required\r\n                                    value={username}\r\n                                    onChange={(e) =>\r\n                                        setUsername(e.target.value)\r\n                                    }\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                {translate(\r\n                                    \"pages.login.password\",\r\n                                    undefined,\r\n                                    \"password\",\r\n                                )}\r\n                                :\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    required\r\n                                    size={20}\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <br />\r\n                <input type=\"submit\" value=\"login\" />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\n/**\r\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#readypage} for more details.\r\n */\r\nexport const ReadyPage: React.FC = () => {\r\n    return (\r\n        <>\r\n            <h1>Welcome on board</h1>\r\n            <p>Your configuration is completed.</p>\r\n            <p>\r\n                Now you can get started by adding your resources to the{\" \"}\r\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\r\n            </p>\r\n            <div style={{ display: \"flex\", gap: 8 }}>\r\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <button>Documentation</button>\r\n                </a>\r\n                <a\r\n                    href=\"https://refine.dev/docs/examples/tutorial\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    <button>Examples</button>\r\n                </a>\r\n                <a\r\n                    href=\"https://discord.gg/refine\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    <button>Community</button>\r\n                </a>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  QueryClientProvider,\r\n  QueryClient,\r\n  QueryCache,\r\n  MutationCache,\r\n  DefaultOptions,\r\n  ReactQueryDevtools,\r\n} from 'react-query';\r\n\r\nimport { AuthContextProvider } from '@contexts/auth';\r\nimport { DataContextProvider } from '@contexts/data';\r\nimport { LiveContextProvider } from '@contexts/live';\r\nimport { TranslationContextProvider } from '@contexts/translation';\r\nimport { ResourceContextProvider, IResourceItem } from '@contexts/resource';\r\nimport { RefineContextProvider } from '@contexts/refine';\r\nimport { UndoableQueueContextProvider } from '@contexts/undoableQueue';\r\nimport { UnsavedWarnContextProvider } from '@contexts/unsavedWarn';\r\nimport { RouterContextProvider } from '@contexts/router';\r\nimport { AccessControlContextProvider } from '@contexts/accessControl';\r\nimport { NotificationContextProvider } from '@contexts/notification';\r\nimport { AuditLogContextProvider } from '@contexts/auditLog';\r\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from '@components';\r\nimport { routeGenerator } from '@definitions';\r\nimport { Telemetry } from '@components/telemetry';\r\n\r\nimport {\r\n  MutationMode,\r\n  IDataContextProvider,\r\n  I18nProvider,\r\n  LayoutProps,\r\n  TitleProps,\r\n  IRouterProvider,\r\n  ResourceProps,\r\n  ILiveContext,\r\n  LiveModeProps,\r\n  IDataMultipleContextProvider,\r\n  AuthProvider,\r\n  NotificationProvider,\r\n  AccessControlProvider,\r\n  AuditLogProvider,\r\n} from '../../../interfaces';\r\n\r\ninterface QueryClientConfig {\r\n  queryCache?: QueryCache;\r\n  mutationCache?: MutationCache;\r\n  defaultOptions?: DefaultOptions;\r\n}\r\nexport interface RefineProps {\r\n  authProvider?: AuthProvider;\r\n  dataProvider: IDataContextProvider | IDataMultipleContextProvider;\r\n  liveProvider?: ILiveContext;\r\n  routerProvider: IRouterProvider;\r\n  notificationProvider?: NotificationProvider | (() => NotificationProvider);\r\n  accessControlProvider?: AccessControlProvider;\r\n  auditLogProvider?: AuditLogProvider;\r\n  resources?: ResourceProps[];\r\n  i18nProvider?: I18nProvider;\r\n  catchAll?: React.ReactNode;\r\n  LoginPage?: React.FC;\r\n  DashboardPage?: React.FC;\r\n  ReadyPage?: React.FC;\r\n  mutationMode?: MutationMode;\r\n  syncWithLocation?: boolean;\r\n  warnWhenUnsavedChanges?: boolean;\r\n  undoableTimeout?: number;\r\n  Layout?: React.FC<LayoutProps>;\r\n  Sider?: React.FC;\r\n  Header?: React.FC;\r\n  Footer?: React.FC;\r\n  OffLayoutArea?: React.FC;\r\n  Title?: React.FC<TitleProps>;\r\n  reactQueryClientConfig?: QueryClientConfig;\r\n  reactQueryDevtoolConfig?: any;\r\n  liveMode?: LiveModeProps['liveMode'];\r\n  onLiveEvent?: LiveModeProps['onLiveEvent'];\r\n  children?: React.ReactNode;\r\n  disableTelemetry?: boolean;\r\n}\r\n\r\n/**\r\n * {@link https://refine.dev/docs/api-references/components/refine-config `<Refine> component`} is the entry point of a refine app.\r\n * It is where the highest level of configuration of the app occurs.\r\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config} for more details.\r\n */\r\nexport const Refine: React.FC<RefineProps> = ({\r\n  authProvider,\r\n  dataProvider,\r\n  routerProvider,\r\n  notificationProvider,\r\n  accessControlProvider,\r\n  auditLogProvider,\r\n  resources: resourcesFromProps,\r\n  DashboardPage,\r\n  ReadyPage,\r\n  LoginPage,\r\n  catchAll,\r\n  children,\r\n  liveProvider,\r\n  i18nProvider,\r\n  mutationMode = 'pessimistic',\r\n  syncWithLocation = false,\r\n  warnWhenUnsavedChanges = false,\r\n  undoableTimeout = 5000,\r\n  Title,\r\n  Layout,\r\n  Sider,\r\n  Header,\r\n  Footer,\r\n  OffLayoutArea,\r\n  reactQueryClientConfig,\r\n  reactQueryDevtoolConfig,\r\n  liveMode,\r\n  onLiveEvent,\r\n  disableTelemetry = false,\r\n}) => {\r\n  const queryClient = new QueryClient({\r\n    ...reactQueryClientConfig,\r\n    defaultOptions: {\r\n      ...reactQueryClientConfig?.defaultOptions,\r\n      queries: {\r\n        refetchOnWindowFocus: false,\r\n        keepPreviousData: true,\r\n        ...reactQueryClientConfig?.defaultOptions?.queries,\r\n      },\r\n    },\r\n  });\r\n\r\n  const notificationProviderContextValues =\r\n    typeof notificationProvider === 'function'\r\n      ? notificationProvider()\r\n      : notificationProvider ?? {};\r\n\r\n  const resources: IResourceItem[] = [];\r\n\r\n  resourcesFromProps?.map((resource) => {\r\n    resources.push({\r\n      key: resource.key,\r\n      name: resource.name,\r\n      label: resource.options?.label,\r\n      icon: resource.icon,\r\n      route:\r\n        resource.options?.route ?? routeGenerator(resource, resourcesFromProps),\r\n      canCreate: !!resource.create,\r\n      canEdit: !!resource.edit,\r\n      canShow: !!resource.show,\r\n      canDelete: resource.canDelete,\r\n      create: resource.create,\r\n      show: resource.show,\r\n      list: resource.list,\r\n      edit: resource.edit,\r\n      options: resource.options,\r\n      parentName: resource.parentName,\r\n    });\r\n  });\r\n\r\n  if (resources.length === 0) {\r\n    return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\r\n  }\r\n\r\n  const { RouterComponent = React.Fragment } = routerProvider;\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <NotificationContextProvider {...notificationProviderContextValues}>\r\n        <AuthContextProvider\r\n          {...(authProvider ?? {})}\r\n          isProvided={Boolean(authProvider)}>\r\n          <DataContextProvider {...dataProvider}>\r\n            <LiveContextProvider liveProvider={liveProvider}>\r\n              <RouterContextProvider {...routerProvider}>\r\n                <ResourceContextProvider resources={resources}>\r\n                  <TranslationContextProvider i18nProvider={i18nProvider}>\r\n                    <AccessControlContextProvider\r\n                      {...(accessControlProvider ?? {})}>\r\n                      <AuditLogContextProvider {...(auditLogProvider ?? {})}>\r\n                        <UndoableQueueContextProvider>\r\n                          <RefineContextProvider\r\n                            mutationMode={mutationMode}\r\n                            warnWhenUnsavedChanges={warnWhenUnsavedChanges}\r\n                            syncWithLocation={syncWithLocation}\r\n                            Title={Title}\r\n                            undoableTimeout={undoableTimeout}\r\n                            catchAll={catchAll}\r\n                            DashboardPage={DashboardPage}\r\n                            LoginPage={LoginPage}\r\n                            Layout={Layout}\r\n                            Sider={Sider}\r\n                            Footer={Footer}\r\n                            Header={Header}\r\n                            OffLayoutArea={OffLayoutArea}\r\n                            hasDashboard={!!DashboardPage}\r\n                            liveMode={liveMode}\r\n                            onLiveEvent={onLiveEvent}>\r\n                            <UnsavedWarnContextProvider>\r\n                              <RouterComponent>\r\n                                {children}\r\n                                {!disableTelemetry && <Telemetry />}\r\n                                <RouteChangeHandler />\r\n                              </RouterComponent>\r\n                            </UnsavedWarnContextProvider>\r\n                          </RefineContextProvider>\r\n                        </UndoableQueueContextProvider>\r\n                      </AuditLogContextProvider>\r\n                    </AccessControlContextProvider>\r\n                  </TranslationContextProvider>\r\n                </ResourceContextProvider>\r\n              </RouterContextProvider>\r\n            </LiveContextProvider>\r\n          </DataContextProvider>\r\n        </AuthContextProvider>\r\n      </NotificationContextProvider>\r\n      <ReactQueryDevtools\r\n        initialIsOpen={false}\r\n        position='bottom-right'\r\n        {...reactQueryDevtoolConfig}\r\n      />\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { CompactEncrypt, importJWK } from \"jose\";\r\n\r\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\r\n\r\nconst PUBLIC_KEY = {\r\n    kty: \"RSA\",\r\n    e: \"AQAB\",\r\n    use: \"enc\",\r\n    alg: \"RSA-OAEP-256\",\r\n    n: \"glC_mSwk1VqaofnOPXK3HEC5njb4uHZM5_shFdQLRn_898dxVUMK7HkyOgoVOtEsNxDBjwK_KPbSEYX_lyfrJ6ONjnxPJ2_d0W_1ZwdwT_gr5ofFLz5Bm7WbVHcKDK1j5iMYsqUJbFVQ-KXzAswae2iiqzCBKLD4y-fLsIvOUGZliERMMi54hRPqVj6p0xhJEvH22jZ5rk48KJBNvjBBuLes1qk5cehirDHnh07A8Alr3Pe6Qk7xpyC_mUvMqX99JvYThyvjQMMPEXHLJY9m1g-sgHJPlMkxMoLUd5JI1v6QMLezhq2F-bNXiRgXJgT0ew3g-H_PKpWmMQmSRtgiEw\",\r\n};\r\n\r\nexport const Telemetry: React.FC<{}> = () => {\r\n    const payload = useTelemetryData();\r\n\r\n    useEffect(() => {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            const jwk = await importJWK(PUBLIC_KEY);\r\n\r\n            const encryptedPayload = await new CompactEncrypt(\r\n                new TextEncoder().encode(JSON.stringify(payload)),\r\n            )\r\n                .setProtectedHeader({ alg: \"RSA-OAEP-256\", enc: \"A256GCM\" })\r\n                .encrypt(jwk);\r\n\r\n            fetch(\"https://telemetry.refine.dev/send\", {\r\n                headers: {\r\n                    Accept: \"application/text\",\r\n                    \"Content-Type\": \"application/text\",\r\n                },\r\n                method: \"POST\",\r\n                body: encryptedPayload,\r\n            });\r\n        })();\r\n    }, []);\r\n\r\n    return null;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { AuditLogContext } from \"@contexts/auditLog\";\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport { RouterContext } from \"@contexts/router\";\r\nimport { DataContext } from \"@contexts/data\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\nimport { NotificationContext } from \"@contexts/notification\";\r\nimport { AccessControlContext } from \"@contexts/accessControl\";\r\nimport { useResource } from \"@hooks/resource\";\r\n\r\nimport { ITelemetryData } from \"../../interfaces/telementry\";\r\n\r\n// It reads and updates from package.json during build. ref: tsup.config.ts\r\nconst REFINE_VERSION = \"3.54.0\";\r\n\r\nexport const useTelemetryData = (): ITelemetryData => {\r\n    const authContext = useContext(AuthContext);\r\n    const auditLogContext = useContext(AuditLogContext);\r\n    const liveContext = useContext(LiveContext);\r\n    const routerContext = useContext(RouterContext);\r\n    const dataContext = useContext(DataContext);\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n    const notificationContext = useContext(NotificationContext);\r\n    const accessControlContext = useContext(AccessControlContext);\r\n    const { resources } = useResource();\r\n\r\n    const auth = authContext.isProvided;\r\n\r\n    const auditLog =\r\n        !!auditLogContext.create ||\r\n        !!auditLogContext.get ||\r\n        !!auditLogContext.update;\r\n\r\n    const live =\r\n        !!liveContext?.publish ||\r\n        !!liveContext?.subscribe ||\r\n        !!liveContext?.unsubscribe;\r\n\r\n    const router =\r\n        !!routerContext.useHistory ||\r\n        !!routerContext.Link ||\r\n        !!routerContext.Prompt ||\r\n        !!routerContext.useLocation ||\r\n        !!routerContext.useParams;\r\n\r\n    const data = !!dataContext;\r\n\r\n    const i18n =\r\n        !!i18nProvider?.changeLocale ||\r\n        !!i18nProvider?.getLocale ||\r\n        !!i18nProvider?.translate;\r\n\r\n    const notification =\r\n        !!notificationContext.close || !!notificationContext.open;\r\n\r\n    const accessControl = !!accessControlContext.can;\r\n\r\n    return {\r\n        providers: {\r\n            auth,\r\n            auditLog,\r\n            live,\r\n            router,\r\n            data,\r\n            i18n,\r\n            notification,\r\n            accessControl,\r\n        },\r\n        version: REFINE_VERSION,\r\n        resourceCount: resources.length,\r\n    };\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\r\nimport { IUndoableQueue } from \"../../interfaces\";\r\n\r\nimport { userFriendlySecond } from \"@definitions/helpers\";\r\n\r\nexport const UndoableQueue: React.FC<{\r\n    notifications: IUndoableQueue[];\r\n}> = ({ notifications }) => {\r\n    const translate = useTranslate();\r\n\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const { open } = useNotification();\r\n\r\n    const cancelNotification = () => {\r\n        notifications.forEach((notificationItem: IUndoableQueue) => {\r\n            if (notificationItem.isRunning === true) {\r\n                if (notificationItem.seconds === 0) {\r\n                    notificationItem.doMutation();\r\n                }\r\n                if (!notificationItem.isSilent) {\r\n                    open?.({\r\n                        key: `${notificationItem.id}-${notificationItem.resource}-notification`,\r\n                        type: \"progress\",\r\n                        message: translate(\r\n                            \"notifications.undoable\",\r\n                            {\r\n                                seconds: userFriendlySecond(\r\n                                    notificationItem.seconds,\r\n                                ),\r\n                            },\r\n                            `You have ${userFriendlySecond(\r\n                                notificationItem.seconds,\r\n                            )} seconds to undo`,\r\n                        ),\r\n                        cancelMutation: notificationItem.cancelMutation,\r\n                        undoableTimeout: userFriendlySecond(\r\n                            notificationItem.seconds,\r\n                        ),\r\n                    });\r\n                }\r\n\r\n                if (notificationItem.seconds > 0) {\r\n                    setTimeout(() => {\r\n                        notificationDispatch({\r\n                            type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\r\n                            payload: {\r\n                                id: notificationItem.id,\r\n                                seconds: notificationItem.seconds,\r\n                                resource: notificationItem.resource,\r\n                            },\r\n                        });\r\n                    }, 1000);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        cancelNotification();\r\n    }, [notifications]);\r\n\r\n    return null;\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport {\r\n    useRefineContext,\r\n    useRouterContext,\r\n    useTranslate,\r\n    useWarnAboutChange,\r\n} from \"@hooks\";\r\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\r\n\r\nexport interface LayoutWrapperProps {\r\n    Layout?: React.FC<LayoutProps>;\r\n    Sider?: React.FC;\r\n    Header?: React.FC;\r\n    Title?: React.FC<TitleProps>;\r\n    Footer?: React.FC;\r\n    OffLayoutArea?: React.FC;\r\n    children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\r\n * It is the default layout used in resource pages.\r\n * It can be used in custom pages to use global layout.\r\n *\r\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\r\n */\r\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\r\n    children,\r\n    Layout: LayoutFromProps,\r\n    Sider: SiderFromProps,\r\n    Header: HeaderFromProps,\r\n    Title: TitleFromProps,\r\n    Footer: FooterFromProps,\r\n    OffLayoutArea: OffLayoutAreaFromProps,\r\n}) => {\r\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\r\n        useRefineContext();\r\n\r\n    const LayoutToRender = LayoutFromProps ?? Layout;\r\n\r\n    return (\r\n        <LayoutToRender\r\n            Sider={SiderFromProps ?? Sider}\r\n            Header={HeaderFromProps ?? Header}\r\n            Footer={FooterFromProps ?? Footer}\r\n            Title={TitleFromProps ?? Title}\r\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\r\n        >\r\n            {children}\r\n            <UnsavedPrompt />\r\n        </LayoutToRender>\r\n    );\r\n};\r\n\r\nconst UnsavedPrompt: React.FC = () => {\r\n    const { Prompt } = useRouterContext();\r\n\r\n    const translate = useTranslate();\r\n\r\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\r\n\r\n    const warnWhenListener = (e: {\r\n        preventDefault: () => void;\r\n        returnValue: string;\r\n    }) => {\r\n        e.preventDefault();\r\n\r\n        e.returnValue = translate(\r\n            \"warnWhenUnsavedChanges\",\r\n            \"Are you sure you want to leave? You have unsaved changes.\",\r\n        );\r\n\r\n        return e.returnValue;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (warnWhen) {\r\n            window.addEventListener(\"beforeunload\", warnWhenListener);\r\n        }\r\n\r\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\r\n    }, [warnWhen]);\r\n\r\n    return (\r\n        <Prompt\r\n            when={warnWhen}\r\n            message={translate(\r\n                \"warnWhenUnsavedChanges\",\r\n                \"Are you sure you want to leave? You have unsaved changes.\",\r\n            )}\r\n            setWarnWhen={setWarnWhen}\r\n        />\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useAuthenticated, useNavigation, useRouterContext } from \"@hooks\";\r\n\r\nexport type AuthenticatedProps = {\r\n    fallback?: React.ReactNode;\r\n    loading?: React.ReactNode;\r\n    children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\r\n *\r\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\r\n */\r\nexport const Authenticated: React.FC<AuthenticatedProps> = ({\r\n    children,\r\n    fallback,\r\n    loading,\r\n}) => {\r\n    const { isSuccess, isLoading, isError } = useAuthenticated();\r\n\r\n    const { replace } = useNavigation();\r\n    const { useLocation } = useRouterContext();\r\n    const { pathname, search } = useLocation();\r\n\r\n    if (isLoading) {\r\n        return <>{loading}</> || null;\r\n    }\r\n    if (isError) {\r\n        if (!fallback) {\r\n            const toURL = `${pathname}${search}`;\r\n            if (!pathname.includes(\"/login\")) {\r\n                replace(`/login?to=${encodeURIComponent(toURL)}`);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        return <>{fallback}</>;\r\n    }\r\n\r\n    if (isSuccess) {\r\n        return <>{children}</>;\r\n    }\r\n\r\n    return null;\r\n};\r\n","import { useContext, useEffect } from \"react\";\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { useRouterContext } from \"@hooks\";\r\n\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\nexport const RouteChangeHandler: React.FC = () => {\r\n    const { useLocation } = useRouterContext();\r\n\r\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        checkAuth?.().catch(() => false);\r\n    }, [location?.pathname]);\r\n\r\n    return null;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useCan } from \"@hooks\";\r\nimport { CanParams } from \"../../interfaces\";\r\n\r\nexport type CanAccessProps = CanParams & {\r\n    fallback?: React.ReactNode;\r\n    children: React.ReactNode;\r\n};\r\n\r\nexport const CanAccess: React.FC<CanAccessProps> = ({\r\n    resource,\r\n    action,\r\n    params,\r\n    fallback,\r\n    children,\r\n    ...rest\r\n}) => {\r\n    const { data } = useCan({\r\n        resource,\r\n        action,\r\n        params,\r\n    });\r\n\r\n    if (data?.can) {\r\n        if (React.isValidElement(children)) {\r\n            const Children = React.cloneElement(children, rest);\r\n            return Children;\r\n        }\r\n\r\n        return <>{children}</>;\r\n    }\r\n\r\n    if (data?.can === false) {\r\n        return <>{fallback ?? null}</>;\r\n    }\r\n\r\n    return null;\r\n};\r\n"],"mappings":"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","names":["import_react","import_react","React","import_react_query","import_react","import_react_query","React","import_react","import_react_query","React","import_react","import_react_query","React","qs","import_react","import_react_query","import_react","import_react_query","React","import_react","import_react_query","fromPairs","zip","humanizeString","pluralize","import_react_query","import_qs","qs","unionWith","differenceWith","filter","import_react_query","import_react_query","import_react","React","import_pluralize","pluralize","_a","import_react_query","import_pluralize","pluralize","import_react_query","import_pluralize","pluralize","import_react_query","import_pluralize","pluralize","import_react_query","import_pluralize","pluralize","import_react_query","import_pluralize","pluralize","import_react_query","import_react_query","import_react","import_react","React","import_react","import_react_query","import_react","React","import_react","import_react","React","React","LoginPage","import_react","import_react","import_react","import_react","import_react","React","import_react","import_react","import_react","import_react","React","import_react","import_react","import_react","React","import_react","import_react","import_react","import_react","import_react","React","import_react","import_react","import_react","LoginPage","import_react","import_react","React","id","_a","redirect","import_react","import_react","import_react","data","chunk","response","import_react","import_react","import_react","React","import_react","import_react_query","import_react","React","import_react","import_react","uniqBy","debounce","import_react","import_differenceWith","current","pageSize","sorter","filters","differenceWith","isEqual","_a","import_react","import_react_query","import_react","React","import_react","import_react_query","import_react","import_react_query","import_react","import_humanize_string","_a","resource","humanizeString","warnOnce","import_react","React","React","import_react","React","import_react","React","import_react","import_react_query","import_react","import_react","ReadyPage","LoginPage","_a","React","import_react","import_react","React","import_react","React","import_react","import_react","React"]}