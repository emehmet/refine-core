{"version":3,"sources":["../../src/components/pages/error/index.tsx","../../src/hooks/auth/usePermissions/index.ts","../../src/contexts/auth/index.tsx","../../src/hooks/auth/useGetIdentity/index.ts","../../src/hooks/auth/useLogout/index.ts","../../src/hooks/auth/useLogin/index.ts","../../src/hooks/auth/useAuthenticated/index.ts","../../src/hooks/auth/useCheckError/index.ts","../../src/hooks/auth/useIsExistAuthentication.ts","../../src/hooks/data/useList.ts","../../src/definitions/helpers/userFriendlySeconds/index.ts","../../src/definitions/helpers/importCSVMapper/index.ts","../../src/definitions/helpers/userFriendlyResourceName/index.ts","../../src/definitions/helpers/handleUseParams/index.tsx","../../src/definitions/helpers/queryKeys/index.ts","../../src/definitions/helpers/hasPermission/index.ts","../../src/definitions/helpers/routeGenerator/index.ts","../../src/definitions/helpers/treeView/createTreeView/index.ts","../../src/hooks/data/useOne.ts","../../src/definitions/table/index.ts","../../src/definitions/upload/file2Base64/index.ts","../../src/hooks/data/useMany.ts","../../src/hooks/data/useUpdate.ts","../../src/contexts/undoableQueue/undoableQueueContext.tsx","../../src/hooks/data/useCreate.ts","../../src/hooks/data/useDelete.ts","../../src/hooks/data/useCreateMany.ts","../../src/hooks/data/useUpdateMany.ts","../../src/hooks/data/useDeleteMany.ts","../../src/hooks/data/useApiUrl.ts","../../src/hooks/data/useCustom.ts","../../src/hooks/data/useCustomMutation.ts","../../src/hooks/data/useDataProvider.tsx","../../src/contexts/data/index.tsx","../../src/hooks/live/useResourceSubscription/index.ts","../../src/contexts/live/index.tsx","../../src/contexts/refine/index.tsx","../../src/components/layoutWrapper/defaultLayout/index.tsx","../../src/hooks/live/useLiveMode/index.ts","../../src/hooks/live/useSubscription/index.ts","../../src/hooks/live/usePublish/index.ts","../../src/hooks/resource/useResource/index.ts","../../src/contexts/resource/index.tsx","../../src/hooks/resource/useResourceWithRoute/index.ts","../../src/hooks/notification/useCancelNotification/index.tsx","../../src/hooks/notification/useNotification/index.ts","../../src/contexts/notification/index.tsx","../../src/hooks/notification/useHandleNotification/index.ts","../../src/hooks/translate/useSetLocale.ts","../../src/contexts/translation/index.tsx","../../src/hooks/translate/useTranslate.ts","../../src/hooks/translate/useGetLocale.ts","../../src/hooks/refine/useMutationMode.ts","../../src/hooks/refine/useWarnAboutChange/index.ts","../../src/contexts/unsavedWarn/index.tsx","../../src/hooks/refine/useSyncWithLocation.ts","../../src/hooks/refine/useTitle.tsx","../../src/hooks/refine/useRefineContex.ts","../../src/hooks/export/index.ts","../../src/hooks/form/useForm.ts","../../src/hooks/redirection/index.ts","../../src/hooks/navigation/index.ts","../../src/hooks/show/useShow.ts","../../src/hooks/import/index.tsx","../../src/hooks/modal/useModal/index.tsx","../../src/hooks/router/useRouterContext.ts","../../src/contexts/router/index.tsx","../../src/hooks/accessControl/useCan/index.ts","../../src/contexts/accessControl/index.tsx","../../src/hooks/accessControl/useCanWithoutCache.ts","../../src/hooks/useSelect/index.ts","../../src/hooks/useTable/index.ts","../../src/hooks/auditLog/useLog/index.ts","../../src/contexts/auditLog/index.tsx","../../src/hooks/auditLog/useLogList/index.ts","../../src/hooks/invalidate/index.tsx","../../src/hooks/breadcrumb/index.ts","../../src/hooks/menu/useMenu.tsx","../../src/components/pages/login/index.tsx","../../src/components/pages/ready/index.tsx","../../src/components/containers/refine/index.tsx","../../src/components/telemetry/index.tsx","../../src/hooks/useTelemetryData/index.ts","../../src/components/undoableQueue/index.tsx","../../src/components/layoutWrapper/index.tsx","../../src/components/authenticated/index.tsx","../../src/components/routeChangeHandler/index.tsx","../../src/components/canAccess/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n    useNavigation,\r\n    useTranslate,\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n} from \"@hooks\";\r\nimport { ResourceErrorRouterParams } from \"../../../interfaces\";\r\n\r\n/**\r\n * When the app is navigated to a non-existent route, refine shows a default error page.\r\n * A custom error component can be used for this error page.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#catchall} for more details.\r\n */\r\nexport const ErrorComponent: React.FC = () => {\r\n    const [errorMessage, setErrorMessage] = useState<string>();\r\n    const { push } = useNavigation();\r\n    const translate = useTranslate();\r\n    const actionTypes = [\"edit\", \"create\", \"show\"];\r\n\r\n    const { useParams } = useRouterContext();\r\n\r\n    const params = useParams<ResourceErrorRouterParams>();\r\n    const resource = useResourceWithRoute();\r\n\r\n    useEffect(() => {\r\n        if (params.resource) {\r\n            const resourceFromRoute = resource(params.resource);\r\n            if (\r\n                params.action &&\r\n                actionTypes.includes(params.action) &&\r\n                !resourceFromRoute[params.action]\r\n            ) {\r\n                setErrorMessage(\r\n                    translate(\r\n                        \"pages.error.info\",\r\n                        {\r\n                            action: params.action,\r\n                            resource: params.resource,\r\n                        },\r\n                        `You may have forgotten to add the \"${params.action}\" component to \"${params.resource}\" resource.`,\r\n                    ),\r\n                );\r\n            }\r\n        }\r\n    }, [params]);\r\n\r\n    return (\r\n        <>\r\n            <h1>\r\n                {translate(\r\n                    \"pages.error.404\",\r\n                    undefined,\r\n                    \"Sorry, the page you visited does not exist.\",\r\n                )}\r\n            </h1>\r\n            {errorMessage && <p>{errorMessage}</p>}\r\n            <button onClick={() => push(\"/\")}>\r\n                {translate(\"pages.error.backHome\", undefined, \"Back Home\")}\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\n/**\r\n * `usePermissions` calls the `getPermissions` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/usePermissions} for more details.\r\n *\r\n * @typeParam TData - Result data of the query\r\n *\r\n */\r\nexport const usePermissions = <TData = any>(\r\n    options?: UseQueryOptions<TData>,\r\n): UseQueryResult<TData, unknown> => {\r\n    const { getPermissions } = useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery<TData>(\r\n        [\"usePermissions\"],\r\n        // Enabled check for `getPermissions` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\r\n        getPermissions ?? (() => Promise.resolve(undefined)),\r\n        {\r\n            enabled: !!getPermissions,\r\n            ...options,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\n\r\nimport { useNavigation } from \"@hooks\";\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\nexport const AuthContext = React.createContext<IAuthContext>({});\r\n\r\nexport const AuthContextProvider: React.FC<\r\n    IAuthContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ children, isProvided, ...authOperations }) => {\r\n    const { replace } = useNavigation();\r\n    const queryClient = useQueryClient();\r\n\r\n    const invalidateAuthStore = () => {\r\n        queryClient.invalidateQueries([\"useAuthenticated\"]);\r\n        queryClient.invalidateQueries([\"getUserIdentity\"]);\r\n        queryClient.invalidateQueries([\"usePermissions\"]);\r\n    };\r\n\r\n    const loginFunc = async (params: any) => {\r\n        try {\r\n            const result = await authOperations.login?.(params);\r\n            return Promise.resolve(result);\r\n        } catch (error) {\r\n            return Promise.reject(error);\r\n        } finally {\r\n            invalidateAuthStore();\r\n        }\r\n    };\r\n\r\n    const logoutFunc = async (params: any) => {\r\n        try {\r\n            const redirectPath = await authOperations.logout?.(params);\r\n            return Promise.resolve(redirectPath);\r\n        } catch (error) {\r\n            return Promise.reject(error);\r\n        } finally {\r\n            invalidateAuthStore();\r\n        }\r\n    };\r\n\r\n    const checkAuthFunc = async (params: any) => {\r\n        try {\r\n            await authOperations.checkAuth?.(params);\r\n            return Promise.resolve();\r\n        } catch (error) {\r\n            if ((error as { redirectPath?: string })?.redirectPath) {\r\n                replace((error as { redirectPath: string }).redirectPath);\r\n            }\r\n            return Promise.reject(error);\r\n        } finally {\r\n            invalidateAuthStore();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                ...authOperations,\r\n                login: loginFunc,\r\n                logout: logoutFunc,\r\n                checkAuth: checkAuthFunc,\r\n                isProvided,\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\n\r\nexport type UseGetIdentityProps<TData> = {\r\n    queryOptions?: UseQueryOptions<TData>;\r\n};\r\n\r\n/**\r\n * `useGetIdentity` calls the `getUserIdentity` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useGetIdentity} for more details.\r\n *\r\n * @typeParam TData - Result data of the query\r\n *\r\n */\r\nexport const useGetIdentity = <TData = any>({\r\n    queryOptions,\r\n}: UseGetIdentityProps<TData> = {}): UseQueryResult<TData, unknown> => {\r\n    const { getUserIdentity } = React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery<TData>(\r\n        [\"getUserIdentity\"],\r\n        // Enabled check for `getUserIdentity` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\r\n        getUserIdentity ?? (() => Promise.resolve(undefined)),\r\n        {\r\n            enabled: !!getUserIdentity,\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext, TLogoutData } from \"../../../interfaces\";\r\nimport { useNavigation, useNotification } from \"@hooks\";\r\n\r\n/**\r\n * `useLogout` calls the `logout` method from the {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogout} for more details.\r\n *\r\n */\r\nexport const useLogout = <TVariables = void>(): UseMutationResult<\r\n    TLogoutData,\r\n    Error,\r\n    TVariables,\r\n    unknown\r\n> => {\r\n    const { push } = useNavigation();\r\n    const { logout: logoutFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n    const { open } = useNotification();\r\n\r\n    const queryResponse = useMutation<TLogoutData, Error, TVariables, unknown>(\r\n        \"useLogout\",\r\n        logoutFromContext,\r\n        {\r\n            onSuccess: (redirectPathFromAuth) => {\r\n                if (redirectPathFromAuth !== false) {\r\n                    if (redirectPathFromAuth) {\r\n                        push(redirectPathFromAuth);\r\n                    } else {\r\n                        push(\"/login\");\r\n                    }\r\n                }\r\n            },\r\n            onError: (error: Error) => {\r\n                open?.({\r\n                    key: \"useLogout-error\",\r\n                    type: \"error\",\r\n                    message: error?.name || \"Logout Error\",\r\n                    description:\r\n                        error?.message || \"Something went wrong during logout\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\nimport qs from \"qs\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\n\r\nimport { IAuthContext, TLoginData } from \"../../../interfaces\";\r\nimport { useNavigation, useRouterContext, useNotification } from \"@hooks\";\r\n\r\n/**\r\n * `useLogin` calls `login` method from {@link https://refine.dev/docs/api-references/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useLogin} for more details.\r\n *\r\n * @typeParam TData - Result data of the query\r\n * @typeParam TVariables - Values for mutation function. default `{}`\r\n *\r\n */\r\nexport const useLogin = <TVariables = {}>(): UseMutationResult<\r\n    TLoginData,\r\n    Error,\r\n    TVariables,\r\n    unknown\r\n> => {\r\n    const { replace } = useNavigation();\r\n    const { login: loginFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const { useLocation } = useRouterContext();\r\n    const { search } = useLocation();\r\n    const { close, open } = useNotification();\r\n\r\n    const { to } = qs.parse(search?.substring(1));\r\n\r\n    const queryResponse = useMutation<TLoginData, Error, TVariables, unknown>(\r\n        \"useLogin\",\r\n        loginFromContext,\r\n        {\r\n            onSuccess: (redirectPathFromAuth) => {\r\n                if (to) {\r\n                    return replace(to as string);\r\n                }\r\n\r\n                if (redirectPathFromAuth !== false) {\r\n                    if (redirectPathFromAuth) {\r\n                        replace(redirectPathFromAuth);\r\n                    } else {\r\n                        replace(\"/\");\r\n                    }\r\n                }\r\n                close?.(\"login-error\");\r\n            },\r\n            onError: (error: any) => {\r\n                open?.({\r\n                    message: error?.name || \"Login Error\",\r\n                    description: error?.message || \"Invalid credentials\",\r\n                    key: \"login-error\",\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import { useContext } from \"react\";\r\nimport { useQuery, UseQueryResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\n\r\n/**\r\n *  `useAuthenticated` calls the `checkAuth` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated} for more details.\r\n *\r\n */\r\nexport const useAuthenticated = (\r\n    params?: any,\r\n): UseQueryResult<any, unknown> => {\r\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\r\n\r\n    const queryResponse = useQuery(\r\n        [\"useAuthenticated\", params],\r\n        async () => {\r\n            await checkAuth?.(params);\r\n        },\r\n        {\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import React from \"react\";\r\nimport { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../../interfaces\";\r\nimport { useLogout } from \"@hooks\";\r\n\r\n/**\r\n * `useCheckError` calls the `checkError` method from the {@link https://refine.dev/docs/core/providers/auth-provider `authProvider`} under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/auth/useCheckError} for more details.\r\n *\r\n */\r\nexport const useCheckError = (): UseMutationResult<\r\n    void,\r\n    string | undefined,\r\n    any,\r\n    unknown\r\n> => {\r\n    const { checkError: checkErrorFromContext } =\r\n        React.useContext<IAuthContext>(AuthContext);\r\n\r\n    const { mutate: logout } = useLogout<{ redirectPath?: string }>();\r\n\r\n    const queryResponse = useMutation(\"useCheckError\", checkErrorFromContext, {\r\n        onError: (redirectPath?: string) => {\r\n            logout({ redirectPath });\r\n        },\r\n    });\r\n\r\n    return queryResponse;\r\n};\r\n","import { useContext } from \"react\";\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\n/**\r\n * A hook that the UI uses\r\n * @internal\r\n */\r\nexport const useIsExistAuthentication = (): boolean => {\r\n    const { isProvided } = useContext<IAuthContext>(AuthContext);\r\n\r\n    return isProvided || false;\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\nimport {\r\n    GetListResponse,\r\n    CrudFilters,\r\n    Pagination,\r\n    BaseRecord,\r\n    HttpError,\r\n    CrudSorting,\r\n    MetaDataQuery,\r\n    SuccessErrorNotification,\r\n    LiveModeProps,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useCheckError,\r\n    useHandleNotification,\r\n    useResourceSubscription,\r\n    useTranslate,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport interface UseListConfig {\r\n    pagination?: Pagination;\r\n    hasPagination?: boolean;\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n}\r\n\r\nexport type UseListProps<TData, TError> = {\r\n    resource: string;\r\n    config?: UseListConfig;\r\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\n/**\r\n * `useList` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.\r\n *\r\n * It uses the `getList` method as the query function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useList} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n *\r\n */\r\nexport const useList = <\r\n    TData = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    resource,\r\n    config,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    dataProviderName,\r\n}: UseListProps<TData, TError>): QueryObserverResult<\r\n    GetListResponse<TData>,\r\n    TError\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n    const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n    const { getList } = dataProvider(dataProviderName);\r\n\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    const isEnabled =\r\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\r\n\r\n    useResourceSubscription({\r\n        resource,\r\n        types: [\"*\"],\r\n        params: {\r\n            metaData,\r\n            pagination: config?.pagination,\r\n            hasPagination: config?.hasPagination,\r\n            sort: config?.sort,\r\n            filters: config?.filters,\r\n            subscriptionType: \"useList\",\r\n            ...liveParams,\r\n        },\r\n        channel: `resources/${resource}`,\r\n        enabled: isEnabled,\r\n        liveMode,\r\n        onLiveEvent,\r\n    });\r\n\r\n    const queryResponse = useQuery<GetListResponse<TData>, TError>(\r\n        queryKey.list(config),\r\n        () => {\r\n            const { hasPagination, ...restConfig } = config || {};\r\n            return getList<TData>({\r\n                resource,\r\n                ...restConfig,\r\n                hasPagination,\r\n                metaData,\r\n            });\r\n        },\r\n        {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                queryOptions?.onSuccess?.(data);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(\r\n                              data,\r\n                              { metaData, config },\r\n                              resource,\r\n                          )\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (err: TError) => {\r\n                checkError(err);\r\n                queryOptions?.onError?.(err);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, { metaData, config }, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${resource}-useList-notification`,\r\n                    message: translate(\r\n                        \"common:notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","export const userFriendlySecond = (miliseconds: number): number => {\r\n    return miliseconds / 1000; //convert to seconds\r\n};\r\n","import zip from \"lodash/zip\";\r\nimport fromPairs from \"lodash/fromPairs\";\r\nimport { MapDataFn } from \"../../../interfaces\";\r\n\r\nexport const importCSVMapper = <TItem = any, TVariables = any>(\r\n    data: any[][],\r\n    mapData: MapDataFn<TItem, TVariables> = (item) => item as any,\r\n): TVariables[] => {\r\n    const [headers, ...body] = data;\r\n    return body\r\n        .map((entry) => fromPairs(zip(headers, entry)))\r\n        .map((item: any, index, array: any) =>\r\n            mapData.call(undefined, item, index, array),\r\n        );\r\n};\r\n","import humanizeString from \"humanize-string\";\r\nimport pluralize from \"pluralize\";\r\n\r\n/**\r\n * A method that the internal uses\r\n * @internal\r\n */\r\nexport const userFriendlyResourceName = (\r\n    resource = \"\",\r\n    type: \"singular\" | \"plural\",\r\n): string => {\r\n    const humanizeResource = humanizeString(resource);\r\n    if (type === \"singular\") {\r\n        return pluralize.singular(humanizeResource);\r\n    }\r\n    return pluralize.plural(humanizeResource);\r\n};\r\n","export const handleUseParams = (params: any = {}): any => {\r\n    if (params?.id) {\r\n        return {\r\n            ...params,\r\n            id: decodeURIComponent(params.id),\r\n        };\r\n    }\r\n    return params;\r\n};\r\n","import { IQueryKeys } from \"src/interfaces\";\r\nimport { QueryKey } from \"react-query\";\r\n\r\nimport { MetaDataQuery } from \"src/interfaces\";\r\n\r\nexport const queryKeys = (\r\n    resource?: string,\r\n    dataProviderName?: string,\r\n    metaData?: MetaDataQuery | undefined,\r\n): IQueryKeys => {\r\n    const providerName = dataProviderName || \"default\";\r\n    const keys: IQueryKeys = {\r\n        all: [providerName],\r\n        resourceAll: [providerName, resource || \"\"],\r\n        list: (config) => [\r\n            ...keys.resourceAll,\r\n            \"list\",\r\n            { ...config, ...metaData } as QueryKey,\r\n        ],\r\n        many: (ids) =>\r\n            [\r\n                ...keys.resourceAll,\r\n                \"getMany\",\r\n                (ids && ids.map(String)) as QueryKey,\r\n                { ...metaData } as QueryKey,\r\n            ].filter((item) => item !== undefined),\r\n        detail: (id) => [\r\n            ...keys.resourceAll,\r\n            \"detail\",\r\n            id?.toString(),\r\n            { ...metaData } as QueryKey,\r\n        ],\r\n        logList: (meta) =>\r\n            [\"logList\", resource, meta as any, metaData as QueryKey].filter(\r\n                (item) => item !== undefined,\r\n            ),\r\n    };\r\n    return keys;\r\n};\r\n","export const hasPermission = (\r\n    permissions: string[] | undefined,\r\n    action: string | undefined,\r\n): boolean => {\r\n    if (!permissions || !action) {\r\n        return false;\r\n    }\r\n    return !!permissions.find((i) => i === action);\r\n};\r\n","import { ResourceProps } from \"src/interfaces\";\r\n\r\nexport const routeGenerator = (\r\n    item: ResourceProps,\r\n    resourcesFromProps: ResourceProps[],\r\n): string | undefined => {\r\n    let route;\r\n\r\n    if (item.parentName) {\r\n        const hasParentName = resourcesFromProps.find(\r\n            (p) => p.name === item.parentName,\r\n        );\r\n        if (hasParentName?.parentName) {\r\n            const routePrefix = routeGenerator(\r\n                hasParentName,\r\n                resourcesFromProps,\r\n            );\r\n            route = `${routePrefix}/${item.name}`;\r\n            routeGenerator(hasParentName, resourcesFromProps);\r\n        } else if (item.parentName) {\r\n            route = `${item.parentName}/${item.name}`;\r\n        }\r\n    } else {\r\n        route = item.name;\r\n    }\r\n    return route;\r\n};\r\n","import { IResourceItem, ITreeMenu, IMenuItem } from \"src/interfaces\";\r\n\r\nexport const createTreeView = (\r\n    resources: IResourceItem[] | IMenuItem[],\r\n): ITreeMenu[] | ITreeMenu[] => {\r\n    const tree = [];\r\n    const resourcesRouteObject: { [key: string]: any } = {};\r\n    const resourcesNameObject: { [key: string]: any } = {};\r\n    let parent: IResourceItem | IMenuItem;\r\n    let child: ITreeMenu;\r\n\r\n    for (let i = 0; i < resources.length; i++) {\r\n        parent = resources[i];\r\n\r\n        const route = parent.route ?? parent.options?.route ?? \"\";\r\n\r\n        resourcesRouteObject[route] = parent;\r\n        resourcesRouteObject[route][\"children\"] = [];\r\n\r\n        resourcesNameObject[parent.name] = parent;\r\n        resourcesNameObject[parent.name][\"children\"] = [];\r\n    }\r\n\r\n    for (const name in resourcesRouteObject) {\r\n        if (resourcesRouteObject.hasOwnProperty(name)) {\r\n            child = resourcesRouteObject[name];\r\n\r\n            if (child.parentName && resourcesNameObject[child.parentName]) {\r\n                resourcesNameObject[child.parentName][\"children\"].push(child);\r\n            } else {\r\n                tree.push(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    return tree;\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    GetOneResponse,\r\n    HttpError,\r\n    BaseRecord,\r\n    BaseKey,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    SuccessErrorNotification,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useCheckError,\r\n    useTranslate,\r\n    useResourceSubscription,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions\";\r\n\r\nexport type UseOneProps<TData, TError> = {\r\n    resource: string;\r\n    id: BaseKey;\r\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\n/**\r\n * `useOne` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving single items from a `resource`.\r\n *\r\n * It uses `getOne` method as query function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useOne} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n *\r\n */\r\nexport const useOne = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    resource,\r\n    id,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    dataProviderName,\r\n}: UseOneProps<TData, TError>): QueryObserverResult<GetOneResponse<TData>> => {\r\n    const dataProvider = useDataProvider();\r\n    const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n\r\n    const { getOne } = dataProvider(dataProviderName);\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    useResourceSubscription({\r\n        resource,\r\n        types: [\"*\"],\r\n        channel: `resources/${resource}`,\r\n        params: {\r\n            ids: id ? [id] : [],\r\n            id: id,\r\n            metaData,\r\n            subscriptionType: \"useOne\",\r\n            ...liveParams,\r\n        },\r\n        enabled: queryOptions?.enabled,\r\n        liveMode,\r\n        onLiveEvent,\r\n    });\r\n\r\n    const queryResponse = useQuery<GetOneResponse<TData>, TError>(\r\n        queryKey.detail(id),\r\n        () => getOne<TData>({ resource, id, metaData }),\r\n        {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                queryOptions?.onSuccess?.(data);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, { id, metaData }, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (err: TError) => {\r\n                checkError(err);\r\n                queryOptions?.onError?.(err);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, { id, metaData }, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${id}-${resource}-getOne-notification`,\r\n                    message: translate(\r\n                        \"notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import qs, { IStringifyOptions } from \"qs\";\r\nimport unionWith from \"lodash/unionWith\";\r\nimport differenceWith from \"lodash/differenceWith\";\r\n\r\nimport {\r\n    CrudFilters,\r\n    CrudSorting,\r\n    CrudFilter,\r\n    CrudSort,\r\n    CrudOperators,\r\n    SortOrder,\r\n} from \"../../interfaces\";\r\n\r\nexport const parseTableParams = (url: string) => {\r\n    const { current, pageSize, sorter, filters } = qs.parse(\r\n        url.substring(1), // remove first ? character\r\n    );\r\n\r\n    return {\r\n        parsedCurrent: current && Number(current),\r\n        parsedPageSize: pageSize && Number(pageSize),\r\n        parsedSorter: (sorter as CrudSorting) ?? [],\r\n        parsedFilters: (filters as CrudFilters) ?? [],\r\n    };\r\n};\r\n\r\nexport const parseTableParamsFromQuery = (params: any) => {\r\n    const url = qs.stringify(params);\r\n    return parseTableParams(`/${url}`);\r\n};\r\n\r\nexport const stringifyTableParams = (params: {\r\n    pagination?: { current?: number; pageSize?: number };\r\n    sorter: CrudSorting;\r\n    filters: CrudFilters;\r\n}): string => {\r\n    const options: IStringifyOptions = {\r\n        skipNulls: true,\r\n        arrayFormat: \"indices\",\r\n        encode: false,\r\n    };\r\n    const { pagination, sorter, filters } = params;\r\n\r\n    const queryString = qs.stringify(\r\n        { ...(pagination ? pagination : {}), sorter, filters },\r\n        options,\r\n    );\r\n\r\n    return queryString;\r\n};\r\n\r\nexport const compareFilters = (\r\n    left: CrudFilter,\r\n    right: CrudFilter,\r\n): boolean => {\r\n    return (\r\n        (\"field\" in left ? left.field : undefined) ==\r\n            (\"field\" in right ? right.field : undefined) &&\r\n        left.operator == right.operator\r\n    );\r\n};\r\n\r\nexport const compareSorters = (left: CrudSort, right: CrudSort): boolean =>\r\n    left.field == right.field;\r\n// Keep only one CrudFilter per type according to compareFilters\r\n// Items in the array that is passed first to unionWith have higher priority\r\n// CrudFilter items with undefined values are necessary to signify no filter\r\n// After union, don't keep CrudFilter items with undefined value in the result\r\n// Items in the arrays with higher priority are put at the end.\r\nexport const unionFilters = (\r\n    permanentFilter: CrudFilters,\r\n    newFilters: CrudFilters,\r\n    prevFilters: CrudFilters = [],\r\n): CrudFilters =>\r\n    unionWith(permanentFilter, newFilters, prevFilters, compareFilters).filter(\r\n        (crudFilter) =>\r\n            crudFilter.value !== undefined &&\r\n            crudFilter.value !== null &&\r\n            (crudFilter.operator !== \"or\" ||\r\n                (crudFilter.operator === \"or\" &&\r\n                    crudFilter.value.length !== 0)),\r\n    );\r\n\r\nexport const unionSorters = (\r\n    permanentSorter: CrudSorting,\r\n    newSorters: CrudSorting,\r\n): CrudSorting =>\r\n    unionWith(permanentSorter, newSorters, compareSorters).filter(\r\n        (crudSorter) =>\r\n            crudSorter.order !== undefined && crudSorter.order !== null,\r\n    );\r\n// Prioritize filters in the permanentFilter and put it at the end of result array\r\nexport const setInitialFilters = (\r\n    permanentFilter: CrudFilters,\r\n    defaultFilter: CrudFilters,\r\n): CrudFilters => [\r\n    ...differenceWith(defaultFilter, permanentFilter, compareFilters),\r\n    ...permanentFilter,\r\n];\r\n\r\nexport const setInitialSorters = (\r\n    permanentSorter: CrudSorting,\r\n    defaultSorter: CrudSorting,\r\n): CrudSorting => [\r\n    ...differenceWith(defaultSorter, permanentSorter, compareSorters),\r\n    ...permanentSorter,\r\n];\r\n\r\nexport const getDefaultSortOrder = (\r\n    columnName: string,\r\n    sorter?: CrudSorting,\r\n): SortOrder | undefined => {\r\n    if (!sorter) {\r\n        return undefined;\r\n    }\r\n\r\n    const sortItem = sorter.find((item) => item.field === columnName);\r\n\r\n    if (sortItem) {\r\n        return sortItem.order as SortOrder;\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\nexport const getDefaultFilter = (\r\n    columnName: string,\r\n    filters?: CrudFilters,\r\n    operatorType: CrudOperators = \"eq\",\r\n): CrudFilter[\"value\"] | undefined => {\r\n    const filter = filters?.find((filter) => {\r\n        if (filter.operator !== \"or\") {\r\n            const { operator, field } = filter;\r\n            return field === columnName && operator === operatorType;\r\n        }\r\n        return undefined;\r\n    });\r\n\r\n    if (filter) {\r\n        return filter.value || [];\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","export const file2Base64 = (file: any): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        const resultHandler = () => {\r\n            if (reader.result) {\r\n                reader.removeEventListener(\"load\", resultHandler, false);\r\n\r\n                resolve(reader.result as string);\r\n            }\r\n        };\r\n\r\n        reader.addEventListener(\"load\", resultHandler, false);\r\n\r\n        reader.readAsDataURL(file.originFileObj as Blob);\r\n        reader.onerror = (error) => {\r\n            reader.removeEventListener(\"load\", resultHandler, false);\r\n            return reject(error);\r\n        };\r\n    });\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    GetManyResponse,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    SuccessErrorNotification,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useCheckError,\r\n    useResourceSubscription,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport type UseManyProps<TData, TError> = {\r\n    resource: string;\r\n    ids: BaseKey[];\r\n    queryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\n/**\r\n * `useMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.\r\n *\r\n * It uses `getMany` method as query function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n *\r\n */\r\nexport const useMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    resource,\r\n    ids,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    dataProviderName,\r\n}: UseManyProps<TData, TError>): QueryObserverResult<\r\n    GetManyResponse<TData>\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n    const queryKey = queryKeys(resource, dataProviderName, metaData);\r\n\r\n    const { getMany } = dataProvider(dataProviderName);\r\n\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    const isEnabled =\r\n        queryOptions?.enabled === undefined || queryOptions?.enabled === true;\r\n\r\n    useResourceSubscription({\r\n        resource,\r\n        types: [\"*\"],\r\n        params: {\r\n            ids: ids ?? [],\r\n            metaData,\r\n            subscriptionType: \"useMany\",\r\n            ...liveParams,\r\n        },\r\n        channel: `resources/${resource}`,\r\n        enabled: isEnabled,\r\n        liveMode,\r\n        onLiveEvent,\r\n    });\r\n\r\n    const queryResponse = useQuery<GetManyResponse<TData>, TError>(\r\n        queryKey.many(ids),\r\n        () => getMany<TData>({ resource, ids, metaData }),\r\n        {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                queryOptions?.onSuccess?.(data);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, ids, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (err: TError) => {\r\n                checkError(err);\r\n                queryOptions?.onError?.(err);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, ids, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${ids[0]}-${resource}-getMany-notification`,\r\n                    message: translate(\r\n                        \"notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\n\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    UpdateResponse,\r\n    MutationMode,\r\n    PrevContext as UpdateContext,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    PreviousQuery,\r\n    GetListResponse,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport pluralize from \"pluralize\";\r\nimport {\r\n    useMutationMode,\r\n    useCancelNotification,\r\n    useTranslate,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useLog,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport type UpdateParams<TVariables> = {\r\n    id: BaseKey;\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseUpdateReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    UpdateResponse<TData>,\r\n    TError,\r\n    UpdateParams<TVariables>,\r\n    UpdateContext<TData>\r\n>;\r\n\r\n/**\r\n * `useUpdate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for update mutations.\r\n *\r\n * It uses `update` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useUpdate} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useUpdate = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseUpdateReturnType<TData, TError, TVariables> => {\r\n    const queryClient = useQueryClient();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const translate = useTranslate();\r\n    const { mutate: checkError } = useCheckError();\r\n    const publish = usePublish();\r\n    const { log } = useLog();\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        UpdateResponse<TData>,\r\n        TError,\r\n        UpdateParams<TVariables>,\r\n        UpdateContext<TData>\r\n    >(\r\n        ({\r\n            id,\r\n            values,\r\n            resource,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n        }) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).update<TData, TVariables>(\r\n                    {\r\n                        resource,\r\n                        id,\r\n                        variables: values,\r\n                        metaData,\r\n                    },\r\n                );\r\n            }\r\n            const updatePromise = new Promise<UpdateResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .update<TData, TVariables>({\r\n                                resource,\r\n                                id,\r\n                                variables: values,\r\n                                metaData,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id: id,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                resource,\r\n                id,\r\n                mutationMode,\r\n                values,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (record.id?.toString() === id?.toString()) {\r\n                                    return {\r\n                                        id,\r\n                                        ...values,\r\n                                    } as unknown as TData;\r\n                                }\r\n                                return record;\r\n                            });\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (record.id?.toString() === id?.toString()) {\r\n                                    record = {\r\n                                        id,\r\n                                        ...values,\r\n                                    } as unknown as TData;\r\n                                }\r\n                                return record;\r\n                            });\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.detail(id),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data: {\r\n                                    ...previous.data,\r\n                                    ...values,\r\n                                },\r\n                            };\r\n                        },\r\n                    );\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\", \"detail\"],\r\n                },\r\n            ) => {\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                    id,\r\n                });\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                data,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    successNotification,\r\n                    dataProviderName,\r\n                    values,\r\n                    metaData,\r\n                },\r\n                context,\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, { id, values }, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${id}-${resource}-notification`,\r\n                    description: translate(\r\n                        \"notifications.success\",\r\n                        \"Successful\",\r\n                    ),\r\n                    message: translate(\r\n                        \"notifications.editSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                        },\r\n                        `Successfully updated ${resourceSingular}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"updated\",\r\n                    payload: {\r\n                        ids: data.data?.id ? [data.data.id] : undefined,\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n\r\n                let previousData: any;\r\n                if (context) {\r\n                    const queryData = queryClient.getQueryData<\r\n                        UpdateResponse<TData>\r\n                    >(context.queryKey.detail(id));\r\n\r\n                    previousData = Object.keys(values).reduce<any>(\r\n                        (acc, item) => {\r\n                            acc[item] = queryData?.data?.[item];\r\n                            return acc;\r\n                        },\r\n                        {},\r\n                    );\r\n                }\r\n\r\n                const { fields, operation, variables, ...rest } =\r\n                    metaData || {};\r\n\r\n                log?.mutate({\r\n                    action: \"update\",\r\n                    resource,\r\n                    data: values,\r\n                    previousData,\r\n                    meta: {\r\n                        id,\r\n                        dataProviderName,\r\n                        ...rest,\r\n                    },\r\n                });\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { id, resource, errorNotification, values },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError?.(err);\r\n\r\n                    const resourceSingular = pluralize.singular(resource);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, { id, values }, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${id}-${resource}-notification`,\r\n                        message: translate(\r\n                            \"notifications.editError\",\r\n                            {\r\n                                resource: translate(\r\n                                    `${resource}.${resource}`,\r\n                                    resourceSingular,\r\n                                ),\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import React, { ReactNode, useReducer } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nimport { UndoableQueue } from \"@components\";\r\n\r\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../interfaces\";\r\nimport { ActionTypes } from \"./actionTypes\";\r\n\r\nexport const UndoableQueueContext = React.createContext<IUndoableQueueContext>({\r\n    notifications: [],\r\n    notificationDispatch: () => false,\r\n});\r\n\r\nconst initialState: IUndoableQueue[] = [];\r\n\r\nexport const undoableQueueReducer = (state: IUndoableQueue[], action: any) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD:\r\n            return [\r\n                ...state.filter(\r\n                    (notificationItem: IUndoableQueue) =>\r\n                        notificationItem.id != action.payload.id &&\r\n                        notificationItem.resource == action.payload.resource,\r\n                ),\r\n                {\r\n                    ...action.payload,\r\n                    isRunning: true,\r\n                },\r\n            ];\r\n        case ActionTypes.REMOVE:\r\n            return state.filter(\r\n                (notificationItem: IUndoableQueue) =>\r\n                    notificationItem.id != action.payload.id &&\r\n                    notificationItem.resource == action.payload.resource,\r\n            );\r\n        case ActionTypes.DECREASE_NOTIFICATION_SECOND:\r\n            return state.map((notificationItem: IUndoableQueue) => {\r\n                if (\r\n                    notificationItem.id == action.payload.id &&\r\n                    notificationItem.resource == action.payload.resource\r\n                ) {\r\n                    return {\r\n                        ...notificationItem,\r\n                        seconds: action.payload.seconds - 1000,\r\n                    };\r\n                }\r\n                return notificationItem;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const UndoableQueueContextProvider: React.FC<{ children: ReactNode }> =\r\n    ({ children }) => {\r\n        const [notifications, notificationDispatch] = useReducer(\r\n            undoableQueueReducer,\r\n            initialState,\r\n        );\r\n\r\n        const notificationData = { notifications, notificationDispatch };\r\n\r\n        return (\r\n            <UndoableQueueContext.Provider value={notificationData}>\r\n                {children}\r\n                {typeof window !== \"undefined\" &&\r\n                    createPortal(\r\n                        <UndoableQueue notifications={notifications} />,\r\n                        document.body,\r\n                    )}\r\n            </UndoableQueueContext.Provider>\r\n        );\r\n    };\r\n","import { useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    CreateResponse,\r\n    BaseRecord,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useLog,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\n\r\ntype useCreateParams<TVariables> = {\r\n    resource: string;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseCreateReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    CreateResponse<TData>,\r\n    TError,\r\n    useCreateParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useCreate` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\r\n *\r\n * It uses `create` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCreate} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\n\r\nexport const useCreate = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseCreateReturnType<TData, TError, TVariables> => {\r\n    const { mutate: checkError } = useCheckError();\r\n    const dataProvider = useDataProvider();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const { log } = useLog();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    const mutation = useMutation<\r\n        CreateResponse<TData>,\r\n        TError,\r\n        useCreateParams<TVariables>,\r\n        unknown\r\n    >(\r\n        ({\r\n            resource,\r\n            values,\r\n            metaData,\r\n            dataProviderName,\r\n        }: useCreateParams<TVariables>) => {\r\n            return dataProvider(dataProviderName).create<TData, TVariables>({\r\n                resource,\r\n                variables: values,\r\n                metaData,\r\n            });\r\n        },\r\n        {\r\n            onSuccess: (\r\n                data,\r\n                {\r\n                    resource,\r\n                    successNotification: successNotificationFromProp,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                    values,\r\n                    metaData,\r\n                },\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotificationFromProp === \"function\"\r\n                        ? successNotificationFromProp(data, values, resource)\r\n                        : successNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `create-${resource}-notification`,\r\n                    message: translate(\r\n                        \"notifications.createSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                        },\r\n                        `Successfully created ${resourceSingular}`,\r\n                    ),\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    type: \"success\",\r\n                });\r\n\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"created\",\r\n                    payload: {\r\n                        ids: data?.data?.id ? [data.data.id] : undefined,\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n\r\n                const { fields, operation, variables, ...rest } =\r\n                    metaData || {};\r\n\r\n                log?.mutate({\r\n                    action: \"create\",\r\n                    resource,\r\n                    data: values,\r\n                    meta: {\r\n                        dataProviderName,\r\n                        id: data?.data?.id ?? undefined,\r\n                        ...rest,\r\n                    },\r\n                });\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                {\r\n                    resource,\r\n                    errorNotification: errorNotificationFromProp,\r\n                    values,\r\n                },\r\n            ) => {\r\n                checkError(err);\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof errorNotificationFromProp === \"function\"\r\n                        ? errorNotificationFromProp(err, values, resource)\r\n                        : errorNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `create-${resource}-notification`,\r\n                    description: err.message,\r\n                    message: translate(\r\n                        \"notifications.createError\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                            statusCode: err.statusCode,\r\n                        },\r\n                        `There was an error creating ${resourceSingular} (status code: ${err.statusCode})`,\r\n                    ),\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useQueryClient, useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    useMutationMode,\r\n    useCancelNotification,\r\n    useTranslate,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useLog,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport {\r\n    DeleteOneResponse,\r\n    MutationMode,\r\n    PrevContext as DeleteContext,\r\n    BaseRecord,\r\n    BaseKey,\r\n    HttpError,\r\n    GetListResponse,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    PreviousQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\nexport type DeleteParams<TVariables> = {\r\n    id: BaseKey;\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    values?: TVariables;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseDeleteReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    DeleteOneResponse<TData>,\r\n    TError,\r\n    DeleteParams<TVariables>,\r\n    DeleteContext<TData>\r\n>;\r\n\r\n/**\r\n * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.\r\n *\r\n * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useDelete} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for params. default `{}`\r\n *\r\n */\r\nexport const useDelete = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseDeleteReturnType<TData, TError, TVariables> => {\r\n    const { mutate: checkError } = useCheckError();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const { log } = useLog();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        DeleteOneResponse<TData>,\r\n        TError,\r\n        DeleteParams<TVariables>,\r\n        DeleteContext<TData>\r\n    >(\r\n        ({\r\n            id,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            resource,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n            values,\r\n        }) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).deleteOne<TData>({\r\n                    resource,\r\n                    id,\r\n                    metaData,\r\n                    variables: values,\r\n                });\r\n            }\r\n\r\n            const deletePromise = new Promise<DeleteOneResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .deleteOne<TData>({\r\n                                resource,\r\n                                id,\r\n                                metaData,\r\n                                variables: values,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return deletePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                id,\r\n                resource,\r\n                mutationMode,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.filter(\r\n                                (record: TData) =>\r\n                                    record.id?.toString() !== id.toString(),\r\n                            );\r\n\r\n                            return {\r\n                                data,\r\n                                total: previous.total - 1,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n                            const data = previous.data.filter(\r\n                                (record: TData) => {\r\n                                    return (\r\n                                        record.id?.toString() !== id?.toString()\r\n                                    );\r\n                                },\r\n                            );\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                },\r\n            ) => {\r\n                // invalidate the cache for the list and many queries:\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                _data,\r\n                {\r\n                    id,\r\n                    resource,\r\n                    successNotification,\r\n                    dataProviderName,\r\n                    metaData,\r\n                },\r\n                context,\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource ?? \"\");\r\n\r\n                // Remove the queries from the cache:\r\n                queryClient.removeQueries(context?.queryKey.detail(id));\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(_data, id, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${id}-${resource}-notification`,\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    message: translate(\r\n                        \"notifications.deleteSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resourceSingular,\r\n                            ),\r\n                        },\r\n                        `Successfully deleted a ${resourceSingular}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"deleted\",\r\n                    payload: {\r\n                        ids: id ? [id] : [],\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n\r\n                const { fields, operation, variables, ...rest } =\r\n                    metaData || {};\r\n\r\n                log?.mutate({\r\n                    action: \"delete\",\r\n                    resource,\r\n                    meta: {\r\n                        id,\r\n                        dataProviderName,\r\n                        ...rest,\r\n                    },\r\n                });\r\n\r\n                // Remove the queries from the cache:\r\n                queryClient.removeQueries(context?.queryKey.detail(id));\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { id, resource, errorNotification },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError(err);\r\n\r\n                    const resourceSingular = pluralize.singular(resource ?? \"\");\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, id, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${id}-${resource}-notification`,\r\n                        message: translate(\r\n                            \"notifications.deleteError\",\r\n                            {\r\n                                resource: resourceSingular,\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    CreateManyResponse,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport pluralize from \"pluralize\";\r\n\r\ntype useCreateManyParams<TVariables> = {\r\n    resource: string;\r\n    values: TVariables[];\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseCreateManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    CreateManyResponse<TData>,\r\n    TError,\r\n    useCreateManyParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useCreateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple create mutations.\r\n *\r\n * It uses `createMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useCreateMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useCreateMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseCreateManyReturnType<TData, TError, TVariables> => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        CreateManyResponse<TData>,\r\n        TError,\r\n        useCreateManyParams<TVariables>\r\n    >(\r\n        ({\r\n            resource,\r\n            values,\r\n            metaData,\r\n            dataProviderName,\r\n        }: useCreateManyParams<TVariables>) =>\r\n            dataProvider(dataProviderName).createMany<TData, TVariables>({\r\n                resource,\r\n                variables: values,\r\n                metaData,\r\n            }),\r\n        {\r\n            onSuccess: (\r\n                response,\r\n                {\r\n                    resource,\r\n                    successNotification,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                    values,\r\n                },\r\n            ) => {\r\n                const resourcePlural = pluralize.plural(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(response, values, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `createMany-${resource}-notification`,\r\n                    message: translate(\r\n                        \"notifications.createSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                        },\r\n                        `Successfully created ${resourcePlural}`,\r\n                    ),\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    type: \"success\",\r\n                });\r\n\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                const ids = response?.data\r\n                    .filter((item) => item?.id !== undefined)\r\n                    .map((item) => item.id!);\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"created\",\r\n                    payload: {\r\n                        ids,\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n            },\r\n            onError: (err: TError, { resource, errorNotification, values }) => {\r\n                const notificationConfig =\r\n                    typeof errorNotification === \"function\"\r\n                        ? errorNotification(err, values, resource)\r\n                        : errorNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `createMany-${resource}-notification`,\r\n                    description: err.message,\r\n                    message: translate(\r\n                        \"notifications.createError\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                            statusCode: err.statusCode,\r\n                        },\r\n                        `There was an error creating ${resource} (status code: ${err.statusCode}`,\r\n                    ),\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    useCancelNotification,\r\n    useCheckError,\r\n    useMutationMode,\r\n    useTranslate,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport {\r\n    BaseRecord,\r\n    BaseKey,\r\n    UpdateManyResponse,\r\n    HttpError,\r\n    MutationMode,\r\n    QueryResponse,\r\n    PrevContext as UpdateContext,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    GetListResponse,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\n\r\ntype UpdateManyParams<TVariables> = {\r\n    ids: BaseKey[];\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n} & SuccessErrorNotification;\r\n\r\ntype UseUpdateManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    UpdateManyResponse<TData>,\r\n    TError,\r\n    UpdateManyParams<TVariables>,\r\n    UpdateContext<TData>\r\n>;\r\n\r\n/**\r\n * `useUpdateMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple update mutations.\r\n *\r\n * It uses `updateMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useUpdateMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useUpdateMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseUpdateManyReturnType<TData, TError, TVariables> => {\r\n    const queryClient = useQueryClient();\r\n    const dataProvider = useDataProvider();\r\n    const translate = useTranslate();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const { mutate: checkError } = useCheckError();\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const publish = usePublish();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const mutation = useMutation<\r\n        UpdateManyResponse<TData>,\r\n        TError,\r\n        UpdateManyParams<TVariables>,\r\n        UpdateContext<TData>\r\n    >(\r\n        ({\r\n            ids,\r\n            values,\r\n            resource,\r\n            onCancel,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            metaData,\r\n            dataProviderName,\r\n        }: UpdateManyParams<TVariables>) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).updateMany<\r\n                    TData,\r\n                    TVariables\r\n                >({\r\n                    resource,\r\n                    ids,\r\n                    variables: values,\r\n                    metaData,\r\n                });\r\n            }\r\n\r\n            const updatePromise = new Promise<UpdateManyResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .updateMany<TData, TVariables>({\r\n                                resource,\r\n                                ids,\r\n                                variables: values,\r\n                                metaData,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id: ids,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n\r\n        {\r\n            onMutate: async ({\r\n                resource,\r\n                ids,\r\n                values,\r\n                mutationMode,\r\n                dataProviderName,\r\n                metaData,\r\n            }) => {\r\n                const queryKey = queryKeys(\r\n                    resource,\r\n                    dataProviderName,\r\n                    metaData,\r\n                );\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries = queryClient.getQueriesData<\r\n                    QueryResponse<TData>\r\n                >(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (\r\n                                    record.id !== undefined &&\r\n                                    ids\r\n                                        .filter((id) => id !== undefined)\r\n                                        .map(String)\r\n                                        .includes(record.id.toString())\r\n                                ) {\r\n                                    return {\r\n                                        ...record,\r\n                                        ...values,\r\n                                    };\r\n                                }\r\n\r\n                                return record;\r\n                            });\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.map((record: TData) => {\r\n                                if (\r\n                                    record.id !== undefined &&\r\n                                    ids\r\n                                        .filter((id) => id !== undefined)\r\n                                        .map(String)\r\n                                        .includes(record.id.toString())\r\n                                ) {\r\n                                    return {\r\n                                        ...record,\r\n                                        ...values,\r\n                                    };\r\n                                }\r\n                                return record;\r\n                            });\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n                    for (const id of ids) {\r\n                        queryClient.setQueriesData(\r\n                            queryKey.detail(id),\r\n                            (previous?: GetListResponse<TData> | null) => {\r\n                                if (!previous) {\r\n                                    return null;\r\n                                }\r\n\r\n                                const data = {\r\n                                    ...previous.data,\r\n                                    ...values,\r\n                                };\r\n                                return {\r\n                                    ...previous,\r\n                                    data,\r\n                                };\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            onSettled: (_data, _error, { ids, resource, dataProviderName }) => {\r\n                // invalidate the cache for the list and many queries:\r\n                invalidateStore({\r\n                    resource,\r\n                    invalidates: [\"list\", \"many\"],\r\n                    dataProviderName,\r\n                });\r\n\r\n                ids.forEach((id) =>\r\n                    invalidateStore({\r\n                        resource,\r\n                        invalidates: [\"detail\"],\r\n                        dataProviderName,\r\n                        id,\r\n                    }),\r\n                );\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id: ids, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                data,\r\n                { ids, resource, successNotification, values },\r\n            ) => {\r\n                const resourceSingular = pluralize.singular(resource);\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(data, { ids, values }, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${ids}-${resource}-notification`,\r\n                    description: translate(\r\n                        \"notifications.success\",\r\n                        \"Successful\",\r\n                    ),\r\n                    message: translate(\r\n                        \"notifications.editSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                        },\r\n                        `Successfully updated ${resourceSingular}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"updated\",\r\n                    payload: {\r\n                        ids: ids.map(String),\r\n                    },\r\n                    date: new Date(),\r\n                });\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                { ids, resource, errorNotification, values },\r\n                context,\r\n            ) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError?.(err);\r\n\r\n                    const resourceSingular = pluralize.singular(resource);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, { ids, values }, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${ids}-${resource}-updateMany-error-notification`,\r\n                        message: translate(\r\n                            \"notifications.editError\",\r\n                            {\r\n                                resource: resourceSingular,\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error when updating ${resourceSingular} (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useQueryClient, useMutation, UseMutationResult } from \"react-query\";\r\nimport pluralize from \"pluralize\";\r\n\r\nimport {\r\n    DeleteManyResponse,\r\n    HttpError,\r\n    BaseRecord,\r\n    BaseKey,\r\n    MutationMode,\r\n    PreviousQuery,\r\n    GetListResponse,\r\n    PrevContext as DeleteContext,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useMutationMode,\r\n    useCancelNotification,\r\n    useCheckError,\r\n    usePublish,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n    useInvalidate,\r\n} from \"@hooks\";\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport { queryKeys } from \"@definitions\";\r\n\r\nexport type DeleteManyParams<TVariables> = {\r\n    ids: BaseKey[];\r\n    resource: string;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    onCancel?: (cancelMutation: () => void) => void;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    values?: TVariables;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseDeleteManyReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    DeleteManyResponse<TData>,\r\n    TError,\r\n    DeleteManyParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useDeleteMany` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for multiple delete mutations.\r\n *\r\n * It uses `deleteMany` method as mutation function from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useDeleteMany} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for params. default `{}`\r\n *\r\n */\r\nexport const useDeleteMany = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseDeleteManyReturnType<TData, TError, TVariables> => {\r\n    const { mutate: checkError } = useCheckError();\r\n\r\n    const {\r\n        mutationMode: mutationModeContext,\r\n        undoableTimeout: undoableTimeoutContext,\r\n    } = useMutationMode();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const translate = useTranslate();\r\n    const publish = usePublish();\r\n    const handleNotification = useHandleNotification();\r\n    const invalidateStore = useInvalidate();\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    const mutation = useMutation<\r\n        DeleteManyResponse<TData>,\r\n        TError,\r\n        DeleteManyParams<TVariables>,\r\n        DeleteContext<TData>\r\n    >(\r\n        ({\r\n            resource,\r\n            ids,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            onCancel,\r\n            metaData,\r\n            dataProviderName,\r\n            values,\r\n        }: DeleteManyParams<TVariables>) => {\r\n            const mutationModePropOrContext =\r\n                mutationMode ?? mutationModeContext;\r\n\r\n            const undoableTimeoutPropOrContext =\r\n                undoableTimeout ?? undoableTimeoutContext;\r\n            if (!(mutationModePropOrContext === \"undoable\")) {\r\n                return dataProvider(dataProviderName).deleteMany<TData>({\r\n                    resource,\r\n                    ids,\r\n                    metaData,\r\n                    variables: values,\r\n                });\r\n            }\r\n\r\n            const updatePromise = new Promise<DeleteManyResponse<TData>>(\r\n                (resolve, reject) => {\r\n                    const doMutation = () => {\r\n                        dataProvider(dataProviderName)\r\n                            .deleteMany<TData>({\r\n                                resource,\r\n                                ids,\r\n                                metaData,\r\n                                variables: values,\r\n                            })\r\n                            .then((result) => resolve(result))\r\n                            .catch((err) => reject(err));\r\n                    };\r\n\r\n                    const cancelMutation = () => {\r\n                        reject({ message: \"mutationCancelled\" });\r\n                    };\r\n\r\n                    if (onCancel) {\r\n                        onCancel(cancelMutation);\r\n                    }\r\n\r\n                    notificationDispatch({\r\n                        type: ActionTypes.ADD,\r\n                        payload: {\r\n                            id: ids,\r\n                            resource: resource,\r\n                            cancelMutation: cancelMutation,\r\n                            doMutation: doMutation,\r\n                            seconds: undoableTimeoutPropOrContext,\r\n                            isSilent: !!onCancel,\r\n                        },\r\n                    });\r\n                },\r\n            );\r\n            return updatePromise;\r\n        },\r\n        {\r\n            onMutate: async ({\r\n                ids,\r\n                resource,\r\n                mutationMode,\r\n                dataProviderName,\r\n            }) => {\r\n                const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n                const mutationModePropOrContext =\r\n                    mutationMode ?? mutationModeContext;\r\n\r\n                await queryClient.cancelQueries(\r\n                    queryKey.resourceAll,\r\n                    undefined,\r\n                    {\r\n                        silent: true,\r\n                    },\r\n                );\r\n\r\n                const previousQueries: PreviousQuery<TData>[] =\r\n                    queryClient.getQueriesData(queryKey.resourceAll);\r\n\r\n                if (!(mutationModePropOrContext === \"pessimistic\")) {\r\n                    // Set the previous queries to the new ones:\r\n                    queryClient.setQueriesData(\r\n                        queryKey.list(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.filter(\r\n                                (item) =>\r\n                                    item.id &&\r\n                                    !ids\r\n                                        .map(String)\r\n                                        .includes(item.id.toString()),\r\n                            );\r\n\r\n                            return {\r\n                                data,\r\n                                total: previous.total - 1,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    queryClient.setQueriesData(\r\n                        queryKey.many(),\r\n                        (previous?: GetListResponse<TData> | null) => {\r\n                            if (!previous) {\r\n                                return null;\r\n                            }\r\n\r\n                            const data = previous.data.filter(\r\n                                (record: TData) => {\r\n                                    if (record.id) {\r\n                                        return !ids\r\n                                            .map(String)\r\n                                            .includes(record.id.toString());\r\n                                    }\r\n                                    return false;\r\n                                },\r\n                            );\r\n\r\n                            return {\r\n                                ...previous,\r\n                                data,\r\n                            };\r\n                        },\r\n                    );\r\n\r\n                    for (const id of ids) {\r\n                        queryClient.setQueriesData(\r\n                            queryKey.detail(id),\r\n                            (previous?: any | null) => {\r\n                                if (!previous || previous.data.id == id) {\r\n                                    return null;\r\n                                }\r\n                                return {\r\n                                    ...previous,\r\n                                };\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    previousQueries,\r\n                    queryKey,\r\n                };\r\n            },\r\n            // Always refetch after error or success:\r\n            onSettled: (\r\n                _data,\r\n                _error,\r\n                {\r\n                    resource,\r\n                    ids,\r\n                    dataProviderName,\r\n                    invalidates = [\"list\", \"many\"],\r\n                },\r\n            ) => {\r\n                // invalidate the cache for the list and many queries:\r\n                invalidateStore({\r\n                    resource,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                });\r\n\r\n                notificationDispatch({\r\n                    type: ActionTypes.REMOVE,\r\n                    payload: { id: ids, resource },\r\n                });\r\n            },\r\n            onSuccess: (\r\n                _data,\r\n                { ids, resource, successNotification },\r\n                context,\r\n            ) => {\r\n                // Remove the queries from the cache:\r\n                ids.forEach((id) =>\r\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\r\n                );\r\n\r\n                const notificationConfig =\r\n                    typeof successNotification === \"function\"\r\n                        ? successNotification(_data, ids, resource)\r\n                        : successNotification;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${ids}-${resource}-notification`,\r\n                    description: translate(\"notifications.success\", \"Success\"),\r\n                    message: translate(\r\n                        \"notifications.deleteSuccess\",\r\n                        {\r\n                            resource: translate(\r\n                                `${resource}.${resource}`,\r\n                                resource,\r\n                            ),\r\n                        },\r\n                        `Successfully deleted ${resource}`,\r\n                    ),\r\n                    type: \"success\",\r\n                });\r\n\r\n                publish?.({\r\n                    channel: `resources/${resource}`,\r\n                    type: \"deleted\",\r\n                    payload: { ids },\r\n                    date: new Date(),\r\n                });\r\n\r\n                // Remove the queries from the cache:\r\n                ids.forEach((id) =>\r\n                    queryClient.removeQueries(context?.queryKey.detail(id)),\r\n                );\r\n            },\r\n            onError: (err, { ids, resource, errorNotification }, context) => {\r\n                // set back the queries to the context:\r\n                if (context) {\r\n                    for (const query of context.previousQueries) {\r\n                        queryClient.setQueryData(query[0], query[1]);\r\n                    }\r\n                }\r\n\r\n                if (err.message !== \"mutationCancelled\") {\r\n                    checkError(err);\r\n                    const resourceSingular = pluralize.singular(resource);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, ids, resource)\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${ids}-${resource}-notification`,\r\n                        message: translate(\r\n                            \"notifications.deleteError\",\r\n                            {\r\n                                resource: resourceSingular,\r\n                                statusCode: err.statusCode,\r\n                            },\r\n                            `Error (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useDataProvider } from \"@hooks\";\r\n\r\nexport const useApiUrl = (dataProviderName?: string): string => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { getApiUrl } = dataProvider(dataProviderName);\r\n\r\n    return getApiUrl();\r\n};\r\n","import { QueryObserverResult, useQuery, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    CustomResponse,\r\n    CrudSorting,\r\n    CrudFilters,\r\n    BaseRecord,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    SuccessErrorNotification,\r\n} from \"../../interfaces\";\r\nimport {\r\n    useTranslate,\r\n    useCheckError,\r\n    useHandleNotification,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\n\r\ninterface UseCustomConfig<TQuery, TPayload> {\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n    query?: TQuery;\r\n    payload?: TPayload;\r\n    headers?: {};\r\n}\r\n\r\nexport type UseCustomProps<TData, TError, TQuery, TPayload> = {\r\n    url: string;\r\n    method: \"get\" | \"delete\" | \"head\" | \"options\" | \"post\" | \"put\" | \"patch\";\r\n    config?: UseCustomConfig<TQuery, TPayload>;\r\n    queryOptions?: UseQueryOptions<CustomResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification;\r\n\r\n/**\r\n * `useCustom` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`} used for custom requests.\r\n *\r\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/data/useCustom} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/core/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/core/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TQuery - Values for query params\r\n * @typeParam TPayload - Values for params\r\n *\r\n */\r\nexport const useCustom = <\r\n    TData = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TQuery = unknown,\r\n    TPayload = unknown,\r\n>({\r\n    url,\r\n    method,\r\n    config,\r\n    queryOptions,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    dataProviderName,\r\n}: UseCustomProps<TData, TError, TQuery, TPayload>): QueryObserverResult<\r\n    CustomResponse<TData>,\r\n    TError\r\n> => {\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { custom } = dataProvider(dataProviderName);\r\n    const { mutate: checkError } = useCheckError();\r\n    const translate = useTranslate();\r\n    const handleNotification = useHandleNotification();\r\n\r\n    if (custom) {\r\n        const queryResponse = useQuery<CustomResponse<TData>, TError>(\r\n            [\r\n                dataProviderName,\r\n                \"custom\",\r\n                method,\r\n                url,\r\n                { ...config, ...metaData },\r\n            ],\r\n            () => custom<TData>({ url, method, ...config, metaData }),\r\n            {\r\n                ...queryOptions,\r\n                onSuccess: (data) => {\r\n                    queryOptions?.onSuccess?.(data);\r\n\r\n                    const notificationConfig =\r\n                        typeof successNotification === \"function\"\r\n                            ? successNotification(data, {\r\n                                  ...config,\r\n                                  ...metaData,\r\n                              })\r\n                            : successNotification;\r\n\r\n                    handleNotification(notificationConfig);\r\n                },\r\n                onError: (err: TError) => {\r\n                    checkError(err);\r\n                    queryOptions?.onError?.(err);\r\n\r\n                    const notificationConfig =\r\n                        typeof errorNotification === \"function\"\r\n                            ? errorNotification(err, { ...config, ...metaData })\r\n                            : errorNotification;\r\n\r\n                    handleNotification(notificationConfig, {\r\n                        key: `${method}-notification`,\r\n                        message: translate(\r\n                            \"common:notifications.error\",\r\n                            { statusCode: err.statusCode },\r\n                            `Error (status code: ${err.statusCode})`,\r\n                        ),\r\n                        description: err.message,\r\n                        type: \"error\",\r\n                    });\r\n                },\r\n            },\r\n        );\r\n        return queryResponse;\r\n    } else {\r\n        throw Error(\"Not implemented custom on data provider.\");\r\n    }\r\n};\r\n","import { useMutation, UseMutationResult } from \"react-query\";\r\n\r\nimport { useDataProvider, useHandleNotification, useTranslate } from \"@hooks\";\r\nimport {\r\n    CreateResponse,\r\n    BaseRecord,\r\n    HttpError,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\n\r\ninterface UseCustomMutationConfig {\r\n    headers?: {};\r\n}\r\n\r\ntype useCustomMutationParams<TVariables> = {\r\n    url: string;\r\n    method: \"post\" | \"put\" | \"patch\" | \"delete\";\r\n    values: TVariables;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    config?: UseCustomMutationConfig;\r\n} & SuccessErrorNotification;\r\n\r\nexport type UseCustomMutationReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = UseMutationResult<\r\n    CreateResponse<TData>,\r\n    TError,\r\n    useCustomMutationParams<TVariables>,\r\n    unknown\r\n>;\r\n\r\n/**\r\n * `useCustomMutation` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for create mutations.\r\n *\r\n * It uses the `custom` method from the `dataProvider` which is passed to `<Refine>`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/data/useCustomMutation} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\n\r\nexport const useCustomMutation = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>(): UseCustomMutationReturnType<TData, TError, TVariables> => {\r\n    const handleNotification = useHandleNotification();\r\n    const dataProvider = useDataProvider();\r\n    const translate = useTranslate();\r\n\r\n    const mutation = useMutation<\r\n        CreateResponse<TData>,\r\n        TError,\r\n        useCustomMutationParams<TVariables>,\r\n        unknown\r\n    >(\r\n        ({\r\n            url,\r\n            method,\r\n            values,\r\n            metaData,\r\n            dataProviderName,\r\n            config,\r\n        }: useCustomMutationParams<TVariables>) => {\r\n            const { custom } = dataProvider(dataProviderName);\r\n\r\n            if (custom) {\r\n                return custom<TData>({\r\n                    url,\r\n                    method,\r\n                    payload: values,\r\n                    metaData,\r\n                    headers: { ...config?.headers },\r\n                });\r\n            }\r\n\r\n            throw Error(\"Not implemented custom on data provider.\");\r\n        },\r\n        {\r\n            onSuccess: (\r\n                data,\r\n                {\r\n                    successNotification: successNotificationFromProp,\r\n                    config,\r\n                    metaData,\r\n                },\r\n            ) => {\r\n                const notificationConfig =\r\n                    typeof successNotificationFromProp === \"function\"\r\n                        ? successNotificationFromProp(data, {\r\n                              ...config,\r\n                              ...metaData,\r\n                          })\r\n                        : successNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig);\r\n            },\r\n            onError: (\r\n                err: TError,\r\n                {\r\n                    errorNotification: errorNotificationFromProp,\r\n                    method,\r\n                    config,\r\n                    metaData,\r\n                },\r\n            ) => {\r\n                const notificationConfig =\r\n                    typeof errorNotificationFromProp === \"function\"\r\n                        ? errorNotificationFromProp(err, {\r\n                              ...config,\r\n                              ...metaData,\r\n                          })\r\n                        : errorNotificationFromProp;\r\n\r\n                handleNotification(notificationConfig, {\r\n                    key: `${method}-notification`,\r\n                    message: translate(\r\n                        \"common:notifications.error\",\r\n                        { statusCode: err.statusCode },\r\n                        `Error (status code: ${err.statusCode})`,\r\n                    ),\r\n                    description: err.message,\r\n                    type: \"error\",\r\n                });\r\n            },\r\n        },\r\n    );\r\n\r\n    return mutation;\r\n};\r\n","import { useCallback, useContext } from \"react\";\r\n\r\nimport { DataContext } from \"@contexts/data\";\r\nimport {\r\n    IDataContextProvider,\r\n    IDataMultipleContextProvider,\r\n} from \"../../interfaces\";\r\n\r\nexport const useDataProvider = (): ((\r\n    dataProviderName?: string,\r\n) => IDataContextProvider) => {\r\n    const context = useContext<IDataMultipleContextProvider>(DataContext);\r\n\r\n    const handleDataProvider = useCallback(\r\n        (dataProviderName?: string) => {\r\n            if (dataProviderName) {\r\n                const dataProvider = context[dataProviderName];\r\n                if (!dataProvider) {\r\n                    throw new Error(\r\n                        `\"${dataProviderName}\" Data provider not found`,\r\n                    );\r\n                }\r\n                return context[dataProviderName];\r\n            }\r\n            if (context.default) {\r\n                return context.default;\r\n            } else\r\n                throw new Error(\r\n                    `There is no \"default\" data provider. Please pass dataProviderName.`,\r\n                );\r\n        },\r\n        [context],\r\n    );\r\n\r\n    return handleDataProvider;\r\n};\r\n","import React from \"react\";\r\nimport { ReactNode } from \"react\";\r\n\r\nimport {\r\n    IDataContextProvider,\r\n    IDataMultipleContextProvider,\r\n} from \"../../interfaces\";\r\n\r\nexport const defaultDataProvider = () => {\r\n    return {\r\n        default: {\r\n            create: () => Promise.resolve({ data: { id: 1 } }),\r\n            createMany: () => Promise.resolve({ data: [] }),\r\n            deleteOne: () => Promise.resolve({ data: { id: 1 } }),\r\n            deleteMany: () => Promise.resolve({ data: [] }),\r\n            getList: () => Promise.resolve({ data: [], total: 0 }),\r\n            getMany: () => Promise.resolve({ data: [] }),\r\n            getOne: () => Promise.resolve({ data: { id: 1 } }),\r\n            update: () => Promise.resolve({ data: { id: 1 } }),\r\n            updateMany: () => Promise.resolve({ data: [] }),\r\n            custom: () => Promise.resolve({ data: {} }),\r\n            getApiUrl: () => \"\",\r\n        },\r\n    };\r\n};\r\n\r\nexport const DataContext = React.createContext<IDataMultipleContextProvider>(\r\n    defaultDataProvider() as IDataMultipleContextProvider,\r\n);\r\n\r\nexport const DataContextProvider: React.FC<\r\n    | IDataMultipleContextProvider\r\n    | (IDataContextProvider & {\r\n          children: ReactNode;\r\n      })\r\n> = ({ children, ...rest }) => {\r\n    let dataProviders;\r\n    if (\r\n        !rest.hasOwnProperty(\"updateMany\") ||\r\n        !rest.hasOwnProperty(\"createMany\")\r\n    ) {\r\n        dataProviders = rest as IDataMultipleContextProvider;\r\n    } else {\r\n        dataProviders = {\r\n            default: rest,\r\n        } as IDataMultipleContextProvider;\r\n    }\r\n    return (\r\n        <DataContext.Provider value={dataProviders}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    );\r\n};\r\n","import { useContext, useEffect } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport {\r\n    BaseKey,\r\n    CrudFilters,\r\n    CrudSorting,\r\n    ILiveContext,\r\n    IRefineContext,\r\n    LiveEvent,\r\n    LiveModeProps,\r\n    MetaDataQuery,\r\n    Pagination,\r\n} from \"../../../interfaces\";\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { queryKeys } from \"@definitions\";\r\n\r\nexport type UseResourceSubscriptionProps = {\r\n    channel: string;\r\n    params?: {\r\n        ids?: BaseKey[];\r\n        id?: BaseKey;\r\n        metaData?: MetaDataQuery;\r\n        pagination?: Pagination;\r\n        hasPagination?: boolean;\r\n        sort?: CrudSorting;\r\n        filters?: CrudFilters;\r\n        subscriptionType: \"useList\" | \"useOne\" | \"useMany\";\r\n        [key: string]: any;\r\n    };\r\n    types: LiveEvent[\"type\"][];\r\n    resource: string;\r\n    enabled?: boolean;\r\n} & LiveModeProps;\r\n\r\nexport type PublishType = {\r\n    (event: LiveEvent): void;\r\n};\r\n\r\nexport const useResourceSubscription = ({\r\n    resource,\r\n    params,\r\n    channel,\r\n    types,\r\n    enabled = true,\r\n    liveMode: liveModeFromProp,\r\n    onLiveEvent,\r\n}: UseResourceSubscriptionProps): void => {\r\n    const queryClient = useQueryClient();\r\n    const queryKey = queryKeys(resource);\r\n\r\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\r\n    const {\r\n        liveMode: liveModeFromContext,\r\n        onLiveEvent: onLiveEventContextCallback,\r\n    } = useContext<IRefineContext>(RefineContext);\r\n\r\n    const liveMode = liveModeFromProp ?? liveModeFromContext;\r\n\r\n    useEffect(() => {\r\n        let subscription: any;\r\n\r\n        if (liveMode && liveMode !== \"off\" && enabled) {\r\n            subscription = liveDataContext?.subscribe({\r\n                channel,\r\n                params: {\r\n                    resource,\r\n                    ...params,\r\n                },\r\n                types,\r\n                callback: (event) => {\r\n                    if (liveMode === \"auto\") {\r\n                        queryClient.invalidateQueries(queryKey.resourceAll);\r\n                    }\r\n\r\n                    onLiveEvent?.(event);\r\n                    onLiveEventContextCallback?.(event);\r\n                },\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if (subscription) {\r\n                liveDataContext?.unsubscribe(subscription);\r\n            }\r\n        };\r\n    }, [enabled]);\r\n};\r\n","import React from \"react\";\r\n\r\nimport { ILiveContext, ILiveContextProvider } from \"./ILiveContext\";\r\n\r\nexport const LiveContext = React.createContext<ILiveContext>(undefined);\r\n\r\nexport const LiveContextProvider: React.FC<ILiveContextProvider> = ({\r\n    liveProvider,\r\n    children,\r\n}) => {\r\n    return (\r\n        <LiveContext.Provider value={liveProvider}>\r\n            {children}\r\n        </LiveContext.Provider>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IRefineContext, IRefineContextProvider } from \"./IRefineContext\";\r\nimport { DefaultLayout } from \"@components/layoutWrapper/defaultLayout\";\r\n\r\nimport { LoginPage as DefaultLoginPage } from \"@components/pages\";\r\n\r\nexport const RefineContext = React.createContext<IRefineContext>({\r\n    hasDashboard: false,\r\n    mutationMode: \"pessimistic\",\r\n    warnWhenUnsavedChanges: false,\r\n    syncWithLocation: false,\r\n    undoableTimeout: 5000,\r\n    Title: undefined,\r\n    Sider: undefined,\r\n    Header: undefined,\r\n    Footer: undefined,\r\n    Layout: DefaultLayout,\r\n    OffLayoutArea: undefined,\r\n    liveMode: \"off\",\r\n    onLiveEvent: undefined,\r\n});\r\n\r\nexport const RefineContextProvider: React.FC<IRefineContextProvider> = ({\r\n    hasDashboard,\r\n    mutationMode,\r\n    warnWhenUnsavedChanges,\r\n    syncWithLocation,\r\n    undoableTimeout,\r\n    children,\r\n    DashboardPage,\r\n    Title,\r\n    Layout = DefaultLayout,\r\n    Header,\r\n    Sider,\r\n    Footer,\r\n    OffLayoutArea,\r\n    LoginPage = DefaultLoginPage,\r\n    catchAll,\r\n    liveMode = \"off\",\r\n    onLiveEvent,\r\n}) => {\r\n    return (\r\n        <RefineContext.Provider\r\n            value={{\r\n                hasDashboard,\r\n                mutationMode,\r\n                warnWhenUnsavedChanges,\r\n                syncWithLocation,\r\n                Title,\r\n                undoableTimeout,\r\n                Layout,\r\n                Header,\r\n                Sider,\r\n                Footer,\r\n                OffLayoutArea,\r\n                DashboardPage,\r\n                LoginPage,\r\n                catchAll,\r\n                liveMode,\r\n                onLiveEvent,\r\n            }}\r\n        >\r\n            {children}\r\n        </RefineContext.Provider>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { LayoutProps } from \"../../../interfaces\";\r\n\r\nexport const DefaultLayout: React.FC<LayoutProps> = ({ children }) => {\r\n    return <div>{children}</div>;\r\n};\r\n","import { useContext } from \"react\";\r\nimport { LiveModeProps, IRefineContext } from \"../../../interfaces\";\r\nimport { RefineContext } from \"@contexts/refine\";\r\n\r\nexport const useLiveMode = (\r\n    liveMode: LiveModeProps[\"liveMode\"],\r\n): LiveModeProps[\"liveMode\"] => {\r\n    const { liveMode: liveModeFromContext } =\r\n        useContext<IRefineContext>(RefineContext);\r\n\r\n    return liveMode ?? liveModeFromContext;\r\n};\r\n","import { useContext, useEffect } from \"react\";\r\n\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport {\r\n    BaseKey,\r\n    CrudFilters,\r\n    CrudSorting,\r\n    ILiveContext,\r\n    LiveEvent,\r\n    MetaDataQuery,\r\n    Pagination,\r\n} from \"../../../interfaces\";\r\n\r\nexport type UseSubscriptionProps = {\r\n    channel: string;\r\n    onLiveEvent: (event: LiveEvent) => void;\r\n    params?: {\r\n        ids?: BaseKey[];\r\n        id?: BaseKey;\r\n        metaData?: MetaDataQuery;\r\n        pagination?: Pagination;\r\n        hasPagination?: boolean;\r\n        sort?: CrudSorting;\r\n        filters?: CrudFilters;\r\n        subscriptionType?: \"useList\" | \"useOne\" | \"useMany\";\r\n        resource?: string;\r\n        [key: string]: any;\r\n    };\r\n    types?: LiveEvent[\"type\"][];\r\n    enabled?: boolean;\r\n};\r\n\r\nexport const useSubscription = ({\r\n    params,\r\n    channel,\r\n    types = [\"*\"],\r\n    enabled = true,\r\n    onLiveEvent,\r\n}: UseSubscriptionProps): void => {\r\n    const liveDataContext = useContext<ILiveContext>(LiveContext);\r\n\r\n    useEffect(() => {\r\n        let subscription: any;\r\n\r\n        if (enabled) {\r\n            subscription = liveDataContext?.subscribe({\r\n                channel,\r\n                params,\r\n                types,\r\n                callback: onLiveEvent,\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            if (subscription) {\r\n                liveDataContext?.unsubscribe(subscription);\r\n            }\r\n        };\r\n    }, [enabled]);\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport { ILiveContext } from \"../../../interfaces\";\r\n\r\nexport const usePublish: () => NonNullable<ILiveContext>[\"publish\"] = () => {\r\n    const liveContext = useContext<ILiveContext>(LiveContext);\r\n\r\n    return liveContext?.publish;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { ResourceContext, IResourceContext } from \"@contexts/resource\";\r\nimport { BaseKey, IResourceItem, ResourceRouterParams } from \"src/interfaces\";\r\nimport { useRouterContext, useResourceWithRoute } from \"@hooks\";\r\n\r\nexport type UseResourcePropsType = {\r\n    /**\r\n     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/pankod/refine/issues/1618\r\n     */\r\n    resourceName?: string;\r\n    resourceNameOrRouteName?: string;\r\n    recordItemId?: BaseKey;\r\n};\r\n\r\ntype UseResourceReturnType = {\r\n    resources: IResourceContext[\"resources\"];\r\n    resource: IResourceItem;\r\n    resourceName: string;\r\n    id?: BaseKey;\r\n};\r\n\r\n/**\r\n * `useResource` is used to get `resources` that are defined as property of the `<Refine>` component.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/resource/useResource} for more details.\r\n */\r\nexport const useResource = ({\r\n    resourceName: propResourceName,\r\n    resourceNameOrRouteName,\r\n    recordItemId,\r\n}: UseResourcePropsType = {}): UseResourceReturnType => {\r\n    const { resources } = useContext(ResourceContext);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const { useParams } = useRouterContext();\r\n\r\n    const params = useParams<ResourceRouterParams>();\r\n\r\n    const resource = resourceWithRoute(\r\n        resourceNameOrRouteName ?? params.resource,\r\n    );\r\n\r\n    const resourceName = propResourceName ?? resource.name;\r\n\r\n    const id = recordItemId ?? params.id;\r\n\r\n    return { resources, resource, resourceName, id };\r\n};\r\n","import React, { ReactNode } from \"react\";\r\n\r\nimport { IResourceContext } from \"./IResourceContext\";\r\n\r\nexport {\r\n    IResourceItem,\r\n    IResourceComponents,\r\n    IResourceComponentsProps,\r\n    IResourceContext,\r\n} from \"./IResourceContext\";\r\n\r\nexport const ResourceContext = React.createContext<IResourceContext>({\r\n    resources: [],\r\n});\r\n\r\nexport const ResourceContextProvider: React.FC<\r\n    IResourceContext & { children: ReactNode }\r\n> = ({ resources, children }) => {\r\n    return (\r\n        <ResourceContext.Provider value={{ resources }}>\r\n            {children}\r\n        </ResourceContext.Provider>\r\n    );\r\n};\r\n","import { useContext, useCallback } from \"react\";\r\nimport { ResourceContext } from \"@contexts/resource\";\r\nimport { IResourceItem } from \"../../../interfaces\";\r\n\r\nexport type UseResourceWithRouteReturnType = (route: string) => IResourceItem;\r\n\r\nexport const useResourceWithRoute = (): UseResourceWithRouteReturnType => {\r\n    const { resources } = useContext(ResourceContext);\r\n\r\n    const resourceWithRoute = useCallback(\r\n        (route: string) => {\r\n            const resource = resources.find((p) => p.route === route);\r\n\r\n            if (!resource) {\r\n                const resourceWithName = resources.find(\r\n                    (p) => p.name === route,\r\n                );\r\n                return (\r\n                    resourceWithName ??\r\n                    ({ name: route, route: route } as IResourceItem)\r\n                );\r\n            }\r\n            return resource;\r\n        },\r\n        [resources],\r\n    );\r\n\r\n    return resourceWithRoute;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { UndoableQueueContext } from \"@contexts/undoableQueue\";\r\nimport { IUndoableQueue, IUndoableQueueContext } from \"../../../interfaces\";\r\n\r\nexport type UseCancelNotificationType = () => {\r\n    notifications: IUndoableQueue[];\r\n    notificationDispatch: React.Dispatch<any>;\r\n};\r\n\r\nexport const useCancelNotification: UseCancelNotificationType = () => {\r\n    const { notifications, notificationDispatch } =\r\n        useContext<IUndoableQueueContext>(UndoableQueueContext);\r\n\r\n    return { notifications, notificationDispatch };\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { NotificationContext } from \"@contexts/notification\";\r\nimport { INotificationContext } from \"../../../interfaces\";\r\n\r\nexport const useNotification = (): INotificationContext => {\r\n    const { open, close } = useContext(NotificationContext);\r\n\r\n    return { open, close };\r\n};\r\n","import React, { createContext } from \"react\";\r\n\r\nimport { INotificationContext } from \"./INotificationContext\";\r\n\r\n/** @deprecated default value for notification context has no use and is an empty object.  */\r\nexport const defaultNotificationProvider: INotificationContext = {};\r\n\r\nexport const NotificationContext = createContext<INotificationContext>({});\r\n\r\nexport const NotificationContextProvider: React.FC<\r\n    INotificationContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ open, close, children }) => {\r\n    return (\r\n        <NotificationContext.Provider value={{ open, close }}>\r\n            {children}\r\n        </NotificationContext.Provider>\r\n    );\r\n};\r\n","import { useCallback } from \"react\";\r\n\r\nimport { OpenNotificationParams } from \"../../../interfaces\";\r\nimport { useNotification } from \"@hooks\";\r\n\r\nexport const useHandleNotification = (): typeof handleNotification => {\r\n    const { open } = useNotification();\r\n\r\n    const handleNotification = useCallback(\r\n        (\r\n            notification: OpenNotificationParams | false | undefined,\r\n            fallbackNotification?: OpenNotificationParams,\r\n        ) => {\r\n            if (notification !== false) {\r\n                if (notification) {\r\n                    open?.(notification);\r\n                } else if (fallbackNotification) {\r\n                    open?.(fallbackNotification);\r\n                }\r\n            }\r\n        },\r\n        [],\r\n    );\r\n\r\n    return handleNotification;\r\n};\r\n","import { useCallback, useContext } from \"react\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\n/**\r\n * If you need to change the locale at runtime, refine provides the `useSetLocale` hook.\r\n * It returns the changeLocale method from `i18nProvider` under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/translate/useSetLocale} for more details.\r\n */\r\nexport const useSetLocale = () => {\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    return useCallback((lang: string) => i18nProvider?.changeLocale(lang), []);\r\n};\r\n","import React from \"react\";\r\n\r\nimport { ITranslationContext } from \"../../interfaces\";\r\n\r\n/** @deprecated default value for translation context has no use and is an empty object.  */\r\nexport const defaultProvider: ITranslationContext = {};\r\n\r\nexport const TranslationContext = React.createContext<ITranslationContext>({});\r\n\r\nexport const TranslationContextProvider: React.FC<\r\n    ITranslationContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ children, i18nProvider }) => {\r\n    return (\r\n        <TranslationContext.Provider\r\n            value={{\r\n                i18nProvider: i18nProvider,\r\n            }}\r\n        >\r\n            {children}\r\n        </TranslationContext.Provider>\r\n    );\r\n};\r\n","import { useContext, useMemo } from \"react\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\n/**\r\n * If you need to translate the texts in your own components, refine provides the `useTranslate` hook.\r\n * It returns the translate method from `i18nProvider` under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/translate/useTranslate} for more details.\r\n */\r\nexport const useTranslate = () => {\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    const fn = useMemo(() => {\r\n        function translate(\r\n            key: string,\r\n            options?: any,\r\n            defaultMessage?: string,\r\n        ): string;\r\n        function translate(key: string, defaultMessage?: string): string;\r\n\r\n        function translate(\r\n            key: string,\r\n            options?: string | any,\r\n            defaultMessage?: string,\r\n        ) {\r\n            return (\r\n                i18nProvider?.translate(key, options, defaultMessage) ??\r\n                defaultMessage ??\r\n                (typeof options === \"string\" &&\r\n                typeof defaultMessage === \"undefined\"\r\n                    ? options\r\n                    : key)\r\n            );\r\n        }\r\n\r\n        return translate;\r\n    }, [i18nProvider]);\r\n\r\n    return fn;\r\n};\r\n","import { useContext, useCallback } from \"react\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\nexport type UseGetLocaleType = () => () => string | undefined;\r\n\r\n/**\r\n * If you need to know the current locale, refine provides the `useGetLocale` hook.\r\n * It returns the `getLocale` method from `i18nProvider` under the hood.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/translate/useGetLocale} for more details.\r\n */\r\nexport const useGetLocale: UseGetLocaleType = () => {\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    return useCallback(() => i18nProvider?.getLocale(), []);\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { IRefineContext } from \"../../interfaces\";\r\n\r\ntype UseMutationModeType = () => {\r\n    mutationMode: IRefineContext[\"mutationMode\"];\r\n    undoableTimeout: IRefineContext[\"undoableTimeout\"];\r\n};\r\n\r\n/**\r\n * Mutation mode determines which mode the mutation runs with.\r\n * Mutations can run under three different modes: `pessimistic`, `optimistic` and `undoable`.\r\n * Each mode corresponds to a different type of user experience.\r\n *\r\n * @see {@link https://refine.dev/docs/guides-and-concepts/mutation-mode} for more details.\r\n */\r\nexport const useMutationMode: UseMutationModeType = () => {\r\n    const { mutationMode, undoableTimeout } = useContext(RefineContext);\r\n\r\n    return { mutationMode, undoableTimeout };\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { UnsavedWarnContext } from \"@contexts/unsavedWarn\";\r\nimport { IRefineContext, IUnsavedWarnContext } from \"../../../interfaces\";\r\n\r\ntype UseWarnAboutChangeType = () => {\r\n    warnWhenUnsavedChanges: IRefineContext[\"warnWhenUnsavedChanges\"];\r\n    warnWhen: NonNullable<IUnsavedWarnContext[\"warnWhen\"]>;\r\n    setWarnWhen: NonNullable<IUnsavedWarnContext[\"setWarnWhen\"]>;\r\n};\r\n\r\n/**\r\n * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\r\n * To activate this feature, set the `warnWhenUnsavedChanges` to `true`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#warnwhenunsavedchanges} for more details.\r\n */\r\nexport const useWarnAboutChange: UseWarnAboutChangeType = () => {\r\n    const { warnWhenUnsavedChanges } = useContext(RefineContext);\r\n\r\n    const { warnWhen, setWarnWhen } = useContext(UnsavedWarnContext);\r\n\r\n    return {\r\n        warnWhenUnsavedChanges,\r\n        warnWhen: Boolean(warnWhen),\r\n        setWarnWhen: setWarnWhen ?? (() => undefined),\r\n    };\r\n};\r\n","import React, { ReactNode, useState } from \"react\";\r\n\r\nimport { IUnsavedWarnContext } from \"./IUnsavedWarnContext\";\r\n\r\nexport const UnsavedWarnContext = React.createContext<IUnsavedWarnContext>({});\r\n\r\nexport const UnsavedWarnContextProvider: React.FC<{ children: ReactNode }> = ({\r\n    children,\r\n}) => {\r\n    const [warnWhen, setWarnWhen] = useState(false);\r\n\r\n    return (\r\n        <UnsavedWarnContext.Provider value={{ warnWhen, setWarnWhen }}>\r\n            {children}\r\n        </UnsavedWarnContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { IRefineContext } from \"../../interfaces\";\r\n\r\ntype UseSyncWithLocationType = () => {\r\n    syncWithLocation: IRefineContext[\"syncWithLocation\"];\r\n};\r\n\r\n/**\r\n * List query parameter values can be edited manually by typing directly in the URL.\r\n * To activate this feature `syncWithLocation` needs to be set to `true`.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#syncwithlocation} for more details.\r\n */\r\nexport const useSyncWithLocation: UseSyncWithLocationType = () => {\r\n    const { syncWithLocation } = useContext(RefineContext);\r\n\r\n    return { syncWithLocation };\r\n};\r\n","import { useContext } from \"react\";\r\nimport { RefineContext } from \"@contexts/refine\";\r\nimport { TitleProps } from \"../../interfaces\";\r\n\r\n/**\r\n * `useTitle` returns a component that calls the `<Title>` passed to the `<Refine>`.\r\n * In this way, it becomes easier for us to access this component in various parts of the application.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/refine/useTitle} for more details.\r\n */\r\nexport const useTitle: () => React.FC<TitleProps> | undefined = () => {\r\n    const { Title } = useContext(RefineContext);\r\n\r\n    return Title;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { RefineContext } from \"@contexts/refine\";\r\n\r\nexport const useRefineContext = () => {\r\n    const {\r\n        Footer,\r\n        Header,\r\n        Layout,\r\n        OffLayoutArea,\r\n        Sider,\r\n        Title,\r\n        hasDashboard,\r\n        mutationMode,\r\n        syncWithLocation,\r\n        undoableTimeout,\r\n        warnWhenUnsavedChanges,\r\n        DashboardPage,\r\n        LoginPage,\r\n        catchAll,\r\n    } = useContext(RefineContext);\r\n\r\n    return {\r\n        Footer,\r\n        Header,\r\n        Layout,\r\n        OffLayoutArea,\r\n        Sider,\r\n        Title,\r\n        hasDashboard,\r\n        mutationMode,\r\n        syncWithLocation,\r\n        undoableTimeout,\r\n        warnWhenUnsavedChanges,\r\n        DashboardPage,\r\n        LoginPage,\r\n        catchAll,\r\n    };\r\n};\r\n","import { useState } from \"react\";\r\nimport {\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n    useDataProvider,\r\n} from \"@hooks\";\r\nimport {\r\n    ResourceRouterParams,\r\n    BaseRecord,\r\n    MapDataFn,\r\n    CrudSorting,\r\n    CrudFilters,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport { userFriendlyResourceName } from \"@definitions\";\r\nimport { ExportToCsv, Options } from \"export-to-csv-fix-source-map\";\r\n\r\ntype UseExportOptionsType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TVariables = any,\r\n> = {\r\n    resourceName?: string;\r\n    mapData?: MapDataFn<TData, TVariables>;\r\n    sorter?: CrudSorting;\r\n    filters?: CrudFilters;\r\n    maxItemCount?: number;\r\n    pageSize?: number;\r\n    exportOptions?: Options;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n    onError?: (error: any) => void;\r\n};\r\n\r\ntype UseExportReturnType = {\r\n    isLoading: boolean;\r\n    triggerExport: () => Promise<void>;\r\n};\r\n\r\n/**\r\n * `useExport` hook allows you to make your resources exportable.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useExport} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TVariables - Values for params.\r\n *\r\n */\r\nexport const useExport = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TVariables = any,\r\n>({\r\n    resourceName,\r\n    sorter,\r\n    filters,\r\n    maxItemCount,\r\n    pageSize = 20,\r\n    mapData = (item) => item as any,\r\n    exportOptions,\r\n    metaData,\r\n    dataProviderName,\r\n    onError,\r\n}: UseExportOptionsType<TData, TVariables> = {}): UseExportReturnType => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n    const dataProvider = useDataProvider();\r\n\r\n    const { useParams } = useRouterContext();\r\n\r\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\r\n    let { name: resource } = resourceWithRoute(routeResourceName);\r\n\r\n    if (resourceName) {\r\n        resource = resourceName;\r\n    }\r\n\r\n    const filename = `${userFriendlyResourceName(\r\n        resource,\r\n        \"plural\",\r\n    )}-${new Date().toLocaleString()}`;\r\n\r\n    const { getList } = dataProvider(dataProviderName);\r\n\r\n    const triggerExport = async () => {\r\n        setIsLoading(true);\r\n\r\n        let rawData: BaseRecord[] = [];\r\n\r\n        let current = 1;\r\n        let preparingData = true;\r\n        while (preparingData) {\r\n            try {\r\n                const { data, total } = await getList<TData>({\r\n                    resource,\r\n                    filters,\r\n                    sort: sorter,\r\n                    pagination: {\r\n                        current,\r\n                        pageSize,\r\n                    },\r\n                    metaData,\r\n                });\r\n\r\n                current++;\r\n\r\n                rawData.push(...data);\r\n\r\n                if (maxItemCount && rawData.length >= maxItemCount) {\r\n                    rawData = rawData.slice(0, maxItemCount);\r\n                    preparingData = false;\r\n                }\r\n\r\n                if (total === rawData.length) {\r\n                    preparingData = false;\r\n                }\r\n            } catch (error) {\r\n                setIsLoading(false);\r\n                preparingData = false;\r\n\r\n                onError?.(error);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        const csvExporter = new ExportToCsv({\r\n            filename,\r\n            useKeysAsHeaders: true,\r\n            ...exportOptions,\r\n        });\r\n\r\n        csvExporter.generateCsv(rawData.map(mapData as any));\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    return {\r\n        isLoading,\r\n        triggerExport,\r\n    };\r\n};\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { QueryObserverResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport {\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n    useWarnAboutChange,\r\n    useCreate,\r\n    useUpdate,\r\n    useRedirectionAfterSubmission,\r\n    useMutationMode,\r\n    useOne,\r\n} from \"@hooks\";\r\n\r\nimport {\r\n    BaseRecord,\r\n    CreateResponse,\r\n    GetOneResponse,\r\n    HttpError,\r\n    LiveModeProps,\r\n    ResourceRouterParams,\r\n    RedirectionTypes,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    UpdateResponse,\r\n    MutationMode,\r\n    BaseKey,\r\n    IQueryKeys,\r\n} from \"../../interfaces\";\r\nimport { UpdateParams, UseUpdateReturnType } from \"../data/useUpdate\";\r\nimport { UseCreateReturnType } from \"../data/useCreate\";\r\n\r\nexport type ActionParams = {\r\n    action?: \"edit\" | \"create\" | \"clone\";\r\n};\r\n\r\ntype ActionFormProps<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = {\r\n    onMutationSuccess?: (\r\n        data: CreateResponse<TData> | UpdateResponse<TData>,\r\n        variables: TVariables,\r\n        context: any,\r\n    ) => void;\r\n    onMutationError?: (\r\n        error: TError,\r\n        variables: TVariables,\r\n        context: any,\r\n    ) => void;\r\n    redirect?: RedirectionTypes;\r\n    resource?: string;\r\n    id?: BaseKey;\r\n    metaData?: MetaDataQuery;\r\n    mutationMode?: MutationMode;\r\n    undoableTimeout?: number;\r\n    dataProviderName?: string;\r\n    invalidates?: Array<keyof IQueryKeys>;\r\n    queryOptions?: UseQueryOptions<GetOneResponse<TData>, HttpError>;\r\n} & SuccessErrorNotification &\r\n    ActionParams &\r\n    LiveModeProps;\r\n\r\nexport type UseFormProps<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = ActionParams & ActionFormProps<TData, TError, TVariables> & LiveModeProps;\r\n\r\nexport type UseFormReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n> = {\r\n    id?: BaseKey;\r\n    setId: Dispatch<SetStateAction<BaseKey | undefined>>;\r\n\r\n    queryResult?: QueryObserverResult<GetOneResponse<TData>>;\r\n    mutationResult:\r\n        | UseUpdateReturnType<TData, TError, TVariables>\r\n        | UseCreateReturnType<TData, TError, TVariables>;\r\n    formLoading: boolean;\r\n    onFinish: (\r\n        values: TVariables,\r\n    ) => Promise<CreateResponse<TData> | UpdateResponse<TData> | void>;\r\n    redirect: (\r\n        redirect: \"show\" | \"list\" | \"edit\" | \"create\" | false,\r\n        idFromFunction?: BaseKey | undefined,\r\n    ) => void;\r\n};\r\n\r\n/**\r\n * `useForm` is used to manage forms. It uses Ant Design {@link https://ant.design/components/form/ Form} data scope management under the hood and returns the required props for managing the form actions.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/form/useForm} for more details.\r\n *\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for params. default `{}`\r\n *\r\n *\r\n */\r\nexport const useForm = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = {},\r\n>({\r\n    action: actionFromProps,\r\n    resource: resourceFromProps,\r\n    id: idFromProps,\r\n    onMutationSuccess,\r\n    onMutationError,\r\n    redirect: redirectFromProps,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    mutationMode: mutationModeProp,\r\n    liveMode,\r\n    onLiveEvent,\r\n    liveParams,\r\n    undoableTimeout,\r\n    dataProviderName,\r\n    invalidates,\r\n    queryOptions,\r\n}: UseFormProps<TData, TError, TVariables> = {}): UseFormReturnType<\r\n    TData,\r\n    TError,\r\n    TVariables\r\n> => {\r\n    const { useParams } = useRouterContext();\r\n    const {\r\n        resource: resourceFromRoute,\r\n        action: actionFromRoute,\r\n        id: idFromParams,\r\n    } = useParams<ResourceRouterParams>();\r\n\r\n    const defaultId =\r\n        !resourceFromProps || resourceFromProps === resourceFromRoute\r\n            ? idFromProps ?? idFromParams\r\n            : idFromProps;\r\n\r\n    // id state is needed to determine selected record in a context for example useModal\r\n    const [id, setId] = React.useState<BaseKey | undefined>(defaultId);\r\n\r\n    const resourceName = resourceFromProps ?? resourceFromRoute;\r\n    const action = actionFromProps ?? actionFromRoute ?? \"create\";\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n    const resource = resourceWithRoute(resourceName);\r\n\r\n    const { mutationMode: mutationModeContext } = useMutationMode();\r\n    const mutationMode = mutationModeProp ?? mutationModeContext;\r\n\r\n    const isCreate = action === \"create\";\r\n    const isEdit = action === \"edit\";\r\n    const isClone = action === \"clone\";\r\n\r\n    const redirect = redirectFromProps ?? \"list\";\r\n\r\n    const enableQuery = id !== undefined && (isEdit || isClone);\r\n\r\n    const queryResult = useOne<TData>({\r\n        resource: resource.name,\r\n        id: id ?? \"\",\r\n        queryOptions: {\r\n            enabled: enableQuery,\r\n            ...queryOptions,\r\n        },\r\n        liveMode,\r\n        onLiveEvent,\r\n        liveParams,\r\n        metaData,\r\n        dataProviderName,\r\n    });\r\n\r\n    const { isFetching: isFetchingQuery } = queryResult;\r\n\r\n    const mutationResultCreate = useCreate<TData, TError, TVariables>();\r\n    const { mutate: mutateCreate, isLoading: isLoadingCreate } =\r\n        mutationResultCreate;\r\n\r\n    const mutationResultUpdate = useUpdate<TData, TError, TVariables>();\r\n    const { mutate: mutateUpdate, isLoading: isLoadingUpdate } =\r\n        mutationResultUpdate;\r\n\r\n    const { setWarnWhen } = useWarnAboutChange();\r\n\r\n    const handleSubmitWithRedirect = useRedirectionAfterSubmission();\r\n\r\n    const onFinishCreate = async (values: TVariables) => {\r\n        setWarnWhen(false);\r\n\r\n        const onSuccess = (id?: BaseKey) => {\r\n            handleSubmitWithRedirect({\r\n                redirect,\r\n                resource,\r\n                id,\r\n            });\r\n        };\r\n\r\n        if (mutationMode !== \"pessimistic\") {\r\n            setTimeout(() => {\r\n                onSuccess();\r\n            });\r\n        }\r\n\r\n        return new Promise<CreateResponse<TData> | void>((resolve, reject) => {\r\n            if (mutationMode !== \"pessimistic\") {\r\n                resolve();\r\n            }\r\n            return mutateCreate(\r\n                {\r\n                    values,\r\n                    resource: resource.name,\r\n                    successNotification,\r\n                    errorNotification,\r\n                    metaData,\r\n                    dataProviderName,\r\n                    invalidates,\r\n                },\r\n                {\r\n                    onSuccess: (data, _, context) => {\r\n                        if (onMutationSuccess) {\r\n                            onMutationSuccess(data, values, context);\r\n                        }\r\n\r\n                        const responseId = data?.data?.id;\r\n\r\n                        onSuccess(responseId);\r\n\r\n                        resolve(data);\r\n                    },\r\n                    onError: (error: TError, _, context) => {\r\n                        if (onMutationError) {\r\n                            return onMutationError(error, values, context);\r\n                        }\r\n                        reject();\r\n                    },\r\n                },\r\n            );\r\n        });\r\n    };\r\n\r\n    const onFinishUpdate = async (values: TVariables) => {\r\n        setWarnWhen(false);\r\n\r\n        const variables: UpdateParams<TVariables> = {\r\n            id: id ?? \"\",\r\n            values,\r\n            resource: resource.name,\r\n            mutationMode,\r\n            undoableTimeout,\r\n            successNotification,\r\n            errorNotification,\r\n            metaData,\r\n            dataProviderName,\r\n            invalidates,\r\n        };\r\n\r\n        const onSuccess = () => {\r\n            // If it is in modal mode set it to undefined. Otherwise set it to current id from route.\r\n            setId(defaultId);\r\n            handleSubmitWithRedirect({\r\n                redirect,\r\n                resource,\r\n                id,\r\n            });\r\n        };\r\n\r\n        // setWarnWhen is set to \"false\" at the start of the mutation. With the help of setTimeout we guarantee that the value false is set.\r\n        if (mutationMode !== \"pessimistic\") {\r\n            setTimeout(() => {\r\n                onSuccess();\r\n            });\r\n        }\r\n\r\n        // setTimeout is required to make onSuccess e.g. callbacks to work if component unmounts i.e. on route change\r\n        return new Promise<UpdateResponse<TData> | void>((resolve, reject) => {\r\n            if (mutationMode !== \"pessimistic\") {\r\n                resolve();\r\n            }\r\n            return setTimeout(() => {\r\n                mutateUpdate(variables, {\r\n                    onSuccess: (data, _, context) => {\r\n                        if (onMutationSuccess) {\r\n                            onMutationSuccess(data, values, context);\r\n                        }\r\n\r\n                        if (mutationMode === \"pessimistic\") {\r\n                            onSuccess();\r\n                        }\r\n\r\n                        resolve(data);\r\n                    },\r\n                    onError: (error: TError, _, context) => {\r\n                        if (onMutationError) {\r\n                            return onMutationError(error, values, context);\r\n                        }\r\n                        reject();\r\n                    },\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    const createResult = {\r\n        formLoading: isFetchingQuery || isLoadingCreate,\r\n        mutationResult: mutationResultCreate,\r\n        onFinish: onFinishCreate,\r\n    };\r\n\r\n    const editResult = {\r\n        formLoading: isFetchingQuery || isLoadingUpdate,\r\n        mutationResult: mutationResultUpdate,\r\n        onFinish: onFinishUpdate,\r\n    };\r\n\r\n    const result = isCreate || isClone ? createResult : editResult;\r\n\r\n    return {\r\n        ...result,\r\n        queryResult,\r\n        id,\r\n        setId,\r\n        redirect: (redirect, idFromFunction?: BaseKey | undefined) => {\r\n            handleSubmitWithRedirect({\r\n                redirect:\r\n                    redirect !== undefined\r\n                        ? redirect\r\n                        : isEdit\r\n                        ? \"list\"\r\n                        : \"edit\",\r\n                resource,\r\n                id: idFromFunction ?? id,\r\n            });\r\n        },\r\n    };\r\n};\r\n","import { useCallback } from \"react\";\r\n\r\nimport { BaseKey, IResourceItem } from \"../../interfaces\";\r\nimport { useNavigation } from \"@hooks\";\r\n\r\nexport type UseRedirectionAfterSubmissionType = () => (options: {\r\n    redirect: \"show\" | \"list\" | \"edit\" | \"create\" | false;\r\n    resource: IResourceItem;\r\n    id?: BaseKey;\r\n}) => void;\r\n\r\nexport const useRedirectionAfterSubmission: UseRedirectionAfterSubmissionType =\r\n    () => {\r\n        const { show, edit, list, create } = useNavigation();\r\n\r\n        const handleSubmitWithRedirect = useCallback(\r\n            ({\r\n                redirect,\r\n                resource,\r\n                id,\r\n            }: {\r\n                redirect: \"show\" | \"list\" | \"edit\" | \"create\" | false;\r\n                resource: IResourceItem;\r\n                id?: BaseKey;\r\n            }) => {\r\n                if (redirect && resource.route) {\r\n                    if (resource.canShow && redirect === \"show\" && id) {\r\n                        return show(resource.route, id);\r\n                    }\r\n\r\n                    if (resource.canEdit && redirect === \"edit\" && id) {\r\n                        return edit(resource.route, id);\r\n                    }\r\n\r\n                    if (resource.canCreate && redirect === \"create\") {\r\n                        return create(resource.route);\r\n                    }\r\n\r\n                    return list(resource.route, \"push\");\r\n                } else {\r\n                    return;\r\n                }\r\n            },\r\n            [],\r\n        );\r\n\r\n        return handleSubmitWithRedirect;\r\n    };\r\n","import { useResourceWithRoute, useRouterContext } from \"@hooks\";\r\nimport { BaseKey } from \"../../interfaces\";\r\n\r\nexport type HistoryType = \"push\" | \"replace\";\r\n\r\n/**\r\n * `refine` uses {@link https://reactrouter.com/web/api/Hooks `React Router`} and comes with all redirects out of the box.\r\n * It allows you to manage your routing operations in refine.\r\n * Using this hook, you can manage all the routing operations of your application very easily.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/navigation/useNavigation} for more details.\r\n */\r\nexport const useNavigation = () => {\r\n    const { useHistory } = useRouterContext();\r\n    const history = useHistory();\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const handleUrl = (url: string, type: HistoryType = \"push\") => {\r\n        type === \"push\" ? history.push(url) : history.replace(url);\r\n    };\r\n\r\n    const createUrl = (resource: string) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        return `/${resourceName.route}/create`;\r\n    };\r\n\r\n    const editUrl = (resource: string, id: BaseKey) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        const encodedId = encodeURIComponent(id);\r\n\r\n        return `/${resourceName.route}/edit/${encodedId}`;\r\n    };\r\n\r\n    const cloneUrl = (resource: string, id: BaseKey) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        const encodedId = encodeURIComponent(id);\r\n        return `/${resourceName.route}/clone/${encodedId}`;\r\n    };\r\n\r\n    const showUrl = (resource: string, id: BaseKey) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        const encodedId = encodeURIComponent(id);\r\n        return `/${resourceName.route}/show/${encodedId}`;\r\n    };\r\n\r\n    const listUrl = (resource: string) => {\r\n        const resourceName = resourceWithRoute(resource);\r\n        return `/${resourceName.route}`;\r\n    };\r\n\r\n    const create = (resource: string, type: HistoryType = \"push\") => {\r\n        handleUrl(createUrl(resource), type);\r\n    };\r\n\r\n    const edit = (\r\n        resource: string,\r\n        id: BaseKey,\r\n        type: HistoryType = \"push\",\r\n    ) => {\r\n        handleUrl(editUrl(resource, id), type);\r\n    };\r\n\r\n    const clone = (\r\n        resource: string,\r\n        id: BaseKey,\r\n        type: HistoryType = \"push\",\r\n    ) => {\r\n        handleUrl(cloneUrl(resource, id), type);\r\n    };\r\n\r\n    const show = (\r\n        resource: string,\r\n        id: BaseKey,\r\n        type: HistoryType = \"push\",\r\n    ) => {\r\n        handleUrl(showUrl(resource, id), type);\r\n    };\r\n\r\n    const list = (resource: string, type: HistoryType = \"push\") => {\r\n        handleUrl(listUrl(resource), type);\r\n    };\r\n\r\n    const push = (path: string, state?: unknown) => {\r\n        history.push(path, state);\r\n    };\r\n\r\n    const replace = (path: string, state?: unknown) => {\r\n        history.replace(path, state);\r\n    };\r\n\r\n    const goBack = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    return {\r\n        create,\r\n        createUrl,\r\n        edit,\r\n        editUrl,\r\n        clone,\r\n        cloneUrl,\r\n        show,\r\n        showUrl,\r\n        list,\r\n        listUrl,\r\n        push,\r\n        replace,\r\n        goBack,\r\n    };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { QueryObserverResult } from \"react-query\";\r\n\r\nimport { useOne, useResourceWithRoute, useRouterContext } from \"@hooks\";\r\n\r\nimport {\r\n    ResourceRouterParams,\r\n    BaseRecord,\r\n    GetOneResponse,\r\n    SuccessErrorNotification,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    BaseKey,\r\n} from \"../../interfaces\";\r\n\r\nexport type useShowReturnType<TData extends BaseRecord = BaseRecord> = {\r\n    queryResult: QueryObserverResult<GetOneResponse<TData>>;\r\n    showId?: BaseKey;\r\n    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;\r\n};\r\n\r\nexport type useShowProps = {\r\n    resource?: string;\r\n    id?: BaseKey;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & LiveModeProps &\r\n    SuccessErrorNotification;\r\n\r\n/**\r\n * `useShow` hook allows you to fetch the desired record.\r\n * It uses `getOne` method as query function from the dataProvider that is\r\n * passed to {@link https://refine.dev/docs/api-references/components/refine-config `<Refine>`}.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/show/useShow} for more details.\r\n */\r\nexport const useShow = <TData extends BaseRecord = BaseRecord>({\r\n    resource: resourceFromProp,\r\n    id,\r\n    successNotification,\r\n    errorNotification,\r\n    metaData,\r\n    liveMode,\r\n    onLiveEvent,\r\n    dataProviderName,\r\n}: useShowProps = {}): useShowReturnType<TData> => {\r\n    const { useParams } = useRouterContext();\r\n\r\n    const { resource: routeResourceName, id: idFromRoute } =\r\n        useParams<ResourceRouterParams>();\r\n\r\n    const defaultId =\r\n        !resourceFromProp || resourceFromProp === routeResourceName\r\n            ? id ?? idFromRoute\r\n            : id;\r\n\r\n    const [showId, setShowId] = useState<BaseKey | undefined>(defaultId);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\r\n\r\n    const queryResult = useOne<TData>({\r\n        resource: resource.name,\r\n        id: showId ?? \"\",\r\n        queryOptions: {\r\n            enabled: showId !== undefined,\r\n        },\r\n        successNotification,\r\n        errorNotification,\r\n        metaData,\r\n        liveMode,\r\n        onLiveEvent,\r\n        dataProviderName,\r\n    });\r\n\r\n    return {\r\n        queryResult,\r\n        showId,\r\n        setShowId,\r\n    };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { parse, ParseConfig } from \"papaparse\";\r\nimport chunk from \"lodash/chunk\";\r\n\r\nimport {\r\n    useCreate,\r\n    useCreateMany,\r\n    useResourceWithRoute,\r\n    useRouterContext,\r\n} from \"@hooks\";\r\nimport {\r\n    MapDataFn,\r\n    BaseRecord,\r\n    HttpError,\r\n    ResourceRouterParams,\r\n    MetaDataQuery,\r\n} from \"../../interfaces\";\r\nimport { importCSVMapper } from \"@definitions\";\r\nimport { UseCreateReturnType } from \"../../hooks/data/useCreate\";\r\nimport { UseCreateManyReturnType } from \"../../hooks/data/useCreateMany\";\r\n\r\nexport type ImportSuccessResult<TVariables, TData> = {\r\n    request: TVariables[];\r\n    type: \"success\";\r\n    response: TData[];\r\n};\r\n\r\nexport type ImportErrorResult<TVariables> = {\r\n    request: TVariables[];\r\n    type: \"error\";\r\n    response: HttpError[];\r\n};\r\n\r\nexport type OnFinishParams<TVariables, TData> = {\r\n    succeeded: ImportSuccessResult<TVariables, TData>[];\r\n    errored: ImportErrorResult<TVariables>[];\r\n};\r\n\r\nexport type OnProgressParams = {\r\n    totalAmount: number;\r\n    processedAmount: number;\r\n};\r\n\r\nexport type ImportOptions<\r\n    TItem,\r\n    TVariables = any,\r\n    TData extends BaseRecord = BaseRecord,\r\n> = {\r\n    resourceName?: string;\r\n    mapData?: MapDataFn<TItem, TVariables>;\r\n    paparseOptions?: ParseConfig;\r\n    batchSize?: number;\r\n    onFinish?: (results: OnFinishParams<TVariables, TData>) => void;\r\n    metaData?: MetaDataQuery;\r\n    onProgress?: (onProgressParams: OnProgressParams) => void;\r\n    dataProviderName?: string;\r\n};\r\n\r\nexport type CreatedValuesType<TVariables, TData> =\r\n    | ImportSuccessResult<TVariables, TData>\r\n    | ImportErrorResult<TVariables>;\r\n\r\nexport type HandleChangeType<TVariables, TData> = (onChangeParams: {\r\n    file: Partial<File>;\r\n}) => Promise<CreatedValuesType<TVariables, TData>[]>;\r\n\r\nexport type UseImportInputPropsType = {\r\n    type: \"file\";\r\n    accept: string;\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nexport type UseImportReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TVariables = {},\r\n    TError extends HttpError = HttpError,\r\n> = {\r\n    inputProps: UseImportInputPropsType;\r\n    mutationResult:\r\n        | UseCreateReturnType<TData, TError, TVariables>\r\n        | UseCreateManyReturnType<TData, TError, TVariables>;\r\n    isLoading: boolean;\r\n    handleChange: HandleChangeType<TVariables, TData>;\r\n};\r\n\r\n/**\r\n * `useImport` hook allows you to handle your csv import logic easily.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/import-export/useImport} for more details.\r\n *\r\n * @typeParam TItem - Interface of parsed csv data\r\n * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}\r\n * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}\r\n * @typeParam TVariables - Values for mutation function\r\n *\r\n */\r\nexport const useImport = <\r\n    TItem extends unknown = any,\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n    TVariables = any,\r\n>({\r\n    resourceName,\r\n    mapData = (item) => item as unknown as TVariables,\r\n    paparseOptions,\r\n    batchSize = Number.MAX_SAFE_INTEGER,\r\n    onFinish,\r\n    metaData,\r\n    onProgress,\r\n}: ImportOptions<TItem, TVariables, TData> = {}): UseImportReturnType<\r\n    TData,\r\n    TVariables,\r\n    TError\r\n> => {\r\n    const [processedAmount, setProcessedAmount] = useState<number>(0);\r\n    const [totalAmount, setTotalAmount] = useState<number>(0);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const resourceWithRoute = useResourceWithRoute();\r\n    const { useParams } = useRouterContext();\r\n\r\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\r\n    const { name: resource } = resourceWithRoute(\r\n        resourceName ?? routeResourceName,\r\n    );\r\n\r\n    const createMany = useCreateMany<TData, TError, TVariables>();\r\n    const create = useCreate<TData, TError, TVariables>();\r\n\r\n    let mutationResult:\r\n        | UseCreateReturnType<TData, TError, TVariables>\r\n        | UseCreateManyReturnType<TData, TError, TVariables>;\r\n\r\n    if (batchSize === 1) {\r\n        mutationResult = create;\r\n    } else {\r\n        mutationResult = createMany;\r\n    }\r\n\r\n    const handleCleanup = () => {\r\n        setTotalAmount(0);\r\n        setProcessedAmount(0);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const handleFinish = (\r\n        createdValues: CreatedValuesType<TVariables, TData>[],\r\n    ) => {\r\n        const result = {\r\n            succeeded: createdValues.filter(\r\n                (item) => item.type === \"success\",\r\n            ) as unknown as ImportSuccessResult<TVariables, TData>[],\r\n            errored: createdValues.filter(\r\n                (item) => item.type === \"error\",\r\n            ) as unknown as ImportErrorResult<TVariables>[],\r\n        };\r\n\r\n        onFinish?.(result);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        onProgress?.({ totalAmount, processedAmount });\r\n    }, [totalAmount, processedAmount]);\r\n\r\n    const handleChange: HandleChangeType<TVariables, TData> = ({ file }) => {\r\n        handleCleanup();\r\n        return new Promise<CreatedValuesType<TVariables, TData>[]>(\r\n            (resolve) => {\r\n                setIsLoading(true);\r\n                parse(file as any, {\r\n                    complete: async ({ data }: { data: unknown[][] }) => {\r\n                        const values = importCSVMapper(data, mapData);\r\n\r\n                        setTotalAmount(values.length);\r\n                        if (batchSize === 1) {\r\n                            const createdValues = await Promise.all(\r\n                                values\r\n                                    .map((value) => {\r\n                                        const response = create.mutateAsync({\r\n                                            resource,\r\n                                            values: value,\r\n                                            successNotification: false,\r\n                                            errorNotification: false,\r\n                                            metaData,\r\n                                        });\r\n\r\n                                        return { response, value };\r\n                                    })\r\n                                    .map(({ response, value }) =>\r\n                                        response\r\n                                            .then(({ data }) => {\r\n                                                setProcessedAmount(\r\n                                                    (currentAmount) => {\r\n                                                        return (\r\n                                                            currentAmount + 1\r\n                                                        );\r\n                                                    },\r\n                                                );\r\n\r\n                                                return {\r\n                                                    response: [data],\r\n                                                    type: \"success\",\r\n                                                    request: [value],\r\n                                                } as ImportSuccessResult<\r\n                                                    TVariables,\r\n                                                    TData\r\n                                                >;\r\n                                            })\r\n                                            .catch(\r\n                                                (error: HttpError) =>\r\n                                                    ({\r\n                                                        response: [error],\r\n                                                        type: \"error\",\r\n                                                        request: [value],\r\n                                                    } as ImportErrorResult<TVariables>),\r\n                                            ),\r\n                                    ),\r\n                            );\r\n                            resolve(createdValues);\r\n                        } else {\r\n                            const createdValues = await Promise.all(\r\n                                chunk(values, batchSize)\r\n                                    .map((batch) => {\r\n                                        return {\r\n                                            response: createMany.mutateAsync({\r\n                                                resource,\r\n                                                values: batch,\r\n                                                successNotification: false,\r\n                                                errorNotification: false,\r\n                                                metaData,\r\n                                            }),\r\n                                            currentBatchLength: batch.length,\r\n                                            value: batch,\r\n                                        };\r\n                                    })\r\n                                    .map(\r\n                                        ({\r\n                                            response,\r\n                                            value,\r\n                                            currentBatchLength,\r\n                                        }) =>\r\n                                            response\r\n                                                .then((response) => {\r\n                                                    setProcessedAmount(\r\n                                                        (currentAmount) => {\r\n                                                            return (\r\n                                                                currentAmount +\r\n                                                                currentBatchLength\r\n                                                            );\r\n                                                        },\r\n                                                    );\r\n\r\n                                                    return {\r\n                                                        response: response.data,\r\n                                                        type: \"success\",\r\n                                                        request: value,\r\n                                                    } as ImportSuccessResult<\r\n                                                        TVariables,\r\n                                                        TData\r\n                                                    >;\r\n                                                })\r\n                                                .catch(\r\n                                                    (error: HttpError) =>\r\n                                                        ({\r\n                                                            response: [error],\r\n                                                            type: \"error\",\r\n                                                            request: value,\r\n                                                        } as ImportErrorResult<TVariables>),\r\n                                                ),\r\n                                    ),\r\n                            );\r\n\r\n                            resolve(createdValues);\r\n                        }\r\n                    },\r\n\r\n                    ...paparseOptions,\r\n                });\r\n            },\r\n        ).then((createdValues) => {\r\n            handleFinish(createdValues);\r\n            return createdValues;\r\n        });\r\n    };\r\n\r\n    return {\r\n        inputProps: {\r\n            type: \"file\",\r\n            accept: \".csv\",\r\n            onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\r\n                if (event.target.files && event.target.files.length > 0) {\r\n                    handleChange({ file: event.target.files[0] });\r\n                }\r\n            },\r\n        },\r\n        mutationResult,\r\n        isLoading,\r\n        handleChange,\r\n    };\r\n};\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport type useModalReturnType = {\r\n    visible: boolean;\r\n    show: () => void;\r\n    close: () => void;\r\n};\r\n\r\nexport type useModalProps = {\r\n    defaultVisible?: boolean;\r\n};\r\n\r\nexport const useModal = ({\r\n    defaultVisible = false,\r\n}: useModalProps = {}): useModalReturnType => {\r\n    const [visible, setVisible] = useState(defaultVisible);\r\n\r\n    const show = useCallback(() => setVisible(true), [visible]);\r\n    const close = useCallback(() => setVisible(false), [visible]);\r\n\r\n    return {\r\n        visible,\r\n        show,\r\n        close,\r\n    };\r\n};\r\n","import { useContext } from \"react\";\r\nimport { RouterContext } from \"@contexts/router\";\r\n\r\nexport const useRouterContext = () => {\r\n    const { useHistory, useLocation, useParams, Prompt, Link, routes } =\r\n        useContext(RouterContext);\r\n\r\n    return {\r\n        useHistory,\r\n        useLocation,\r\n        useParams,\r\n        Prompt,\r\n        Link,\r\n        routes,\r\n    };\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IRouterContext } from \"../../interfaces\";\r\n\r\nexport const defaultProvider: IRouterContext = {\r\n    useHistory: () => false,\r\n    useLocation: () => false,\r\n    useParams: () => ({} as any),\r\n    Prompt: () => null,\r\n    Link: () => null,\r\n};\r\n\r\nexport const RouterContext =\r\n    React.createContext<IRouterContext>(defaultProvider);\r\n\r\nexport const RouterContextProvider: React.FC<\r\n    IRouterContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({\r\n    children,\r\n    useHistory,\r\n    useLocation,\r\n    useParams,\r\n    Prompt,\r\n    Link,\r\n    routes,\r\n}) => {\r\n    return (\r\n        <RouterContext.Provider\r\n            value={{\r\n                useHistory,\r\n                useLocation,\r\n                useParams,\r\n                Prompt,\r\n                Link,\r\n                routes,\r\n            }}\r\n        >\r\n            {children}\r\n        </RouterContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport { AccessControlContext } from \"@contexts/accessControl\";\r\nimport { CanParams, CanReturnType } from \"../../../interfaces\";\r\n\r\nexport type UseCanProps = CanParams & {\r\n    queryOptions?: UseQueryOptions<CanReturnType>;\r\n};\r\n\r\n/**\r\n * `useCan` uses the `can` as the query function for `react-query`'s {@link https://react-query.tanstack.com/guides/queries `useQuery`}. It takes the parameters that `can` takes. It can also be configured with `queryOptions` for `useQuery`. Returns the result of `useQuery`.\r\n * @see {@link https://refine.dev/docs/core/hooks/accessControl/useCan} for more details.\r\n *\r\n * @typeParam CanParams {@link https://refine.dev/docs/core/interfaceReferences#canparams}\r\n * @typeParam CanReturnType {@link https://refine.dev/docs/core/interfaceReferences#canreturntype}\r\n *\r\n */\r\nexport const useCan = ({\r\n    action,\r\n    resource,\r\n    params,\r\n    queryOptions,\r\n}: UseCanProps): UseQueryResult<CanReturnType> => {\r\n    const { can } = useContext(AccessControlContext);\r\n\r\n    const queryResponse = useQuery<CanReturnType>(\r\n        [\"useCan\", { action, resource, params }],\r\n        // Enabled check for `can` is enough to be sure that it's defined in the query function but TS is not smart enough to know that.\r\n        () => can?.({ action, resource, params }) ?? { can: true },\r\n        {\r\n            enabled: typeof can !== \"undefined\",\r\n            ...queryOptions,\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return typeof can === \"undefined\"\r\n        ? ({ data: { can: true } } as typeof queryResponse)\r\n        : queryResponse;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IAccessControlContext } from \"./IAccessControlContext\";\r\n\r\n/** @deprecated default value for access control context has no use and is an empty object. */\r\nexport const defaultAccessControlContext: IAccessControlContext = {};\r\n\r\nexport const AccessControlContext = React.createContext<IAccessControlContext>(\r\n    {},\r\n);\r\n\r\nexport const AccessControlContextProvider: React.FC<\r\n    IAccessControlContext & {\r\n        children?: React.ReactNode;\r\n    }\r\n> = ({ can, children }) => {\r\n    return (\r\n        <AccessControlContext.Provider value={{ can }}>\r\n            {children}\r\n        </AccessControlContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { AccessControlContext } from \"@contexts/accessControl\";\r\nimport { IAccessControlContext } from \"../../interfaces\";\r\n\r\nexport const useCanWithoutCache = (): IAccessControlContext => {\r\n    const { can } = useContext(AccessControlContext);\r\n\r\n    return { can };\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { QueryObserverResult, UseQueryOptions } from \"react-query\";\r\nimport uniqBy from \"lodash/uniqBy\";\r\nimport debounce from \"lodash/debounce\";\r\n\r\nimport { useList, useMany } from \"@hooks\";\r\nimport {\r\n    CrudSorting,\r\n    Option,\r\n    BaseRecord,\r\n    GetManyResponse,\r\n    GetListResponse,\r\n    CrudFilters,\r\n    SuccessErrorNotification,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n    BaseKey,\r\n} from \"../../interfaces\";\r\n\r\nexport type UseSelectProps<TData, TError> = {\r\n    resource: string;\r\n    optionLabel?: string;\r\n    optionValue?: string;\r\n    sort?: CrudSorting;\r\n    filters?: CrudFilters;\r\n    defaultValue?: BaseKey | BaseKey[];\r\n    debounce?: number;\r\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\r\n    fetchSize?: number;\r\n    defaultValueQueryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;\r\n    onSearch?: (value: string) => CrudFilters;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\nexport type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {\r\n    queryResult: QueryObserverResult<GetListResponse<TData>>;\r\n    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;\r\n    onSearch: (value: string | undefined) => void;\r\n    options: Option[];\r\n};\r\n\r\nexport const useSelect = <\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>(\r\n    props: UseSelectProps<TData, TError>,\r\n): UseSelectReturnType<TData> => {\r\n    const [search, setSearch] = useState<CrudFilters>([]);\r\n    const [options, setOptions] = useState<Option[]>([]);\r\n    const [selectedOptions, setSelectedOptions] = useState<Option[]>([]);\r\n\r\n    const {\r\n        resource,\r\n        sort,\r\n        filters = [],\r\n        optionLabel = \"title\",\r\n        optionValue = \"id\",\r\n        debounce: debounceValue = 300,\r\n        successNotification,\r\n        errorNotification,\r\n        defaultValueQueryOptions: defaultValueQueryOptionsFromProps,\r\n        queryOptions,\r\n        fetchSize,\r\n        liveMode,\r\n        defaultValue = [],\r\n        onLiveEvent,\r\n        onSearch: onSearchFromProp,\r\n        liveParams,\r\n        metaData,\r\n        dataProviderName,\r\n    } = props;\r\n\r\n    const defaultValues = Array.isArray(defaultValue)\r\n        ? defaultValue\r\n        : [defaultValue];\r\n\r\n    const defaultValueQueryOnSuccess = (data: GetManyResponse<TData>) => {\r\n        setSelectedOptions(\r\n            data.data.map((item) => ({\r\n                label: item[optionLabel],\r\n                value: item[optionValue],\r\n            })),\r\n        );\r\n    };\r\n\r\n    const defaultValueQueryOptions =\r\n        defaultValueQueryOptionsFromProps ?? (queryOptions as any);\r\n\r\n    const defaultValueQueryResult = useMany<TData, TError>({\r\n        resource,\r\n        ids: defaultValues,\r\n        queryOptions: {\r\n            enabled: defaultValues.length > 0,\r\n            ...defaultValueQueryOptions,\r\n            onSuccess: (data) => {\r\n                defaultValueQueryOnSuccess(data);\r\n                defaultValueQueryOptions?.onSuccess?.(data);\r\n            },\r\n        },\r\n        metaData,\r\n        liveMode: \"off\",\r\n        dataProviderName,\r\n    });\r\n\r\n    const defaultQueryOnSuccess = (data: GetListResponse<TData>) => {\r\n        setOptions(\r\n            data.data.map((item) => ({\r\n                label: item[optionLabel],\r\n                value: item[optionValue],\r\n            })),\r\n        );\r\n    };\r\n\r\n    const queryResult = useList<TData, TError>({\r\n        resource,\r\n        config: {\r\n            sort,\r\n            filters: filters.concat(search),\r\n            pagination: fetchSize\r\n                ? {\r\n                      pageSize: fetchSize,\r\n                  }\r\n                : undefined,\r\n        },\r\n        queryOptions: {\r\n            ...queryOptions,\r\n            onSuccess: (data) => {\r\n                defaultQueryOnSuccess(data);\r\n                queryOptions?.onSuccess?.(data);\r\n            },\r\n        },\r\n        successNotification,\r\n        errorNotification,\r\n        metaData,\r\n        liveMode,\r\n        liveParams,\r\n        onLiveEvent,\r\n        dataProviderName,\r\n    });\r\n\r\n    const onSearch = (value: string | undefined) => {\r\n        if (!value) {\r\n            setSearch([]);\r\n            return;\r\n        }\r\n\r\n        if (onSearchFromProp) {\r\n            setSearch(onSearchFromProp(value));\r\n        } else {\r\n            setSearch([\r\n                {\r\n                    field: optionLabel,\r\n                    operator: \"contains\",\r\n                    value,\r\n                },\r\n            ]);\r\n        }\r\n    };\r\n\r\n    return {\r\n        queryResult,\r\n        defaultValueQueryResult,\r\n        options: useMemo(\r\n            () => uniqBy([...options, ...selectedOptions], \"value\"),\r\n            [options, selectedOptions],\r\n        ),\r\n        onSearch: debounce(onSearch, debounceValue),\r\n    };\r\n};\r\n","import { useMemo, useState, useEffect } from \"react\";\r\nimport { QueryObserverResult, UseQueryOptions } from \"react-query\";\r\nimport differenceWith from \"lodash/differenceWith\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nimport {\r\n    useRouterContext,\r\n    useSyncWithLocation,\r\n    useNavigation,\r\n    useResourceWithRoute,\r\n    useList,\r\n    useLiveMode,\r\n} from \"@hooks\";\r\nimport {\r\n    stringifyTableParams,\r\n    parseTableParams,\r\n    unionFilters,\r\n    setInitialFilters,\r\n    setInitialSorters,\r\n    unionSorters,\r\n} from \"@definitions/table\";\r\n\r\nimport {\r\n    ResourceRouterParams,\r\n    BaseRecord,\r\n    CrudFilters,\r\n    CrudSorting,\r\n    GetListResponse,\r\n    SuccessErrorNotification,\r\n    HttpError,\r\n    MetaDataQuery,\r\n    LiveModeProps,\r\n} from \"../../interfaces\";\r\n\r\ntype SetFilterBehavior = \"merge\" | \"replace\";\r\n\r\nexport type useTableProps<TData, TError> = {\r\n    resource?: string;\r\n    initialCurrent?: number;\r\n    initialPageSize?: number;\r\n    hasPagination?: boolean;\r\n    initialSorter?: CrudSorting;\r\n    permanentSorter?: CrudSorting;\r\n    defaultSetFilterBehavior?: SetFilterBehavior;\r\n    initialFilter?: CrudFilters;\r\n    permanentFilter?: CrudFilters;\r\n    syncWithLocation?: boolean;\r\n    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;\r\n    metaData?: MetaDataQuery;\r\n    dataProviderName?: string;\r\n} & SuccessErrorNotification &\r\n    LiveModeProps;\r\n\r\ntype ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;\r\n\r\ntype SyncWithLocationParams = {\r\n    pagination: { current?: number; pageSize?: number };\r\n    sorter: CrudSorting;\r\n    filters: CrudFilters;\r\n};\r\n\r\nexport type useTablePaginationKeys =\r\n    | \"current\"\r\n    | \"setCurrent\"\r\n    | \"pageSize\"\r\n    | \"setPageSize\"\r\n    | \"pageCount\";\r\n\r\nexport type useTableReturnType<TData extends BaseRecord = BaseRecord> = {\r\n    tableQueryResult: QueryObserverResult<GetListResponse<TData>>;\r\n    sorter: CrudSorting;\r\n    setSorter: (sorter: CrudSorting) => void;\r\n    filters: CrudFilters;\r\n    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) &\r\n        ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);\r\n    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;\r\n    current: number;\r\n    setCurrent: ReactSetState<useTableReturnType[\"current\"]>;\r\n    pageSize: number;\r\n    setPageSize: ReactSetState<useTableReturnType[\"pageSize\"]>;\r\n    pageCount: number;\r\n};\r\n\r\nexport type useTableNoPaginationReturnType<\r\n    TData extends BaseRecord = BaseRecord,\r\n> = Omit<useTableReturnType<TData>, useTablePaginationKeys> &\r\n    Record<useTablePaginationKeys, undefined>;\r\n\r\n/**\r\n * By using useTable, you are able to get properties that are compatible with\r\n * Ant Design {@link https://ant.design/components/table/ `<Table>`} component.\r\n * All features such as sorting, filtering and pagination comes as out of box.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/hooks/table/useTable} for more details.\r\n */\r\n\r\nconst defaultPermanentFilter: CrudFilters = [];\r\nconst defaultPermanentSorter: CrudSorting = [];\r\n\r\n// overload with pagination\r\nexport function useTable<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>(\r\n    props?: useTableProps<TData, TError> & {\r\n        hasPagination?: true;\r\n    },\r\n): useTableReturnType<TData>;\r\n// overload without pagination\r\nexport function useTable<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>(\r\n    props?: useTableProps<TData, TError> & {\r\n        hasPagination: false;\r\n    },\r\n): useTableNoPaginationReturnType<TData>;\r\n// implementation\r\nexport function useTable<\r\n    TData extends BaseRecord = BaseRecord,\r\n    TError extends HttpError = HttpError,\r\n>({\r\n    initialCurrent = 1,\r\n    initialPageSize = 10,\r\n    hasPagination = true,\r\n    initialSorter,\r\n    permanentSorter = defaultPermanentSorter,\r\n    defaultSetFilterBehavior = \"merge\",\r\n    initialFilter,\r\n    permanentFilter = defaultPermanentFilter,\r\n    syncWithLocation: syncWithLocationProp,\r\n    resource: resourceFromProp,\r\n    successNotification,\r\n    errorNotification,\r\n    queryOptions,\r\n    liveMode: liveModeFromProp,\r\n    onLiveEvent,\r\n    liveParams,\r\n    metaData,\r\n    dataProviderName,\r\n}: useTableProps<TData, TError> = {}):\r\n    | useTableReturnType<TData>\r\n    | useTableNoPaginationReturnType<TData> {\r\n    const { syncWithLocation: syncWithLocationContext } = useSyncWithLocation();\r\n\r\n    const syncWithLocation = syncWithLocationProp ?? syncWithLocationContext;\r\n\r\n    const { useLocation, useParams } = useRouterContext();\r\n    const { search, pathname } = useLocation();\r\n    const liveMode = useLiveMode(liveModeFromProp);\r\n\r\n    // We want to always parse the query string even when syncWithLocation is\r\n    // deactivated, for hotlinking to work properly\r\n    const { parsedCurrent, parsedPageSize, parsedSorter, parsedFilters } =\r\n        parseTableParams(search);\r\n\r\n    const defaultCurrent = parsedCurrent || initialCurrent;\r\n    const defaultPageSize = parsedPageSize || initialPageSize;\r\n    const defaultSorter = parsedSorter.length ? parsedSorter : initialSorter;\r\n    const defaultFilter = parsedFilters.length ? parsedFilters : initialFilter;\r\n\r\n    const { resource: routeResourceName } = useParams<ResourceRouterParams>();\r\n\r\n    const { push } = useNavigation();\r\n    const resourceWithRoute = useResourceWithRoute();\r\n\r\n    const resource = resourceWithRoute(resourceFromProp ?? routeResourceName);\r\n\r\n    const [sorter, setSorter] = useState<CrudSorting>(\r\n        setInitialSorters(permanentSorter, defaultSorter ?? []),\r\n    );\r\n    const [filters, setFilters] = useState<CrudFilters>(\r\n        setInitialFilters(permanentFilter, defaultFilter ?? []),\r\n    );\r\n    const [current, setCurrent] = useState<number>(defaultCurrent);\r\n    const [pageSize, setPageSize] = useState<number>(defaultPageSize);\r\n\r\n    const createLinkForSyncWithLocation = ({\r\n        pagination: { current, pageSize },\r\n        sorter,\r\n        filters,\r\n    }: SyncWithLocationParams) => {\r\n        const stringifyParams = stringifyTableParams({\r\n            pagination: {\r\n                pageSize,\r\n                current,\r\n            },\r\n            sorter,\r\n            filters,\r\n        });\r\n        return `${pathname}?${stringifyParams}`;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (search === \"\") {\r\n            setCurrent(defaultCurrent);\r\n            setPageSize(defaultPageSize);\r\n            setSorter(setInitialSorters(permanentSorter, defaultSorter ?? []));\r\n            setFilters(setInitialFilters(permanentFilter, defaultFilter ?? []));\r\n        }\r\n    }, [search]);\r\n\r\n    useEffect(() => {\r\n        if (syncWithLocation) {\r\n            const stringifyParams = stringifyTableParams({\r\n                ...(hasPagination\r\n                    ? {\r\n                          pagination: {\r\n                              pageSize,\r\n                              current,\r\n                          },\r\n                      }\r\n                    : {}),\r\n                sorter: differenceWith(sorter, permanentSorter, isEqual),\r\n                filters: differenceWith(filters, permanentFilter, isEqual),\r\n            });\r\n\r\n            // Careful! This triggers render\r\n            return push(`${pathname}?${stringifyParams}`);\r\n        }\r\n    }, [syncWithLocation, current, pageSize, sorter, filters]);\r\n\r\n    const queryResult = useList<TData, TError>({\r\n        resource: resource.name,\r\n        config: {\r\n            hasPagination,\r\n            pagination: { current, pageSize },\r\n            filters: unionFilters(permanentFilter, filters),\r\n            sort: unionSorters(permanentSorter, sorter),\r\n        },\r\n        queryOptions,\r\n        successNotification,\r\n        errorNotification,\r\n        metaData,\r\n        liveMode,\r\n        liveParams,\r\n        onLiveEvent,\r\n        dataProviderName,\r\n    });\r\n\r\n    const setFiltersAsMerge = (newFilters: CrudFilters) => {\r\n        setFilters((prevFilters) =>\r\n            unionFilters(permanentFilter, newFilters, prevFilters),\r\n        );\r\n    };\r\n\r\n    const setFiltersAsReplace = (newFilters: CrudFilters) => {\r\n        setFilters(unionFilters(permanentFilter, newFilters));\r\n    };\r\n\r\n    const setFiltersWithSetter = (\r\n        setter: (prevFilters: CrudFilters) => CrudFilters,\r\n    ) => {\r\n        setFilters((prev) => unionFilters(permanentFilter, setter(prev)));\r\n    };\r\n\r\n    const setFiltersFn: useTableReturnType<TData>[\"setFilters\"] = (\r\n        setterOrFilters,\r\n        behavior: SetFilterBehavior = defaultSetFilterBehavior,\r\n    ) => {\r\n        if (typeof setterOrFilters === \"function\") {\r\n            setFiltersWithSetter(setterOrFilters);\r\n        } else {\r\n            if (behavior === \"replace\") {\r\n                setFiltersAsReplace(setterOrFilters);\r\n            } else {\r\n                setFiltersAsMerge(setterOrFilters);\r\n            }\r\n        }\r\n    };\r\n\r\n    const setSortWithUnion = (newSorter: CrudSorting) => {\r\n        setSorter(() => unionSorters(permanentSorter, newSorter));\r\n    };\r\n\r\n    const paginationValues = useMemo(() => {\r\n        if (hasPagination) {\r\n            return {\r\n                current,\r\n                setCurrent,\r\n                pageSize,\r\n                setPageSize,\r\n                pageCount: pageSize\r\n                    ? Math.ceil((queryResult.data?.total ?? 0) / pageSize)\r\n                    : 1,\r\n            };\r\n        }\r\n\r\n        return {\r\n            current: undefined,\r\n            setCurrent: undefined,\r\n            pageSize: undefined,\r\n            setPageSize: undefined,\r\n            pageCount: undefined,\r\n        };\r\n    }, [hasPagination, current, pageSize, queryResult.data?.total]);\r\n\r\n    return {\r\n        tableQueryResult: queryResult,\r\n        sorter,\r\n        setSorter: setSortWithUnion,\r\n        filters,\r\n        setFilters: setFiltersFn,\r\n        ...paginationValues,\r\n        createLinkForSyncWithLocation,\r\n    };\r\n}\r\n","import { useContext } from \"react\";\r\nimport { useMutation, UseMutationResult, useQueryClient } from \"react-query\";\r\n\r\nimport { AuditLogContext } from \"@contexts/auditLog\";\r\nimport { ResourceContext } from \"@contexts/resource\";\r\nimport { useGetIdentity } from \"@hooks/auth\";\r\nimport { BaseKey, LogParams } from \"../../../interfaces\";\r\nimport { hasPermission, queryKeys } from \"@definitions/helpers\";\r\n\r\ntype LogRenameData =\r\n    | {\r\n          resource?: string;\r\n      }\r\n    | undefined;\r\n\r\nexport type UseLogReturnType<TLogData, TLogRenameData> = {\r\n    log: UseMutationResult<TLogData, Error, LogParams>;\r\n    rename: UseMutationResult<\r\n        TLogRenameData,\r\n        Error,\r\n        {\r\n            id: BaseKey;\r\n            name: string;\r\n        }\r\n    >;\r\n};\r\n\r\n/**\r\n * useLog is used to `create` a new and `rename` the existing audit log.\r\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLog} for more details.\r\n */\r\n\r\nexport const useLog = <\r\n    TLogData,\r\n    TLogRenameData extends LogRenameData = LogRenameData,\r\n>(): UseLogReturnType<TLogData, TLogRenameData> => {\r\n    const queryClient = useQueryClient();\r\n    const auditLogContext = useContext(AuditLogContext);\r\n\r\n    const { resources } = useContext(ResourceContext);\r\n    const {\r\n        data: identityData,\r\n        refetch,\r\n        isLoading,\r\n    } = useGetIdentity({\r\n        queryOptions: {\r\n            enabled: !!auditLogContext,\r\n        },\r\n    });\r\n\r\n    const log = useMutation<TLogData, Error, LogParams, unknown>(\r\n        async (params) => {\r\n            const resource = resources.find((p) => p.name === params.resource);\r\n            const logPermissions = resource?.options?.auditLog?.permissions;\r\n\r\n            if (logPermissions) {\r\n                if (!hasPermission(logPermissions, params.action)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let authorData;\r\n            if (isLoading) {\r\n                authorData = await refetch();\r\n            }\r\n\r\n            return await auditLogContext.create?.({\r\n                ...params,\r\n                author: identityData ?? authorData?.data,\r\n            });\r\n        },\r\n    );\r\n\r\n    const rename = useMutation<\r\n        TLogRenameData,\r\n        Error,\r\n        { id: BaseKey; name: string },\r\n        unknown\r\n    >(\r\n        async (params) => {\r\n            return await auditLogContext.update?.(params);\r\n        },\r\n        {\r\n            onSuccess: (data) => {\r\n                if (data?.resource) {\r\n                    const queryKey = queryKeys(data?.resource);\r\n                    queryClient.invalidateQueries(queryKey.logList());\r\n                }\r\n            },\r\n        },\r\n    );\r\n\r\n    return { log, rename };\r\n};\r\n","import React from \"react\";\r\n\r\nimport { IAuditLogContext } from \"./IAuditLogContext\";\r\n\r\nexport const AuditLogContext = React.createContext<IAuditLogContext>({});\r\n\r\nexport const AuditLogContextProvider: React.FC<\r\n    IAuditLogContext & {\r\n        children: React.ReactNode;\r\n    }\r\n> = ({ create, get, update, children }) => {\r\n    return (\r\n        <AuditLogContext.Provider value={{ create, get, update }}>\r\n            {children}\r\n        </AuditLogContext.Provider>\r\n    );\r\n};\r\n","import { useContext } from \"react\";\r\nimport { useQuery, UseQueryResult, UseQueryOptions } from \"react-query\";\r\n\r\nimport { AuditLogContext } from \"@contexts/auditLog\";\r\nimport { queryKeys } from \"@definitions/helpers\";\r\nimport { HttpError, MetaDataQuery } from \"../../../interfaces\";\r\n\r\nexport type UseLogProps<TData, TError> = {\r\n    resource: string;\r\n    action?: string;\r\n    meta?: Record<number | string, any>;\r\n    author?: Record<number | string, any>;\r\n    queryOptions?: UseQueryOptions<TData, TError>;\r\n    metaData?: MetaDataQuery;\r\n};\r\n\r\n/**\r\n * useLogList is used to get and filter audit logs.\r\n * @see {@link https://refine.dev/docs/core/hooks/audit-log/useLogList} for more details.\r\n */\r\nexport const useLogList = <TData = any, TError extends HttpError = HttpError>({\r\n    resource,\r\n    action,\r\n    meta,\r\n    author,\r\n    metaData,\r\n    queryOptions,\r\n}: UseLogProps<TData, TError>): UseQueryResult<TData> => {\r\n    const { get } = useContext(AuditLogContext);\r\n\r\n    const queryKey = queryKeys(resource, undefined, metaData);\r\n\r\n    const queryResponse = useQuery<TData, TError>(\r\n        queryKey.logList(meta),\r\n        () =>\r\n            get?.({\r\n                resource,\r\n                action,\r\n                author,\r\n                meta,\r\n                metaData,\r\n            }) ?? Promise.resolve([]),\r\n        {\r\n            enabled: typeof get !== \"undefined\",\r\n            ...queryOptions,\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return queryResponse;\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\n\r\nimport { queryKeys } from \"@definitions\";\r\nimport { BaseKey, IQueryKeys } from \"../../interfaces\";\r\n\r\nexport type UseInvalidateProp = {\r\n    resource?: string;\r\n    id?: BaseKey;\r\n    dataProviderName?: string;\r\n    invalidates: Array<keyof IQueryKeys> | false;\r\n};\r\n\r\nexport const useInvalidate = (): ((props: UseInvalidateProp) => void) => {\r\n    const queryClient = useQueryClient();\r\n\r\n    const invalidate = useCallback(\r\n        ({\r\n            resource,\r\n            dataProviderName,\r\n            invalidates,\r\n            id,\r\n        }: UseInvalidateProp) => {\r\n            if (invalidates === false) {\r\n                return;\r\n            }\r\n            const queryKey = queryKeys(resource, dataProviderName);\r\n\r\n            invalidates.forEach((key) => {\r\n                switch (key) {\r\n                    case \"all\":\r\n                        queryClient.invalidateQueries(queryKey.all);\r\n                        break;\r\n                    case \"list\":\r\n                        queryClient.invalidateQueries(queryKey.list());\r\n                        break;\r\n                    case \"many\":\r\n                        queryClient.invalidateQueries(queryKey.many());\r\n                        break;\r\n                    case \"resourceAll\":\r\n                        queryClient.invalidateQueries(queryKey.resourceAll);\r\n                        break;\r\n                    case \"detail\":\r\n                        queryClient.invalidateQueries(\r\n                            queryKey.detail(id || \"\"),\r\n                        );\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        },\r\n        [],\r\n    );\r\n\r\n    return invalidate;\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport humanizeString from \"humanize-string\";\r\nimport warnOnce from \"warn-once\";\r\n\r\nimport { useResource, useRouterContext, useTranslate } from \"@hooks\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\n\r\nimport { ResourceRouterParams } from \"../../interfaces\";\r\n\r\nexport type BreadcrumbsType = {\r\n    label: string;\r\n    href?: string;\r\n    icon?: React.ReactNode;\r\n};\r\n\r\ntype UseBreadcrumbReturnType = {\r\n    breadcrumbs: BreadcrumbsType[];\r\n};\r\n\r\nexport const useBreadcrumb = (): UseBreadcrumbReturnType => {\r\n    const { useParams } = useRouterContext();\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n\r\n    const translate = useTranslate();\r\n\r\n    const { resources, resource } = useResource();\r\n\r\n    const { action } = useParams<ResourceRouterParams>();\r\n\r\n    const breadcrumbs: BreadcrumbsType[] = [];\r\n\r\n    if (!resource?.name) {\r\n        return { breadcrumbs };\r\n    }\r\n\r\n    const addBreadcrumb = (parentName: string) => {\r\n        const parentResource = resources.find(\r\n            (resource) => resource.name === parentName,\r\n        );\r\n\r\n        if (parentResource) {\r\n            if (parentResource.parentName) {\r\n                addBreadcrumb(parentResource.parentName);\r\n            }\r\n            breadcrumbs.push({\r\n                label:\r\n                    parentResource.label ??\r\n                    translate(\r\n                        `${parentResource.name}.${parentResource.name}`,\r\n                        humanizeString(parentResource.name),\r\n                    ),\r\n\r\n                href: !!parentResource.list\r\n                    ? `/${parentResource.route}`\r\n                    : undefined,\r\n                icon: parentResource.icon,\r\n            });\r\n        }\r\n    };\r\n\r\n    if (resource.parentName) {\r\n        addBreadcrumb(resource.parentName);\r\n    }\r\n\r\n    breadcrumbs.push({\r\n        label:\r\n            resource.label ??\r\n            translate(\r\n                `${resource.name}.${resource.name}`,\r\n                humanizeString(resource.name),\r\n            ),\r\n        href: !!resource.list ? `/${resource.route}` : undefined,\r\n        icon: resource.icon,\r\n    });\r\n\r\n    if (action) {\r\n        const key = `actions.${action}`;\r\n        const actionLabel = translate(key);\r\n        if (typeof i18nProvider !== \"undefined\" && actionLabel === key) {\r\n            warnOnce(\r\n                true,\r\n                `[useBreadcrumb]: Breadcrumb missing translate key for the \"${action}\" action. Please add \"actions.${action}\" key to your translation file.\\nFor more information, see https://refine.dev/docs/core/hooks/useBreadcrumb/#i18n-support`,\r\n            );\r\n            breadcrumbs.push({\r\n                label: translate(`buttons.${action}`, humanizeString(action)),\r\n            });\r\n        } else {\r\n            breadcrumbs.push({\r\n                label: translate(key, humanizeString(action)),\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        breadcrumbs,\r\n    };\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    useRefineContext,\r\n    useTranslate,\r\n    useResource,\r\n    useRouterContext,\r\n} from \"..\";\r\nimport { IMenuItem, ITreeMenu } from \"../../interfaces\";\r\nimport { userFriendlyResourceName, createTreeView } from \"@definitions\";\r\n\r\ntype useMenuReturnType = {\r\n    defaultOpenKeys: string[];\r\n    selectedKey: string;\r\n    menuItems: ITreeMenu[];\r\n};\r\n\r\n/**\r\n * `useMenu` is used to get menu items of the default sidebar.\r\n * These items include a link to dashboard page (if it exists) and links to the user defined resources\r\n * (passed as children to {@link https://refine.dev/docs/core/components/refine-config `<Refine>`}).\r\n * This hook can also be used to build custom menus, which is also used by default sidebar to show menu items.\r\n *\r\n * @see {@link https://refine.dev/docs/core/hooks/ui/useMenu} for more details.\r\n */\r\nexport const useMenu: () => useMenuReturnType = () => {\r\n    const { resources } = useResource();\r\n    const translate = useTranslate();\r\n\r\n    const { useLocation, useParams } = useRouterContext();\r\n    const location = useLocation();\r\n    const params = useParams<{ resource: string }>();\r\n\r\n    const { hasDashboard } = useRefineContext();\r\n\r\n    const selectedKey = React.useMemo(() => {\r\n        let selectedResource = resources.find(\r\n            (el) => location?.pathname === `/${el.route}`,\r\n        );\r\n\r\n        if (!selectedResource) {\r\n            selectedResource = resources.find(\r\n                (el) => params?.resource === (el.route as string),\r\n            );\r\n        }\r\n\r\n        let _selectedKey: string;\r\n        if (selectedResource?.route) {\r\n            _selectedKey = `/${selectedResource?.route}`;\r\n        } else if (location.pathname === \"/\") {\r\n            _selectedKey = \"/\";\r\n        } else {\r\n            _selectedKey = location?.pathname;\r\n        }\r\n        return _selectedKey;\r\n    }, [resources, location, params]);\r\n\r\n    const treeMenuItems: IMenuItem[] = React.useMemo(\r\n        () =>\r\n            resources.map((resource) => {\r\n                const route = `/${resource.route}`;\r\n\r\n                return {\r\n                    ...resource,\r\n                    icon: resource.icon,\r\n                    route: route,\r\n                    key: resource.key ?? route,\r\n                    label:\r\n                        resource.label ??\r\n                        translate(\r\n                            `${resource.name}.${resource.name}`,\r\n                            userFriendlyResourceName(resource.name, \"plural\"),\r\n                        ),\r\n                };\r\n            }),\r\n        [resources, hasDashboard],\r\n    );\r\n    const menuItems: ITreeMenu[] = React.useMemo(\r\n        () => createTreeView(treeMenuItems),\r\n        [treeMenuItems],\r\n    );\r\n\r\n    const crawlNestedKeys = React.useCallback(\r\n        (\r\n            currentKey: string,\r\n            currentResources: typeof resources,\r\n            isParent = false,\r\n        ): string[] => {\r\n            const currentElement = currentResources.find((el) =>\r\n                isParent ? el.name === currentKey : el.route === currentKey,\r\n            );\r\n\r\n            if (currentElement) {\r\n                const keysArray: string[] = [];\r\n\r\n                if (isParent && currentElement.route) {\r\n                    keysArray.unshift(...[currentElement.route]);\r\n                }\r\n\r\n                if (currentElement.parentName) {\r\n                    keysArray.unshift(\r\n                        ...crawlNestedKeys(\r\n                            currentElement.parentName,\r\n                            currentResources,\r\n                            true,\r\n                        ),\r\n                    );\r\n                }\r\n                return keysArray;\r\n            }\r\n\r\n            return [];\r\n        },\r\n        [],\r\n    );\r\n\r\n    const defaultOpenKeys = React.useMemo(\r\n        () => crawlNestedKeys(selectedKey, treeMenuItems),\r\n        [selectedKey, treeMenuItems],\r\n    );\r\n\r\n    const values = React.useMemo(() => {\r\n        const filterMenuItemsByListView = (menus: ITreeMenu[]): ITreeMenu[] => {\r\n            return menus.reduce((menuItem: ITreeMenu[], obj) => {\r\n                if (obj.children.length > 0)\r\n                    return [\r\n                        ...menuItem,\r\n                        {\r\n                            ...obj,\r\n                            children: filterMenuItemsByListView(obj.children),\r\n                        },\r\n                    ];\r\n                else if (typeof obj.list !== \"undefined\")\r\n                    return [...menuItem, obj];\r\n\r\n                return menuItem;\r\n            }, []);\r\n        };\r\n\r\n        return {\r\n            defaultOpenKeys,\r\n            selectedKey,\r\n            menuItems: filterMenuItemsByListView(menuItems),\r\n        };\r\n    }, [defaultOpenKeys, selectedKey, menuItems]);\r\n\r\n    return values;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useLogin, useTranslate } from \"@hooks\";\r\nexport interface ILoginForm {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\n/**\r\n * **refine** has a default login page form which is served on `/login` route when the `authProvider` configuration is provided.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#loginpage} for more details.\r\n */\r\nexport const LoginPage: React.FC = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const translate = useTranslate();\r\n\r\n    const { mutate: login } = useLogin<ILoginForm>();\r\n\r\n    return (\r\n        <>\r\n            <h1>{translate(\"pages.login.title\", \"Sign in your account\")}</h1>\r\n            <form\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    login({ username, password });\r\n                }}\r\n            >\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                {translate(\r\n                                    \"pages.login.username\",\r\n                                    undefined,\r\n                                    \"username\",\r\n                                )}\r\n                                :\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    size={20}\r\n                                    autoCorrect=\"off\"\r\n                                    spellCheck={false}\r\n                                    autoCapitalize=\"off\"\r\n                                    autoFocus\r\n                                    required\r\n                                    value={username}\r\n                                    onChange={(e) =>\r\n                                        setUsername(e.target.value)\r\n                                    }\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                {translate(\r\n                                    \"pages.login.password\",\r\n                                    undefined,\r\n                                    \"password\",\r\n                                )}\r\n                                :\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    required\r\n                                    size={20}\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <br />\r\n                <input type=\"submit\" value=\"login\" />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\n/**\r\n * **refine** shows a default ready page on root route when no `resources` is passed to the `<Refine>` component as a property.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config#readypage} for more details.\r\n */\r\nexport const ReadyPage: React.FC = () => {\r\n    return (\r\n        <>\r\n            <h1>Welcome on board</h1>\r\n            <p>Your configuration is completed.</p>\r\n            <p>\r\n                Now you can get started by adding your resources to the{\" \"}\r\n                <code>`resources`</code> property of <code>{\"`<Refine>`\"}</code>\r\n            </p>\r\n            <div style={{ display: \"flex\", gap: 8 }}>\r\n                <a href=\"https://refine.dev\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <button>Documentation</button>\r\n                </a>\r\n                <a\r\n                    href=\"https://refine.dev/docs/examples/tutorial\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    <button>Examples</button>\r\n                </a>\r\n                <a\r\n                    href=\"https://discord.gg/refine\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    <button>Community</button>\r\n                </a>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    QueryClientProvider,\r\n    QueryClient,\r\n    QueryCache,\r\n    MutationCache,\r\n    DefaultOptions,\r\n} from \"react-query\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\n\r\nimport { AuthContextProvider } from \"@contexts/auth\";\r\nimport { DataContextProvider } from \"@contexts/data\";\r\nimport { LiveContextProvider } from \"@contexts/live\";\r\nimport { TranslationContextProvider } from \"@contexts/translation\";\r\nimport { ResourceContextProvider, IResourceItem } from \"@contexts/resource\";\r\nimport { RefineContextProvider } from \"@contexts/refine\";\r\nimport { UndoableQueueContextProvider } from \"@contexts/undoableQueue\";\r\nimport { UnsavedWarnContextProvider } from \"@contexts/unsavedWarn\";\r\nimport { RouterContextProvider } from \"@contexts/router\";\r\nimport { AccessControlContextProvider } from \"@contexts/accessControl\";\r\nimport { NotificationContextProvider } from \"@contexts/notification\";\r\nimport { AuditLogContextProvider } from \"@contexts/auditLog\";\r\nimport { ReadyPage as DefaultReadyPage, RouteChangeHandler } from \"@components\";\r\nimport { routeGenerator } from \"@definitions\";\r\nimport { Telemetry } from \"@components/telemetry\";\r\n\r\nimport {\r\n    MutationMode,\r\n    IDataContextProvider,\r\n    I18nProvider,\r\n    LayoutProps,\r\n    TitleProps,\r\n    IRouterProvider,\r\n    ResourceProps,\r\n    ILiveContext,\r\n    LiveModeProps,\r\n    IDataMultipleContextProvider,\r\n    AuthProvider,\r\n    NotificationProvider,\r\n    AccessControlProvider,\r\n    AuditLogProvider,\r\n} from \"../../../interfaces\";\r\n\r\ninterface QueryClientConfig {\r\n    queryCache?: QueryCache;\r\n    mutationCache?: MutationCache;\r\n    defaultOptions?: DefaultOptions;\r\n}\r\nexport interface RefineProps {\r\n    authProvider?: AuthProvider;\r\n    dataProvider: IDataContextProvider | IDataMultipleContextProvider;\r\n    liveProvider?: ILiveContext;\r\n    routerProvider: IRouterProvider;\r\n    notificationProvider?: NotificationProvider | (() => NotificationProvider);\r\n    accessControlProvider?: AccessControlProvider;\r\n    auditLogProvider?: AuditLogProvider;\r\n    resources?: ResourceProps[];\r\n    i18nProvider?: I18nProvider;\r\n    catchAll?: React.ReactNode;\r\n    LoginPage?: React.FC;\r\n    DashboardPage?: React.FC;\r\n    ReadyPage?: React.FC;\r\n    mutationMode?: MutationMode;\r\n    syncWithLocation?: boolean;\r\n    warnWhenUnsavedChanges?: boolean;\r\n    undoableTimeout?: number;\r\n    Layout?: React.FC<LayoutProps>;\r\n    Sider?: React.FC;\r\n    Header?: React.FC;\r\n    Footer?: React.FC;\r\n    OffLayoutArea?: React.FC;\r\n    Title?: React.FC<TitleProps>;\r\n    reactQueryClientConfig?: QueryClientConfig;\r\n    reactQueryDevtoolConfig?: any;\r\n    liveMode?: LiveModeProps[\"liveMode\"];\r\n    onLiveEvent?: LiveModeProps[\"onLiveEvent\"];\r\n    children?: React.ReactNode;\r\n    disableTelemetry?: boolean;\r\n}\r\n\r\n/**\r\n * {@link https://refine.dev/docs/api-references/components/refine-config `<Refine> component`} is the entry point of a refine app.\r\n * It is where the highest level of configuration of the app occurs.\r\n * Only a dataProvider is required to bootstrap the app. After adding a dataProvider, resources can be added as property.\r\n *\r\n * @see {@link https://refine.dev/docs/api-references/components/refine-config} for more details.\r\n */\r\nexport const Refine: React.FC<RefineProps> = ({\r\n    authProvider,\r\n    dataProvider,\r\n    routerProvider,\r\n    notificationProvider,\r\n    accessControlProvider,\r\n    auditLogProvider,\r\n    resources: resourcesFromProps,\r\n    DashboardPage,\r\n    ReadyPage,\r\n    LoginPage,\r\n    catchAll,\r\n    children,\r\n    liveProvider,\r\n    i18nProvider,\r\n    mutationMode = \"pessimistic\",\r\n    syncWithLocation = false,\r\n    warnWhenUnsavedChanges = false,\r\n    undoableTimeout = 5000,\r\n    Title,\r\n    Layout,\r\n    Sider,\r\n    Header,\r\n    Footer,\r\n    OffLayoutArea,\r\n    reactQueryClientConfig,\r\n    reactQueryDevtoolConfig,\r\n    liveMode,\r\n    onLiveEvent,\r\n    disableTelemetry = false,\r\n}) => {\r\n    const queryClient = new QueryClient({\r\n        ...reactQueryClientConfig,\r\n        defaultOptions: {\r\n            ...reactQueryClientConfig?.defaultOptions,\r\n            queries: {\r\n                refetchOnWindowFocus: false,\r\n                keepPreviousData: true,\r\n                ...reactQueryClientConfig?.defaultOptions?.queries,\r\n            },\r\n        },\r\n    });\r\n\r\n    const notificationProviderContextValues =\r\n        typeof notificationProvider === \"function\"\r\n            ? notificationProvider()\r\n            : notificationProvider ?? {};\r\n\r\n    const resources: IResourceItem[] = [];\r\n\r\n    resourcesFromProps?.map((resource) => {\r\n        resources.push({\r\n            key: resource.key,\r\n            name: resource.name,\r\n            label: resource.options?.label,\r\n            icon: resource.icon,\r\n            route:\r\n                resource.options?.route ??\r\n                routeGenerator(resource, resourcesFromProps),\r\n            canCreate: !!resource.create,\r\n            canEdit: !!resource.edit,\r\n            canShow: !!resource.show,\r\n            canDelete: resource.canDelete,\r\n            create: resource.create,\r\n            show: resource.show,\r\n            list: resource.list,\r\n            edit: resource.edit,\r\n            options: resource.options,\r\n            parentName: resource.parentName,\r\n        });\r\n    });\r\n\r\n    if (resources.length === 0) {\r\n        return ReadyPage ? <ReadyPage /> : <DefaultReadyPage />;\r\n    }\r\n\r\n    const { RouterComponent = React.Fragment } = routerProvider;\r\n\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            <NotificationContextProvider {...notificationProviderContextValues}>\r\n                <AuthContextProvider\r\n                    {...(authProvider ?? {})}\r\n                    isProvided={Boolean(authProvider)}\r\n                >\r\n                    <DataContextProvider {...dataProvider}>\r\n                        <LiveContextProvider liveProvider={liveProvider}>\r\n                            <RouterContextProvider {...routerProvider}>\r\n                                <ResourceContextProvider resources={resources}>\r\n                                    <TranslationContextProvider\r\n                                        i18nProvider={i18nProvider}\r\n                                    >\r\n                                        <AccessControlContextProvider\r\n                                            {...(accessControlProvider ?? {})}\r\n                                        >\r\n                                            <AuditLogContextProvider\r\n                                                {...(auditLogProvider ?? {})}\r\n                                            >\r\n                                                <UndoableQueueContextProvider>\r\n                                                    <RefineContextProvider\r\n                                                        mutationMode={\r\n                                                            mutationMode\r\n                                                        }\r\n                                                        warnWhenUnsavedChanges={\r\n                                                            warnWhenUnsavedChanges\r\n                                                        }\r\n                                                        syncWithLocation={\r\n                                                            syncWithLocation\r\n                                                        }\r\n                                                        Title={Title}\r\n                                                        undoableTimeout={\r\n                                                            undoableTimeout\r\n                                                        }\r\n                                                        catchAll={catchAll}\r\n                                                        DashboardPage={\r\n                                                            DashboardPage\r\n                                                        }\r\n                                                        LoginPage={LoginPage}\r\n                                                        Layout={Layout}\r\n                                                        Sider={Sider}\r\n                                                        Footer={Footer}\r\n                                                        Header={Header}\r\n                                                        OffLayoutArea={\r\n                                                            OffLayoutArea\r\n                                                        }\r\n                                                        hasDashboard={\r\n                                                            !!DashboardPage\r\n                                                        }\r\n                                                        liveMode={liveMode}\r\n                                                        onLiveEvent={\r\n                                                            onLiveEvent\r\n                                                        }\r\n                                                    >\r\n                                                        <UnsavedWarnContextProvider>\r\n                                                            <RouterComponent>\r\n                                                                {children}\r\n                                                                {!disableTelemetry && (\r\n                                                                    <Telemetry />\r\n                                                                )}\r\n                                                                <RouteChangeHandler />\r\n                                                            </RouterComponent>\r\n                                                        </UnsavedWarnContextProvider>\r\n                                                    </RefineContextProvider>\r\n                                                </UndoableQueueContextProvider>\r\n                                            </AuditLogContextProvider>\r\n                                        </AccessControlContextProvider>\r\n                                    </TranslationContextProvider>\r\n                                </ResourceContextProvider>\r\n                            </RouterContextProvider>\r\n                        </LiveContextProvider>\r\n                    </DataContextProvider>\r\n                </AuthContextProvider>\r\n            </NotificationContextProvider>\r\n            <ReactQueryDevtools\r\n                initialIsOpen={false}\r\n                position=\"bottom-right\"\r\n                {...reactQueryDevtoolConfig}\r\n            />\r\n        </QueryClientProvider>\r\n    );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { CompactEncrypt, importJWK } from \"jose\";\r\n\r\nimport { useTelemetryData } from \"@hooks/useTelemetryData\";\r\n\r\nconst PUBLIC_KEY = {\r\n    kty: \"RSA\",\r\n    e: \"AQAB\",\r\n    use: \"enc\",\r\n    alg: \"RSA-OAEP-256\",\r\n    n: \"glC_mSwk1VqaofnOPXK3HEC5njb4uHZM5_shFdQLRn_898dxVUMK7HkyOgoVOtEsNxDBjwK_KPbSEYX_lyfrJ6ONjnxPJ2_d0W_1ZwdwT_gr5ofFLz5Bm7WbVHcKDK1j5iMYsqUJbFVQ-KXzAswae2iiqzCBKLD4y-fLsIvOUGZliERMMi54hRPqVj6p0xhJEvH22jZ5rk48KJBNvjBBuLes1qk5cehirDHnh07A8Alr3Pe6Qk7xpyC_mUvMqX99JvYThyvjQMMPEXHLJY9m1g-sgHJPlMkxMoLUd5JI1v6QMLezhq2F-bNXiRgXJgT0ew3g-H_PKpWmMQmSRtgiEw\",\r\n};\r\n\r\nexport const Telemetry: React.FC<{}> = () => {\r\n    const payload = useTelemetryData();\r\n\r\n    useEffect(() => {\r\n        if (typeof window === \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            const jwk = await importJWK(PUBLIC_KEY);\r\n\r\n            const encryptedPayload = await new CompactEncrypt(\r\n                new TextEncoder().encode(JSON.stringify(payload)),\r\n            )\r\n                .setProtectedHeader({ alg: \"RSA-OAEP-256\", enc: \"A256GCM\" })\r\n                .encrypt(jwk);\r\n\r\n            fetch(\"https://telemetry.refine.dev/send\", {\r\n                headers: {\r\n                    Accept: \"application/text\",\r\n                    \"Content-Type\": \"application/text\",\r\n                },\r\n                method: \"POST\",\r\n                body: encryptedPayload,\r\n            });\r\n        })();\r\n    }, []);\r\n\r\n    return null;\r\n};\r\n","import { useContext } from \"react\";\r\n\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { AuditLogContext } from \"@contexts/auditLog\";\r\nimport { LiveContext } from \"@contexts/live\";\r\nimport { RouterContext } from \"@contexts/router\";\r\nimport { DataContext } from \"@contexts/data\";\r\nimport { TranslationContext } from \"@contexts/translation\";\r\nimport { NotificationContext } from \"@contexts/notification\";\r\nimport { AccessControlContext } from \"@contexts/accessControl\";\r\nimport { useResource } from \"@hooks/resource\";\r\n\r\nimport { ITelemetryData } from \"../../interfaces/telementry\";\r\n\r\n// It reads and updates from package.json during build. ref: tsup.config.ts\r\nconst REFINE_VERSION = \"3.54.0\";\r\n\r\nexport const useTelemetryData = (): ITelemetryData => {\r\n    const authContext = useContext(AuthContext);\r\n    const auditLogContext = useContext(AuditLogContext);\r\n    const liveContext = useContext(LiveContext);\r\n    const routerContext = useContext(RouterContext);\r\n    const dataContext = useContext(DataContext);\r\n    const { i18nProvider } = useContext(TranslationContext);\r\n    const notificationContext = useContext(NotificationContext);\r\n    const accessControlContext = useContext(AccessControlContext);\r\n    const { resources } = useResource();\r\n\r\n    const auth = authContext.isProvided;\r\n\r\n    const auditLog =\r\n        !!auditLogContext.create ||\r\n        !!auditLogContext.get ||\r\n        !!auditLogContext.update;\r\n\r\n    const live =\r\n        !!liveContext?.publish ||\r\n        !!liveContext?.subscribe ||\r\n        !!liveContext?.unsubscribe;\r\n\r\n    const router =\r\n        !!routerContext.useHistory ||\r\n        !!routerContext.Link ||\r\n        !!routerContext.Prompt ||\r\n        !!routerContext.useLocation ||\r\n        !!routerContext.useParams;\r\n\r\n    const data = !!dataContext;\r\n\r\n    const i18n =\r\n        !!i18nProvider?.changeLocale ||\r\n        !!i18nProvider?.getLocale ||\r\n        !!i18nProvider?.translate;\r\n\r\n    const notification =\r\n        !!notificationContext.close || !!notificationContext.open;\r\n\r\n    const accessControl = !!accessControlContext.can;\r\n\r\n    return {\r\n        providers: {\r\n            auth,\r\n            auditLog,\r\n            live,\r\n            router,\r\n            data,\r\n            i18n,\r\n            notification,\r\n            accessControl,\r\n        },\r\n        version: REFINE_VERSION,\r\n        resourceCount: resources.length,\r\n    };\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { ActionTypes } from \"@contexts/undoableQueue\";\r\nimport { useCancelNotification, useNotification, useTranslate } from \"@hooks\";\r\nimport { IUndoableQueue } from \"../../interfaces\";\r\n\r\nimport { userFriendlySecond } from \"@definitions/helpers\";\r\n\r\nexport const UndoableQueue: React.FC<{\r\n    notifications: IUndoableQueue[];\r\n}> = ({ notifications }) => {\r\n    const translate = useTranslate();\r\n\r\n    const { notificationDispatch } = useCancelNotification();\r\n    const { open } = useNotification();\r\n\r\n    const cancelNotification = () => {\r\n        notifications.forEach((notificationItem: IUndoableQueue) => {\r\n            if (notificationItem.isRunning === true) {\r\n                if (notificationItem.seconds === 0) {\r\n                    notificationItem.doMutation();\r\n                }\r\n                if (!notificationItem.isSilent) {\r\n                    open?.({\r\n                        key: `${notificationItem.id}-${notificationItem.resource}-notification`,\r\n                        type: \"progress\",\r\n                        message: translate(\r\n                            \"notifications.undoable\",\r\n                            {\r\n                                seconds: userFriendlySecond(\r\n                                    notificationItem.seconds,\r\n                                ),\r\n                            },\r\n                            `You have ${userFriendlySecond(\r\n                                notificationItem.seconds,\r\n                            )} seconds to undo`,\r\n                        ),\r\n                        cancelMutation: notificationItem.cancelMutation,\r\n                        undoableTimeout: userFriendlySecond(\r\n                            notificationItem.seconds,\r\n                        ),\r\n                    });\r\n                }\r\n\r\n                if (notificationItem.seconds > 0) {\r\n                    setTimeout(() => {\r\n                        notificationDispatch({\r\n                            type: ActionTypes.DECREASE_NOTIFICATION_SECOND,\r\n                            payload: {\r\n                                id: notificationItem.id,\r\n                                seconds: notificationItem.seconds,\r\n                                resource: notificationItem.resource,\r\n                            },\r\n                        });\r\n                    }, 1000);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        cancelNotification();\r\n    }, [notifications]);\r\n\r\n    return null;\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport {\r\n    useRefineContext,\r\n    useRouterContext,\r\n    useTranslate,\r\n    useWarnAboutChange,\r\n} from \"@hooks\";\r\nimport { LayoutProps, TitleProps } from \"../../interfaces\";\r\n\r\nexport interface LayoutWrapperProps {\r\n    Layout?: React.FC<LayoutProps>;\r\n    Sider?: React.FC;\r\n    Header?: React.FC;\r\n    Title?: React.FC<TitleProps>;\r\n    Footer?: React.FC;\r\n    OffLayoutArea?: React.FC;\r\n    children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * `<LayoutWrapper>` wraps its contents in **refine's** layout with all customizations made in {@link https://refine.dev/docs/core/components/refine-config `<Refine>`} component.\r\n * It is the default layout used in resource pages.\r\n * It can be used in custom pages to use global layout.\r\n *\r\n * @see {@link https://refine.dev/docs/core/components/layout-wrapper} for more details.\r\n */\r\nexport const LayoutWrapper: React.FC<LayoutWrapperProps> = ({\r\n    children,\r\n    Layout: LayoutFromProps,\r\n    Sider: SiderFromProps,\r\n    Header: HeaderFromProps,\r\n    Title: TitleFromProps,\r\n    Footer: FooterFromProps,\r\n    OffLayoutArea: OffLayoutAreaFromProps,\r\n}) => {\r\n    const { Layout, Footer, Header, Sider, Title, OffLayoutArea } =\r\n        useRefineContext();\r\n\r\n    const LayoutToRender = LayoutFromProps ?? Layout;\r\n\r\n    return (\r\n        <LayoutToRender\r\n            Sider={SiderFromProps ?? Sider}\r\n            Header={HeaderFromProps ?? Header}\r\n            Footer={FooterFromProps ?? Footer}\r\n            Title={TitleFromProps ?? Title}\r\n            OffLayoutArea={OffLayoutAreaFromProps ?? OffLayoutArea}\r\n        >\r\n            {children}\r\n            <UnsavedPrompt />\r\n        </LayoutToRender>\r\n    );\r\n};\r\n\r\nconst UnsavedPrompt: React.FC = () => {\r\n    const { Prompt } = useRouterContext();\r\n\r\n    const translate = useTranslate();\r\n\r\n    const { warnWhen, setWarnWhen } = useWarnAboutChange();\r\n\r\n    const warnWhenListener = (e: {\r\n        preventDefault: () => void;\r\n        returnValue: string;\r\n    }) => {\r\n        e.preventDefault();\r\n\r\n        e.returnValue = translate(\r\n            \"warnWhenUnsavedChanges\",\r\n            \"Are you sure you want to leave? You have unsaved changes.\",\r\n        );\r\n\r\n        return e.returnValue;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (warnWhen) {\r\n            window.addEventListener(\"beforeunload\", warnWhenListener);\r\n        }\r\n\r\n        return window.removeEventListener(\"beforeunload\", warnWhenListener);\r\n    }, [warnWhen]);\r\n\r\n    return (\r\n        <Prompt\r\n            when={warnWhen}\r\n            message={translate(\r\n                \"warnWhenUnsavedChanges\",\r\n                \"Are you sure you want to leave? You have unsaved changes.\",\r\n            )}\r\n            setWarnWhen={setWarnWhen}\r\n        />\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useAuthenticated, useNavigation, useRouterContext } from \"@hooks\";\r\n\r\nexport type AuthenticatedProps = {\r\n    fallback?: React.ReactNode;\r\n    loading?: React.ReactNode;\r\n    children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * `<Authenticated>` is the component form of {@link https://refine.dev/docs/core/hooks/auth/useAuthenticated `useAuthenticated`}. It internally uses `useAuthenticated` to provide it's functionality.\r\n *\r\n * @see {@link https://refine.dev/docs/core/components/auth/authenticated `<Authenticated>`} component for more details.\r\n */\r\nexport const Authenticated: React.FC<AuthenticatedProps> = ({\r\n    children,\r\n    fallback,\r\n    loading,\r\n}) => {\r\n    const { isSuccess, isLoading, isError } = useAuthenticated();\r\n\r\n    const { replace } = useNavigation();\r\n    const { useLocation } = useRouterContext();\r\n    const { pathname, search } = useLocation();\r\n\r\n    if (isLoading) {\r\n        return <>{loading}</> || null;\r\n    }\r\n    if (isError) {\r\n        if (!fallback) {\r\n            const toURL = `${pathname}${search}`;\r\n            if (!pathname.includes(\"/login\")) {\r\n                replace(`/login?to=${encodeURIComponent(toURL)}`);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        return <>{fallback}</>;\r\n    }\r\n\r\n    if (isSuccess) {\r\n        return <>{children}</>;\r\n    }\r\n\r\n    return null;\r\n};\r\n","import { useContext, useEffect } from \"react\";\r\nimport { AuthContext } from \"@contexts/auth\";\r\nimport { useRouterContext } from \"@hooks\";\r\n\r\nimport { IAuthContext } from \"../../interfaces\";\r\n\r\nexport const RouteChangeHandler: React.FC = () => {\r\n    const { useLocation } = useRouterContext();\r\n\r\n    const { checkAuth } = useContext<IAuthContext>(AuthContext);\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        checkAuth?.().catch(() => false);\r\n    }, [location?.pathname]);\r\n\r\n    return null;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { useCan } from \"@hooks\";\r\nimport { CanParams } from \"../../interfaces\";\r\n\r\nexport type CanAccessProps = CanParams & {\r\n    fallback?: React.ReactNode;\r\n    children: React.ReactNode;\r\n};\r\n\r\nexport const CanAccess: React.FC<CanAccessProps> = ({\r\n    resource,\r\n    action,\r\n    params,\r\n    fallback,\r\n    children,\r\n    ...rest\r\n}) => {\r\n    const { data } = useCan({\r\n        resource,\r\n        action,\r\n        params,\r\n    });\r\n\r\n    if (data?.can) {\r\n        if (React.isValidElement(children)) {\r\n            const Children = React.cloneElement(children, rest);\r\n            return Children;\r\n        }\r\n\r\n        return <>{children}</>;\r\n    }\r\n\r\n    if (data?.can === false) {\r\n        return <>{fallback ?? null}</>;\r\n    }\r\n\r\n    return null;\r\n};\r\n"],"mappings":"iwBAAA,IAAAA,GAA2C,cCA3C,IAAAC,GAA2B,WCA3B,IAAAC,GAA2C,cAC3CC,GAA+B,iBAKxB,IAAMC,EAAc,GAAAC,QAAM,cAA4B,CAAC,CAAC,EAElDC,GAIT,CAAC,CAAE,SAAAC,EAAU,WAAAC,KAAeC,CAAe,IAAM,CACjD,GAAM,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5BC,KAAc,mBAAe,EAE7BC,EAAsB,IAAM,CAC9BD,EAAY,kBAAkB,CAAC,kBAAkB,CAAC,EAClDA,EAAY,kBAAkB,CAAC,iBAAiB,CAAC,EACjDA,EAAY,kBAAkB,CAAC,gBAAgB,CAAC,CACpD,EAEME,EAAY,MAAOC,GAAgB,CAtB7C,IAAAC,EAuBQ,GAAI,CACA,IAAMC,EAAS,OAAMD,EAAAP,EAAe,QAAf,YAAAO,EAAA,KAAAP,EAAuBM,IAC5C,OAAO,QAAQ,QAAQE,CAAM,CACjC,OAASC,EAAP,CACE,OAAO,QAAQ,OAAOA,CAAK,CAC/B,QAAE,CACEL,EAAoB,CACxB,CACJ,EAEMM,EAAa,MAAOJ,GAAgB,CAjC9C,IAAAC,EAkCQ,GAAI,CACA,IAAMI,EAAe,OAAMJ,EAAAP,EAAe,SAAf,YAAAO,EAAA,KAAAP,EAAwBM,IACnD,OAAO,QAAQ,QAAQK,CAAY,CACvC,OAASF,EAAP,CACE,OAAO,QAAQ,OAAOA,CAAK,CAC/B,QAAE,CACEL,EAAoB,CACxB,CACJ,EAEMQ,EAAgB,MAAON,GAAgB,CA5CjD,IAAAC,EA6CQ,GAAI,CACA,cAAMA,EAAAP,EAAe,YAAf,YAAAO,EAAA,KAAAP,EAA2BM,IAC1B,QAAQ,QAAQ,CAC3B,OAASG,EAAP,CACE,OAAKA,GAAA,MAAAA,EAAqC,cACtCR,EAASQ,EAAmC,YAAY,EAErD,QAAQ,OAAOA,CAAK,CAC/B,QAAE,CACEL,EAAoB,CACxB,CACJ,EAEA,OACI,GAAAR,QAAA,cAACD,EAAY,SAAZ,CACG,MAAO,CACH,GAAGK,EACH,MAAOK,EACP,OAAQK,EACR,UAAWE,EACX,WAAAb,CACJ,GAECD,CACL,CAER,EDnEA,IAAAe,GAA0D,iBAU7CC,GACTC,GACiC,CACjC,GAAM,CAAE,eAAAC,CAAe,KAAI,eAAyBC,CAAW,EAY/D,SAVsB,aAClB,CAAC,gBAAgB,EAEjBD,GAAA,KAAAA,EAAmB,IAAM,QAAQ,QAAQ,MAAS,EAClD,CACI,QAAS,CAAC,CAACA,EACX,GAAGD,CACP,CACJ,CAGJ,EE9BA,IAAAG,GAAkB,cAClBC,GAA0D,iBAiBnD,IAAMC,GAAiB,CAAc,CACxC,aAAAC,CACJ,EAAgC,CAAC,IAAsC,CACnE,GAAM,CAAE,gBAAAC,CAAgB,EAAI,GAAAC,QAAM,WAAyBC,CAAW,EAYtE,SAVsB,aAClB,CAAC,iBAAiB,EAElBF,GAAA,KAAAA,EAAoB,IAAM,QAAQ,QAAQ,MAAS,EACnD,CACI,QAAS,CAAC,CAACA,EACX,MAAO,EACX,CACJ,CAGJ,EClCA,IAAAG,GAAkB,cAClBC,GAA+C,iBAYxC,IAAMC,GAAY,IAKpB,CACD,GAAM,CAAE,KAAAC,CAAK,EAAIC,EAAc,EACzB,CAAE,OAAQC,CAAkB,EAC9B,GAAAC,QAAM,WAAyBC,CAAW,EACxC,CAAE,KAAAC,CAAK,EAAIC,GAAgB,EA2BjC,SAzBsB,gBAClB,YACAJ,EACA,CACI,UAAYK,GAAyB,CAC7BA,IAAyB,IAErBP,EADAO,GAGK,QAFoB,CAKrC,EACA,QAAUC,GAAiB,CACvBH,GAAA,MAAAA,EAAO,CACH,IAAK,kBACL,KAAM,QACN,SAASG,GAAA,YAAAA,EAAO,OAAQ,eACxB,aACIA,GAAA,YAAAA,EAAO,UAAW,oCAC1B,EACJ,CACJ,CACJ,CAGJ,EClDA,IAAAC,GAAkB,cAClBC,GAA+C,iBAC/CC,GAAe,WAgBR,IAAMC,GAAW,IAKnB,CACD,GAAM,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5B,CAAE,MAAOC,CAAiB,EAC5B,GAAAC,QAAM,WAAyBC,CAAW,EAExC,CAAE,YAAAC,CAAY,EAAIC,EAAiB,EACnC,CAAE,OAAAC,CAAO,EAAIF,EAAY,EACzB,CAAE,MAAAG,EAAO,KAAAC,CAAK,EAAIC,GAAgB,EAElC,CAAE,GAAAC,CAAG,EAAI,GAAAC,QAAG,MAAML,GAAA,YAAAA,EAAQ,UAAU,EAAE,EA+B5C,SA7BsB,gBAClB,WACAL,EACA,CACI,UAAYW,GAAyB,CACjC,GAAIF,EACA,OAAOX,EAAQW,CAAY,EAG3BE,IAAyB,IAErBb,EADAa,GAGQ,GAFoB,EAKpCL,GAAA,MAAAA,EAAQ,cACZ,EACA,QAAUM,GAAe,CACrBL,GAAA,MAAAA,EAAO,CACH,SAASK,GAAA,YAAAA,EAAO,OAAQ,cACxB,aAAaA,GAAA,YAAAA,EAAO,UAAW,sBAC/B,IAAK,cACL,KAAM,OACV,EACJ,CACJ,CACJ,CAGJ,EChEA,IAAAC,GAA2B,WAC3BC,GAAyC,iBAWlC,IAAMC,GACTC,GAC+B,CAC/B,GAAM,CAAE,UAAAC,CAAU,KAAI,eAAyBC,CAAW,EAY1D,SAVsB,aAClB,CAAC,mBAAoBF,CAAM,EAC3B,SAAY,CACR,MAAMC,GAAA,YAAAA,EAAYD,GACtB,EACA,CACI,MAAO,EACX,CACJ,CAGJ,EC5BA,IAAAG,GAAkB,cAClBC,GAA+C,iBAYxC,IAAMC,EAAgB,IAKxB,CACD,GAAM,CAAE,WAAYC,CAAsB,EACtC,GAAAC,QAAM,WAAyBC,CAAW,EAExC,CAAE,OAAQC,CAAO,EAAIC,GAAqC,EAQhE,SANsB,gBAAY,gBAAiBJ,EAAuB,CACtE,QAAUK,GAA0B,CAChCF,EAAO,CAAE,aAAAE,CAAa,CAAC,CAC3B,CACJ,CAAC,CAGL,EC/BA,IAAAC,GAA2B,WAQpB,IAAMC,GAA2B,IAAe,CACnD,GAAM,CAAE,WAAAC,CAAW,KAAI,eAAyBC,CAAW,EAE3D,OAAOD,GAAc,EACzB,ECZA,IAAAE,GAA+D,iBCAxD,IAAMC,GAAsBC,GACxBA,EAAc,ICDzB,IAAAC,GAAgB,mBAChBC,GAAsB,yBAGTC,GAAkB,CAC3BC,EACAC,EAAyCC,GAASA,IACnC,CACf,GAAM,CAACC,KAAYC,CAAI,EAAIJ,EAC3B,OAAOI,EACF,IAAKC,MAAU,GAAAC,YAAU,GAAAC,SAAIJ,EAASE,CAAK,CAAC,CAAC,EAC7C,IAAI,CAACH,EAAWM,EAAOC,IACpBR,EAAQ,KAAK,OAAWC,EAAMM,EAAOC,CAAK,CAC9C,CACR,ECdA,IAAAC,GAA2B,wBAC3BC,GAAsB,kBAMTC,GAA2B,CACpCC,EAAW,GACXC,IACS,CACT,IAAMC,KAAmB,GAAAC,SAAeH,CAAQ,EAChD,OAAIC,IAAS,WACF,GAAAG,QAAU,SAASF,CAAgB,EAEvC,GAAAE,QAAU,OAAOF,CAAgB,CAC5C,EChBO,IAAMG,GAAkB,CAACC,EAAc,CAAC,IACvCA,GAAA,MAAAA,EAAQ,GACD,CACH,GAAGA,EACH,GAAI,mBAAmBA,EAAO,EAAE,CACpC,EAEGA,ECFJ,IAAMC,EAAY,CACrBC,EACAC,EACAC,IACa,CACb,IAAMC,EAAeF,GAAoB,UACnCG,EAAmB,CACrB,IAAK,CAACD,CAAY,EAClB,YAAa,CAACA,EAAcH,GAAY,EAAE,EAC1C,KAAOK,GAAW,CACd,GAAGD,EAAK,YACR,OACA,CAAE,GAAGC,EAAQ,GAAGH,CAAS,CAC7B,EACA,KAAOI,GACH,CACI,GAAGF,EAAK,YACR,UACCE,GAAOA,EAAI,IAAI,MAAM,EACtB,CAAE,GAAGJ,CAAS,CAClB,EAAE,OAAQK,GAASA,IAAS,MAAS,EACzC,OAASC,GAAO,CACZ,GAAGJ,EAAK,YACR,SACAI,GAAA,YAAAA,EAAI,WACJ,CAAE,GAAGN,CAAS,CAClB,EACA,QAAUO,GACN,CAAC,UAAWT,EAAUS,EAAaP,CAAoB,EAAE,OACpDK,GAASA,IAAS,MACvB,CACR,EACA,OAAOH,CACX,ECtCO,IAAMM,GAAgB,CACzBC,EACAC,IAEI,CAACD,GAAe,CAACC,EACV,GAEJ,CAAC,CAACD,EAAY,KAAME,GAAMA,IAAMD,CAAM,ECL1C,IAAME,GAAiB,CAC1BC,EACAC,IACqB,CACrB,IAAIC,EAEJ,GAAIF,EAAK,WAAY,CACjB,IAAMG,EAAgBF,EAAmB,KACpCG,GAAMA,EAAE,OAASJ,EAAK,UAC3B,EACIG,GAAA,MAAAA,EAAe,YAKfD,EAAQ,GAJYH,GAChBI,EACAF,CACJ,KAC0BD,EAAK,OAC/BD,GAAeI,EAAeF,CAAkB,GACzCD,EAAK,aACZE,EAAQ,GAAGF,EAAK,cAAcA,EAAK,OAE3C,MACIE,EAAQF,EAAK,KAEjB,OAAOE,CACX,ECxBO,IAAMG,GACTC,GAC4B,CAJhC,IAAAC,EAAAC,EAAAC,EAKI,IAAMC,EAAO,CAAC,EACRC,EAA+C,CAAC,EAChDC,EAA8C,CAAC,EACjDC,EACAC,EAEJ,QAASC,EAAI,EAAGA,EAAIT,EAAU,OAAQS,IAAK,CACvCF,EAASP,EAAUS,GAEnB,IAAMC,GAAQP,GAAAD,EAAAK,EAAO,QAAP,KAAAL,GAAgBD,EAAAM,EAAO,UAAP,YAAAN,EAAgB,QAAhC,KAAAE,EAAyC,GAEvDE,EAAqBK,GAASH,EAC9BF,EAAqBK,GAAO,SAAc,CAAC,EAE3CJ,EAAoBC,EAAO,MAAQA,EACnCD,EAAoBC,EAAO,MAAM,SAAc,CAAC,CACpD,CAEA,QAAWI,KAAQN,EACXA,EAAqB,eAAeM,CAAI,IACxCH,EAAQH,EAAqBM,GAEzBH,EAAM,YAAcF,EAAoBE,EAAM,YAC9CF,EAAoBE,EAAM,YAAY,SAAY,KAAKA,CAAK,EAE5DJ,EAAK,KAAKI,CAAK,GAK3B,OAAOJ,CACX,ERYO,IAAMQ,GAAU,CAGrB,CACE,SAAAC,EACA,OAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAGK,CACD,IAAMC,EAAeC,EAAgB,EAC/BC,EAAWC,EAAUb,EAAUS,EAAkBJ,CAAQ,EACzD,CAAE,QAAAS,CAAQ,EAAIJ,EAAaD,CAAgB,EAE3CM,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAE3CC,GACFnB,GAAA,YAAAA,EAAc,WAAY,SAAaA,GAAA,YAAAA,EAAc,WAAY,GAErE,OAAAoB,GAAwB,CACpB,SAAAtB,EACA,MAAO,CAAC,GAAG,EACX,OAAQ,CACJ,SAAAK,EACA,WAAYJ,GAAA,YAAAA,EAAQ,WACpB,cAAeA,GAAA,YAAAA,EAAQ,cACvB,KAAMA,GAAA,YAAAA,EAAQ,KACd,QAASA,GAAA,YAAAA,EAAQ,QACjB,iBAAkB,UAClB,GAAGO,CACP,EACA,QAAS,aAAaR,IACtB,QAASqB,EACT,SAAAf,EACA,YAAAC,CACJ,CAAC,KAEqB,aAClBK,EAAS,KAAKX,CAAM,EACpB,IAAM,CACF,GAAM,CAAE,cAAAsB,KAAkBC,CAAW,EAAIvB,GAAU,CAAC,EACpD,OAAOa,EAAe,CAClB,SAAAd,EACA,GAAGwB,EACH,cAAAD,EACA,SAAAlB,CACJ,CAAC,CACL,EACA,CACI,GAAGH,EACH,UAAYuB,GAAS,CA5GjC,IAAAC,GA6GgBA,EAAAxB,GAAA,YAAAA,EAAc,YAAd,MAAAwB,EAAA,KAAAxB,EAA0BuB,GAE1B,IAAME,EACF,OAAOxB,GAAwB,WACzBA,EACIsB,EACA,CAAE,SAAApB,EAAU,OAAAJ,CAAO,EACnBD,CACJ,EACAG,EAEVgB,EAAmBQ,CAAkB,CACzC,EACA,QAAUC,GAAgB,CA1HtC,IAAAF,EA2HgBT,EAAWW,CAAG,GACdF,EAAAxB,GAAA,YAAAA,EAAc,UAAd,MAAAwB,EAAA,KAAAxB,EAAwB0B,GAExB,IAAMD,EACF,OAAOvB,GAAsB,WACvBA,EAAkBwB,EAAK,CAAE,SAAAvB,EAAU,OAAAJ,CAAO,EAAGD,CAAQ,EACrDI,EAEVe,EAAmBQ,EAAoB,CACnC,IAAK,GAAG3B,yBACR,QAASe,EACL,6BACA,CAAE,WAAYa,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,ESlJA,IAAAC,GAA+D,iBCA/D,IAAAC,GAAsC,WACtCC,GAAsB,yBACtBC,GAA2B,8BAWdC,GAAoBC,GAAgB,CAC7C,GAAM,CAAE,QAAAC,EAAS,SAAAC,EAAU,OAAAC,EAAQ,QAAAC,CAAQ,EAAI,GAAAC,QAAG,MAC9CL,EAAI,UAAU,CAAC,CACnB,EAEA,MAAO,CACH,cAAeC,GAAW,OAAOA,CAAO,EACxC,eAAgBC,GAAY,OAAOA,CAAQ,EAC3C,aAAeC,GAAA,KAAAA,EAA0B,CAAC,EAC1C,cAAgBC,GAAA,KAAAA,EAA2B,CAAC,CAChD,CACJ,EAEaE,GAA6BC,GAAgB,CACtD,IAAMP,EAAM,GAAAK,QAAG,UAAUE,CAAM,EAC/B,OAAOR,GAAiB,IAAIC,GAAK,CACrC,EAEaQ,GAAwBD,GAIvB,CACV,IAAME,EAA6B,CAC/B,UAAW,GACX,YAAa,UACb,OAAQ,EACZ,EACM,CAAE,WAAAC,EAAY,OAAAP,EAAQ,QAAAC,CAAQ,EAAIG,EAOxC,OALoB,GAAAF,QAAG,UACnB,CAAE,GAAIK,GAA0B,CAAC,EAAI,OAAAP,EAAQ,QAAAC,CAAQ,EACrDK,CACJ,CAGJ,EAEaE,GAAiB,CAC1BC,EACAC,KAGK,UAAWD,EAAOA,EAAK,MAAQ,UAC3B,UAAWC,EAAQA,EAAM,MAAQ,SACtCD,EAAK,UAAYC,EAAM,SAIlBC,GAAiB,CAACF,EAAgBC,IAC3CD,EAAK,OAASC,EAAM,MAMXE,GAAe,CACxBC,EACAC,EACAC,EAA2B,CAAC,OAE5B,GAAAC,SAAUH,EAAiBC,EAAYC,EAAaP,EAAc,EAAE,OAC/DS,GACGA,EAAW,QAAU,QACrBA,EAAW,QAAU,OACpBA,EAAW,WAAa,MACpBA,EAAW,WAAa,MACrBA,EAAW,MAAM,SAAW,EAC5C,EAESC,GAAe,CACxBC,EACAC,OAEA,GAAAJ,SAAUG,EAAiBC,EAAYT,EAAc,EAAE,OAClDU,GACGA,EAAW,QAAU,QAAaA,EAAW,QAAU,IAC/D,EAESC,GAAoB,CAC7BT,EACAU,IACc,CACd,MAAG,GAAAC,SAAeD,EAAeV,EAAiBL,EAAc,EAChE,GAAGK,CACP,EAEaY,GAAoB,CAC7BN,EACAO,IACc,CACd,MAAG,GAAAF,SAAeE,EAAeP,EAAiBR,EAAc,EAChE,GAAGQ,CACP,EAEaQ,GAAsB,CAC/BC,EACA5B,IACwB,CACxB,GAAI,CAACA,EACD,OAGJ,IAAM6B,EAAW7B,EAAO,KAAM8B,GAASA,EAAK,QAAUF,CAAU,EAEhE,GAAIC,EACA,OAAOA,EAAS,KAIxB,EAEaE,GAAmB,CAC5BH,EACA3B,EACA+B,EAA8B,OACI,CAClC,IAAMC,EAAShC,GAAA,YAAAA,EAAS,KAAMgC,GAAW,CACrC,GAAIA,EAAO,WAAa,KAAM,CAC1B,GAAM,CAAE,SAAAC,EAAU,MAAAC,CAAM,EAAIF,EAC5B,OAAOE,IAAUP,GAAcM,IAAaF,CAChD,CAEJ,GAEA,GAAIC,EACA,OAAOA,EAAO,OAAS,CAAC,CAIhC,EC/IO,IAAMG,GAAeC,GACjB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpC,IAAMC,EAAS,IAAI,WAEbC,EAAgB,IAAM,CACpBD,EAAO,SACPA,EAAO,oBAAoB,OAAQC,EAAe,EAAK,EAEvDH,EAAQE,EAAO,MAAgB,EAEvC,EAEAA,EAAO,iBAAiB,OAAQC,EAAe,EAAK,EAEpDD,EAAO,cAAcH,EAAK,aAAqB,EAC/CG,EAAO,QAAWE,IACdF,EAAO,oBAAoB,OAAQC,EAAe,EAAK,EAChDF,EAAOG,CAAK,EAE3B,CAAC,EFqBE,IAAMC,GAAS,CAGpB,CACE,SAAAC,EACA,GAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAA8E,CAC1E,IAAMC,EAAeC,EAAgB,EAC/BC,EAAWC,EAAUb,EAAUS,EAAkBJ,CAAQ,EAEzD,CAAE,OAAAS,CAAO,EAAIJ,EAAaD,CAAgB,EAC1CM,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAEjD,OAAAC,GAAwB,CACpB,SAAArB,EACA,MAAO,CAAC,GAAG,EACX,QAAS,aAAaA,IACtB,OAAQ,CACJ,IAAKC,EAAK,CAACA,CAAE,EAAI,CAAC,EAClB,GAAIA,EACJ,SAAAI,EACA,iBAAkB,SAClB,GAAGG,CACP,EACA,QAASN,GAAA,YAAAA,EAAc,QACvB,SAAAI,EACA,YAAAC,CACJ,CAAC,KAEqB,aAClBK,EAAS,OAAOX,CAAE,EAClB,IAAMa,EAAc,CAAE,SAAAd,EAAU,GAAAC,EAAI,SAAAI,CAAS,CAAC,EAC9C,CACI,GAAGH,EACH,UAAYoB,GAAS,CApFjC,IAAAC,GAqFgBA,EAAArB,GAAA,YAAAA,EAAc,YAAd,MAAAqB,EAAA,KAAArB,EAA0BoB,GAE1B,IAAME,EACF,OAAOrB,GAAwB,WACzBA,EAAoBmB,EAAM,CAAE,GAAArB,EAAI,SAAAI,CAAS,EAAGL,CAAQ,EACpDG,EAEVgB,EAAmBK,CAAkB,CACzC,EACA,QAAUC,GAAgB,CA9FtC,IAAAF,EA+FgBN,EAAWQ,CAAG,GACdF,EAAArB,GAAA,YAAAA,EAAc,UAAd,MAAAqB,EAAA,KAAArB,EAAwBuB,GAExB,IAAMD,EACF,OAAOpB,GAAsB,WACvBA,EAAkBqB,EAAK,CAAE,GAAAxB,EAAI,SAAAI,CAAS,EAAGL,CAAQ,EACjDI,EAEVe,EAAmBK,EAAoB,CACnC,IAAK,GAAGvB,KAAMD,wBACd,QAASe,EACL,sBACA,CAAE,WAAYU,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,EGtHA,IAAAC,GAA+D,iBAwCxD,IAAMC,GAAU,CAGrB,CACE,SAAAC,EACA,IAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAEK,CACD,IAAMC,EAAeC,EAAgB,EAC/BC,EAAWC,EAAUb,EAAUS,EAAkBJ,CAAQ,EAEzD,CAAE,QAAAS,CAAQ,EAAIJ,EAAaD,CAAgB,EAE3CM,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAqBC,EAAsB,EAE3CC,GACFnB,GAAA,YAAAA,EAAc,WAAY,SAAaA,GAAA,YAAAA,EAAc,WAAY,GAErE,OAAAoB,GAAwB,CACpB,SAAAtB,EACA,MAAO,CAAC,GAAG,EACX,OAAQ,CACJ,IAAKC,GAAA,KAAAA,EAAO,CAAC,EACb,SAAAI,EACA,iBAAkB,UAClB,GAAGG,CACP,EACA,QAAS,aAAaR,IACtB,QAASqB,EACT,SAAAf,EACA,YAAAC,CACJ,CAAC,KAEqB,aAClBK,EAAS,KAAKX,CAAG,EACjB,IAAMa,EAAe,CAAE,SAAAd,EAAU,IAAAC,EAAK,SAAAI,CAAS,CAAC,EAChD,CACI,GAAGH,EACH,UAAYqB,GAAS,CAzFjC,IAAAC,GA0FgBA,EAAAtB,GAAA,YAAAA,EAAc,YAAd,MAAAsB,EAAA,KAAAtB,EAA0BqB,GAE1B,IAAME,EACF,OAAOtB,GAAwB,WACzBA,EAAoBoB,EAAMtB,EAAKD,CAAQ,EACvCG,EAEVgB,EAAmBM,CAAkB,CACzC,EACA,QAAUC,GAAgB,CAnGtC,IAAAF,EAoGgBP,EAAWS,CAAG,GACdF,EAAAtB,GAAA,YAAAA,EAAc,UAAd,MAAAsB,EAAA,KAAAtB,EAAwBwB,GAExB,IAAMD,EACF,OAAOrB,GAAsB,WACvBA,EAAkBsB,EAAKzB,EAAKD,CAAQ,EACpCI,EAEVe,EAAmBM,EAAoB,CACnC,IAAK,GAAGxB,EAAI,MAAMD,yBAClB,QAASe,EACL,sBACA,CAAE,WAAYW,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,EC3HA,IAAAC,GAA+D,iBCA/D,IAAAC,GAA6C,cAC7CC,GAA6B,eAOtB,IAAMC,GAAuB,GAAAC,QAAM,cAAqC,CAC3E,cAAe,CAAC,EAChB,qBAAsB,IAAM,EAChC,CAAC,EAEKC,GAAiC,CAAC,EAE3BC,GAAuB,CAACC,EAAyBC,IAAgB,CAC1E,OAAQA,EAAO,gBAEP,MAAO,CACH,GAAGD,EAAM,OACJE,GACGA,EAAiB,IAAMD,EAAO,QAAQ,IACtCC,EAAiB,UAAYD,EAAO,QAAQ,QACpD,EACA,CACI,GAAGA,EAAO,QACV,UAAW,EACf,CACJ,eAEA,OAAOD,EAAM,OACRE,GACGA,EAAiB,IAAMD,EAAO,QAAQ,IACtCC,EAAiB,UAAYD,EAAO,QAAQ,QACpD,qCAEA,OAAOD,EAAM,IAAKE,GAEVA,EAAiB,IAAMD,EAAO,QAAQ,IACtCC,EAAiB,UAAYD,EAAO,QAAQ,SAErC,CACH,GAAGC,EACH,QAASD,EAAO,QAAQ,QAAU,GACtC,EAEGC,CACV,UAED,OAAOF,EAEnB,EAEaG,GACT,CAAC,CAAE,SAAAC,CAAS,IAAM,CACd,GAAM,CAACC,EAAeC,CAAoB,KAAI,eAC1CP,GACAD,EACJ,EAEMS,EAAmB,CAAE,cAAAF,EAAe,qBAAAC,CAAqB,EAE/D,OACI,GAAAT,QAAA,cAACD,GAAqB,SAArB,CAA8B,MAAOW,GACjCH,EACA,OAAO,OAAW,QACf,iBACI,GAAAP,QAAA,cAACW,GAAA,CAAc,cAAeH,EAAe,EAC7C,SAAS,IACb,CACR,CAER,EDxDJ,IAAAI,GAAsB,kBAiDf,IAAMC,GAAY,IAI8B,CACnD,IAAMC,KAAc,mBAAe,EAC7BC,EAAeC,EAAgB,EAE/B,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EACdC,EAAYC,EAAa,EACzB,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAUC,EAAW,EACrB,CAAE,IAAAC,CAAI,EAAIC,GAAO,EACjB,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAqTtC,SAnTiB,gBAMb,CAAC,CACG,GAAAC,EACA,OAAAC,EACA,SAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IAAM,CACF,IAAMC,EACFL,GAAA,KAAAA,EAAgBpB,EAEd0B,EACFL,GAAA,KAAAA,EAAmBpB,EAEvB,OAAMwB,IAA8B,WACzB3B,EAAa0B,CAAgB,EAAE,OAClC,CACI,SAAAL,EACA,GAAAF,EACA,UAAWC,EACX,SAAAK,CACJ,CACJ,EAEkB,IAAI,QACtB,CAACI,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrB/B,EAAa0B,CAAgB,EACxB,OAA0B,CACvB,SAAAL,EACA,GAAAF,EACA,UAAWC,EACX,SAAAK,CACJ,CAAC,EACA,KAAMO,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIN,GACAA,EAASU,CAAc,EAG3BrB,EAAqB,CACjB,WACA,QAAS,CACL,GAAIM,EACJ,SAAUE,EACV,eAAgBa,EAChB,WAAYH,EACZ,QAASH,EACT,SAAU,CAAC,CAACJ,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EACA,CACI,SAAU,MAAO,CACb,SAAAH,EACA,GAAAF,EACA,aAAAG,EACA,OAAAF,EACA,iBAAAM,CACJ,IAAM,CACF,IAAMS,EAAWC,EAAUf,EAAUK,CAAgB,EAE/CW,EACFtC,EAAY,eAAeoC,EAAS,WAAW,EAE7CR,EACFL,GAAA,KAAAA,EAAgBpB,EAEpB,aAAMH,EAAY,cACdoC,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEMR,IAA8B,gBAEhC5B,EAAY,eACRoC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAEX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAAkB,CA1L9E,IAAAC,EA2LgC,QAAIA,EAAAD,EAAO,KAAP,YAAAC,EAAW,eAAetB,GAAA,YAAAA,EAAI,YACvB,CACH,GAAAA,EACA,GAAGC,CACP,EAEGoB,CACX,CAAC,EAED,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EAEAxC,EAAY,eACRoC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAAkB,CAlN9E,IAAAC,EAmNgC,QAAIA,EAAAD,EAAO,KAAP,YAAAC,EAAW,eAAetB,GAAA,YAAAA,EAAI,cAC9BqB,EAAS,CACL,GAAArB,EACA,GAAGC,CACP,GAEGoB,CACX,CAAC,EACD,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EAEAxC,EAAY,eACRoC,EAAS,OAAOhB,CAAE,EACjBmB,GACQA,EAIE,CACH,GAAGA,EACH,KAAM,CACF,GAAGA,EAAS,KACZ,GAAGlB,CACP,CACJ,EATW,IAWnB,GAGG,CACH,gBAAAiB,EACA,SAAAF,CACJ,CACJ,EACA,UAAW,CACPO,EACAC,EACA,CACI,GAAAxB,EACA,SAAAE,EACA,iBAAAK,EACA,YAAAkB,EAAc,CAAC,OAAQ,OAAQ,QAAQ,CAC3C,IACC,CACD3B,EAAgB,CACZ,SAAAI,EACA,iBAAAK,EACA,YAAAkB,EACA,GAAAzB,CACJ,CAAC,EAEDN,EAAqB,CACjB,cACA,QAAS,CAAE,GAAAM,EAAI,SAAAE,CAAS,CAC5B,CAAC,CACL,EACA,UAAW,CACPkB,EACA,CACI,GAAApB,EACA,SAAAE,EACA,oBAAAwB,EACA,iBAAAnB,EACA,OAAAN,EACA,SAAAK,CACJ,EACAqB,IACC,CA1RjB,IAAAL,EA2RgB,IAAMM,EAAmB,GAAAC,QAAU,SAAS3B,CAAQ,EAE9C4B,EACF,OAAOJ,GAAwB,WACzBA,EAAoBN,EAAM,CAAE,GAAApB,EAAI,OAAAC,CAAO,EAAGC,CAAQ,EAClDwB,EAEV9B,EAAmBkC,EAAoB,CACnC,IAAK,GAAG9B,KAAME,iBACd,YAAahB,EACT,wBACA,YACJ,EACA,QAASA,EACL,4BACA,CACI,SAAUA,EACN,GAAGgB,KAAYA,IACf0B,CACJ,CACJ,EACA,wBAAwBA,GAC5B,EACA,KAAM,SACV,CAAC,EAEDtC,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaY,IACtB,KAAM,UACN,QAAS,CACL,KAAKoB,EAAAF,EAAK,OAAL,MAAAE,EAAW,GAAK,CAACF,EAAK,KAAK,EAAE,EAAI,MAC1C,EACA,KAAM,IAAI,IACd,GAEA,IAAIW,EACJ,GAAIJ,EAAS,CACT,IAAMK,EAAYpD,EAAY,aAE5B+C,EAAQ,SAAS,OAAO3B,CAAE,CAAC,EAE7B+B,EAAe,OAAO,KAAK9B,CAAM,EAAE,OAC/B,CAACgC,EAAKC,IAAS,CArUvC,IAAAZ,EAsU4B,OAAAW,EAAIC,IAAQZ,EAAAU,GAAA,YAAAA,EAAW,OAAX,YAAAV,EAAkBY,GACvBD,CACX,EACA,CAAC,CACL,CACJ,CAEA,GAAM,CAAE,OAAAE,EAAQ,UAAAC,EAAW,UAAAC,KAAcC,CAAK,EAC1ChC,GAAY,CAAC,EAEjBd,GAAA,MAAAA,EAAK,OAAO,CACR,OAAQ,SACR,SAAAU,EACA,KAAMD,EACN,aAAA8B,EACA,KAAM,CACF,GAAA/B,EACA,iBAAAO,EACA,GAAG+B,CACP,CACJ,EACJ,EACA,QAAS,CACLxB,EACA,CAAE,GAAAd,EAAI,SAAAE,EAAU,kBAAAqC,EAAmB,OAAAtC,CAAO,EAC1C0B,IACC,CAGD,GAAIA,EACA,QAAWa,KAASb,EAAQ,gBACxB/C,EAAY,aAAa4D,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAI1B,EAAI,UAAY,oBAAqB,CACrC1B,GAAA,MAAAA,EAAa0B,GAEb,IAAMc,EAAmB,GAAAC,QAAU,SAAS3B,CAAQ,EAE9C4B,EACF,OAAOS,GAAsB,WACvBA,EAAkBzB,EAAK,CAAE,GAAAd,EAAI,OAAAC,CAAO,EAAGC,CAAQ,EAC/CqC,EAEV3C,EAAmBkC,EAAoB,CACnC,IAAK,GAAG9B,KAAME,iBACd,QAAShB,EACL,0BACA,CACI,SAAUA,EACN,GAAGgB,KAAYA,IACf0B,CACJ,EACA,WAAYd,EAAI,UACpB,EACA,uBAAuBc,mBAAkCd,EAAI,aACjE,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CACJ,CAGJ,EEzYA,IAAA2B,GAA+C,iBAC/CC,GAAsB,kBAoDf,IAAMC,GAAY,IAI8B,CACnD,GAAM,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAeC,EAAgB,EAC/BC,EAAkBC,GAAc,EAEhCC,EAAYC,EAAa,EACzBC,EAAUC,EAAW,EACrB,CAAE,IAAAC,CAAI,EAAIC,GAAO,EACjBC,EAAqBC,EAAsB,EAwHjD,SAtHiB,gBAMb,CAAC,CACG,SAAAC,EACA,OAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IACWf,EAAae,CAAgB,EAAE,OAA0B,CAC5D,SAAAH,EACA,UAAWC,EACX,SAAAC,CACJ,CAAC,EAEL,CACI,UAAW,CACPE,EACA,CACI,SAAAJ,EACA,oBAAqBK,EACrB,iBAAAF,EACA,YAAAG,EAAc,CAAC,OAAQ,MAAM,EAC7B,OAAAL,EACA,SAAAC,CACJ,IACC,CAhGjB,IAAAK,EAAAC,EAAAC,EAiGgB,IAAMC,EAAmB,GAAAC,QAAU,SAASX,CAAQ,EAE9CY,EACF,OAAOP,GAAgC,WACjCA,EAA4BD,EAAMH,EAAQD,CAAQ,EAClDK,EAEVP,EAAmBc,EAAoB,CACnC,IAAK,UAAUZ,iBACf,QAASR,EACL,8BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfU,CACJ,CACJ,EACA,wBAAwBA,GAC5B,EACA,YAAalB,EAAU,wBAAyB,SAAS,EACzD,KAAM,SACV,CAAC,EAEDF,EAAgB,CACZ,SAAAU,EACA,iBAAAG,EACA,YAAAG,CACJ,CAAC,EAEDZ,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaM,IACtB,KAAM,UACN,QAAS,CACL,KAAKO,EAAAH,GAAA,YAAAA,EAAM,OAAN,MAAAG,EAAY,GAAK,CAACH,EAAK,KAAK,EAAE,EAAI,MAC3C,EACA,KAAM,IAAI,IACd,GAEA,GAAM,CAAE,OAAAS,EAAQ,UAAAC,EAAW,UAAAC,KAAcC,CAAK,EAC1Cd,GAAY,CAAC,EAEjBN,GAAA,MAAAA,EAAK,OAAO,CACR,OAAQ,SACR,SAAAI,EACA,KAAMC,EACN,KAAM,CACF,iBAAAE,EACA,IAAIM,GAAAD,EAAAJ,GAAA,YAAAA,EAAM,OAAN,YAAAI,EAAY,KAAZ,KAAAC,EAAkB,OACtB,GAAGO,CACP,CACJ,EACJ,EACA,QAAS,CACLC,EACA,CACI,SAAAjB,EACA,kBAAmBkB,EACnB,OAAAjB,CACJ,IACC,CACDf,EAAW+B,CAAG,EACd,IAAMP,EAAmB,GAAAC,QAAU,SAASX,CAAQ,EAE9CY,EACF,OAAOM,GAA8B,WAC/BA,EAA0BD,EAAKhB,EAAQD,CAAQ,EAC/CkB,EAEVpB,EAAmBc,EAAoB,CACnC,IAAK,UAAUZ,iBACf,YAAaiB,EAAI,QACjB,QAASzB,EACL,4BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfU,CACJ,EACA,WAAYO,EAAI,UACpB,EACA,+BAA+BP,mBAAkCO,EAAI,aACzE,EACA,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,EC1LA,IAAAE,GAA+D,iBAC/DC,GAAsB,kBAgEf,IAAMC,GAAY,IAI8B,CACnD,GAAM,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvCC,EAAeC,EAAgB,EAE/BC,KAAc,mBAAe,EAE7B,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EAEd,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAYC,EAAa,EACzBC,EAAUC,EAAW,EACrB,CAAE,IAAAC,CAAI,EAAIC,GAAO,EACjBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAwQtC,SAtQiB,gBAMb,CAAC,CACG,GAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,OAAAC,CACJ,IAAM,CACF,IAAMC,EACFP,GAAA,KAAAA,EAAgBhB,EAEdwB,EACFP,GAAA,KAAAA,EAAmBhB,EAEvB,OAAMsB,IAA8B,WACzB1B,EAAawB,CAAgB,EAAE,UAAiB,CACnD,SAAAH,EACA,GAAAH,EACA,SAAAK,EACA,UAAWE,CACf,CAAC,EAGiB,IAAI,QACtB,CAACG,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrB9B,EAAawB,CAAgB,EACxB,UAAiB,CACd,SAAAH,EACA,GAAAH,EACA,SAAAK,EACA,UAAWE,CACf,CAAC,EACA,KAAMM,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIP,GACAA,EAASW,CAAc,EAG3B3B,EAAqB,CACjB,WACA,QAAS,CACL,GAAAY,EACA,SAAUG,EACV,eAAgBY,EAChB,WAAYH,EACZ,QAASH,EACT,SAAU,CAAC,CAACL,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EACA,CACI,SAAU,MAAO,CACb,GAAAJ,EACA,SAAAG,EACA,aAAAF,EACA,iBAAAK,CACJ,IAAM,CACF,IAAMU,EAAWC,EAAUd,EAAUG,CAAgB,EAE/CE,EACFP,GAAA,KAAAA,EAAgBhB,EAEpB,MAAMD,EAAY,cACdgC,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEA,IAAME,EACFlC,EAAY,eAAegC,EAAS,WAAW,EAEnD,OAAMR,IAA8B,gBAEhCxB,EAAY,eACRgC,EAAS,KAAK,EACbG,GACQA,EAQE,CACH,KANSA,EAAS,KAAK,OACtBC,GAAe,CA3LhD,IAAAC,EA4LoC,QAAAA,EAAAD,EAAO,KAAP,YAAAC,EAAW,cAAerB,EAAG,SAAS,EAC9C,EAII,MAAOmB,EAAS,MAAQ,CAC5B,EAVW,IAYnB,EAEAnC,EAAY,eACRgC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAEX,IAAMG,EAAOH,EAAS,KAAK,OACtBC,GAAkB,CA7MnD,IAAAC,EA8MoC,QACIA,EAAAD,EAAO,KAAP,YAAAC,EAAW,eAAerB,GAAA,YAAAA,EAAI,WAEtC,CACJ,EAEA,MAAO,CACH,GAAGmB,EACH,KAAAG,CACJ,CACJ,CACJ,GAGG,CACH,gBAAAJ,EACA,SAAAF,CACJ,CACJ,EACA,UAAW,CACPO,EACAC,EACA,CACI,GAAAxB,EACA,SAAAG,EACA,iBAAAG,EACA,YAAAmB,EAAc,CAAC,OAAQ,MAAM,CACjC,IACC,CAED3B,EAAgB,CACZ,SAAAK,EACA,iBAAAG,EACA,YAAAmB,CACJ,CAAC,EAEDrC,EAAqB,CACjB,cACA,QAAS,CAAE,GAAAY,EAAI,SAAAG,CAAS,CAC5B,CAAC,CACL,EACA,UAAW,CACPoB,EACA,CACI,GAAAvB,EACA,SAAAG,EACA,oBAAAuB,EACA,iBAAApB,EACA,SAAAD,CACJ,EACAsB,IACC,CACD,IAAMC,EAAmB,GAAAC,QAAU,SAAS1B,GAAA,KAAAA,EAAY,EAAE,EAG1DnB,EAAY,cAAc2C,GAAA,YAAAA,EAAS,SAAS,OAAO3B,EAAG,EAEtD,IAAM8B,EACF,OAAOJ,GAAwB,WACzBA,EAAoBH,EAAOvB,EAAIG,CAAQ,EACvCuB,EAEV9B,EAAmBkC,EAAoB,CACnC,IAAK,GAAG9B,KAAMG,iBACd,YAAab,EAAU,wBAAyB,SAAS,EACzD,QAASA,EACL,8BACA,CACI,SAAUA,EACN,GAAGa,KAAYA,IACfyB,CACJ,CACJ,EACA,0BAA0BA,GAC9B,EACA,KAAM,SACV,CAAC,EAEDpC,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaW,IACtB,KAAM,UACN,QAAS,CACL,IAAKH,EAAK,CAACA,CAAE,EAAI,CAAC,CACtB,EACA,KAAM,IAAI,IACd,GAEA,GAAM,CAAE,OAAA+B,EAAQ,UAAAC,EAAW,UAAAC,KAAcC,CAAK,EAC1C7B,GAAY,CAAC,EAEjBX,GAAA,MAAAA,EAAK,OAAO,CACR,OAAQ,SACR,SAAAS,EACA,KAAM,CACF,GAAAH,EACA,iBAAAM,EACA,GAAG4B,CACP,CACJ,GAGAlD,EAAY,cAAc2C,GAAA,YAAAA,EAAS,SAAS,OAAO3B,EAAG,CAC1D,EACA,QAAS,CACLc,EACA,CAAE,GAAAd,EAAI,SAAAG,EAAU,kBAAAgC,CAAkB,EAClCR,IACC,CAED,GAAIA,EACA,QAAWS,KAAST,EAAQ,gBACxB3C,EAAY,aAAaoD,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAItB,EAAI,UAAY,oBAAqB,CACrClC,EAAWkC,CAAG,EAEd,IAAMc,EAAmB,GAAAC,QAAU,SAAS1B,GAAA,KAAAA,EAAY,EAAE,EAEpD2B,EACF,OAAOK,GAAsB,WACvBA,EAAkBrB,EAAKd,EAAIG,CAAQ,EACnCgC,EAEVvC,EAAmBkC,EAAoB,CACnC,IAAK,GAAG9B,KAAMG,iBACd,QAASb,EACL,4BACA,CACI,SAAUsC,EACV,WAAYd,EAAI,UACpB,EACA,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CACJ,CAGJ,EC9VA,IAAAuB,GAA+C,iBAiB/C,IAAAC,GAAsB,kBAiCTC,GAAgB,IAI8B,CACvD,IAAMC,EAAeC,EAAgB,EAE/BC,EAAYC,EAAa,EACzBC,EAAUC,EAAW,EACrBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAiGtC,SA/FiB,gBAKb,CAAC,CACG,SAAAC,EACA,OAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IACIb,EAAaa,CAAgB,EAAE,WAA8B,CACzD,SAAAH,EACA,UAAWC,EACX,SAAAC,CACJ,CAAC,EACL,CACI,UAAW,CACPE,EACA,CACI,SAAAJ,EACA,oBAAAK,EACA,iBAAAF,EACA,YAAAG,EAAc,CAAC,OAAQ,MAAM,EAC7B,OAAAL,CACJ,IACC,CACD,IAAMM,EAAiB,GAAAC,QAAU,OAAOR,CAAQ,EAE1CS,EACF,OAAOJ,GAAwB,WACzBA,EAAoBD,EAAUH,EAAQD,CAAQ,EAC9CK,EAEVT,EAAmBa,EAAoB,CACnC,IAAK,cAAcT,iBACnB,QAASR,EACL,8BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfA,CACJ,CACJ,EACA,wBAAwBO,GAC5B,EACA,YAAaf,EAAU,wBAAyB,SAAS,EACzD,KAAM,SACV,CAAC,EAEDM,EAAgB,CACZ,SAAAE,EACA,iBAAAG,EACA,YAAAG,CACJ,CAAC,EAED,IAAMI,EAAMN,GAAA,YAAAA,EAAU,KACjB,OAAQO,IAASA,GAAA,YAAAA,EAAM,MAAO,QAC9B,IAAKA,GAASA,EAAK,IAExBjB,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaM,IACtB,KAAM,UACN,QAAS,CACL,IAAAU,CACJ,EACA,KAAM,IAAI,IACd,EACJ,EACA,QAAS,CAACE,EAAa,CAAE,SAAAZ,EAAU,kBAAAa,EAAmB,OAAAZ,CAAO,IAAM,CAC/D,IAAMQ,EACF,OAAOI,GAAsB,WACvBA,EAAkBD,EAAKX,EAAQD,CAAQ,EACvCa,EAEVjB,EAAmBa,EAAoB,CACnC,IAAK,cAAcT,iBACnB,YAAaY,EAAI,QACjB,QAASpB,EACL,4BACA,CACI,SAAUA,EACN,GAAGQ,KAAYA,IACfA,CACJ,EACA,WAAYY,EAAI,UACpB,EACA,+BAA+BZ,mBAA0BY,EAAI,YACjE,EACA,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,EC9JA,IAAAE,GAA+D,iBAC/DC,GAAsB,kBA+Df,IAAMC,GAAgB,IAI8B,CACvD,IAAMC,KAAc,mBAAe,EAC7BC,EAAeC,EAAgB,EAC/BC,EAAYC,EAAa,EAEzB,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EACd,CAAE,OAAQC,CAAW,EAAIC,EAAc,EACvC,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAUC,EAAW,EACrBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAoStC,SAlSiB,gBAMb,CAAC,CACG,IAAAC,EACA,OAAAC,EACA,SAAAC,EACA,SAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IAAoC,CAChC,IAAMC,EACFJ,GAAA,KAAAA,EAAgBjB,EAEdsB,EACFJ,GAAA,KAAAA,EAAmBjB,EAEvB,OAAMoB,IAA8B,WACzBzB,EAAawB,CAAgB,EAAE,WAGpC,CACE,SAAAL,EACA,IAAAF,EACA,UAAWC,EACX,SAAAK,CACJ,CAAC,EAGiB,IAAI,QACtB,CAACI,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrB7B,EAAawB,CAAgB,EACxB,WAA8B,CAC3B,SAAAL,EACA,IAAAF,EACA,UAAWC,EACX,SAAAK,CACJ,CAAC,EACA,KAAMO,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIR,GACAA,EAASY,CAAc,EAG3BvB,EAAqB,CACjB,WACA,QAAS,CACL,GAAIQ,EACJ,SAAUE,EACV,eAAgBa,EAChB,WAAYH,EACZ,QAASH,EACT,SAAU,CAAC,CAACN,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EAEA,CACI,SAAU,MAAO,CACb,SAAAD,EACA,IAAAF,EACA,OAAAC,EACA,aAAAG,EACA,iBAAAG,EACA,SAAAD,CACJ,IAAM,CACF,IAAMU,EAAWC,EACbf,EACAK,EACAD,CACJ,EAEME,EACFJ,GAAA,KAAAA,EAAgBjB,EAEpB,MAAML,EAAY,cACdkC,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEA,IAAME,EAAkBpC,EAAY,eAElCkC,EAAS,WAAW,EAEtB,GAAMR,IAA8B,cAAgB,CAEhD1B,EAAY,eACRkC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAExBA,EAAO,KAAO,QACdrB,EACK,OAAQsB,GAAOA,IAAO,MAAS,EAC/B,IAAI,MAAM,EACV,SAASD,EAAO,GAAG,SAAS,CAAC,EAE3B,CACH,GAAGA,EACH,GAAGpB,CACP,EAGGoB,CACV,EAED,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EAEAtC,EAAY,eACRkC,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAOD,EAAS,KAAK,IAAKE,GAExBA,EAAO,KAAO,QACdrB,EACK,OAAQsB,GAAOA,IAAO,MAAS,EAC/B,IAAI,MAAM,EACV,SAASD,EAAO,GAAG,SAAS,CAAC,EAE3B,CACH,GAAGA,EACH,GAAGpB,CACP,EAEGoB,CACV,EACD,MAAO,CACH,GAAGF,EACH,KAAAC,CACJ,CACJ,CACJ,EACA,QAAWE,KAAMtB,EACblB,EAAY,eACRkC,EAAS,OAAOM,CAAE,EACjBH,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAO,CACT,GAAGD,EAAS,KACZ,GAAGlB,CACP,EACA,MAAO,CACH,GAAGkB,EACH,KAAAC,CACJ,CACJ,CACJ,CAER,CAEA,MAAO,CACH,gBAAAF,EACA,SAAAF,CACJ,CACJ,EACA,UAAW,CAACO,EAAOC,EAAQ,CAAE,IAAAxB,EAAK,SAAAE,EAAU,iBAAAK,CAAiB,IAAM,CAE/DT,EAAgB,CACZ,SAAAI,EACA,YAAa,CAAC,OAAQ,MAAM,EAC5B,iBAAAK,CACJ,CAAC,EAEDP,EAAI,QAASsB,GACTxB,EAAgB,CACZ,SAAAI,EACA,YAAa,CAAC,QAAQ,EACtB,iBAAAK,EACA,GAAAe,CACJ,CAAC,CACL,EAEA9B,EAAqB,CACjB,cACA,QAAS,CAAE,GAAIQ,EAAK,SAAAE,CAAS,CACjC,CAAC,CACL,EACA,UAAW,CACPkB,EACA,CAAE,IAAApB,EAAK,SAAAE,EAAU,oBAAAuB,EAAqB,OAAAxB,CAAO,IAC5C,CACD,IAAMyB,EAAmB,GAAAC,QAAU,SAASzB,CAAQ,EAE9C0B,EACF,OAAOH,GAAwB,WACzBA,EAAoBL,EAAM,CAAE,IAAApB,EAAK,OAAAC,CAAO,EAAGC,CAAQ,EACnDuB,EAEV7B,EAAmBgC,EAAoB,CACnC,IAAK,GAAG5B,KAAOE,iBACf,YAAajB,EACT,wBACA,YACJ,EACA,QAASA,EACL,4BACA,CACI,SAAUA,EACN,GAAGiB,KAAYA,IACfA,CACJ,CACJ,EACA,wBAAwBwB,GAC5B,EACA,KAAM,SACV,CAAC,EAEDhC,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaQ,IACtB,KAAM,UACN,QAAS,CACL,IAAKF,EAAI,IAAI,MAAM,CACvB,EACA,KAAM,IAAI,IACd,EACJ,EACA,QAAS,CACLc,EACA,CAAE,IAAAd,EAAK,SAAAE,EAAU,kBAAA2B,EAAmB,OAAA5B,CAAO,EAC3C6B,IACC,CAED,GAAIA,EACA,QAAWC,KAASD,EAAQ,gBACxBhD,EAAY,aAAaiD,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAIjB,EAAI,UAAY,oBAAqB,CACrCxB,GAAA,MAAAA,EAAawB,GAEb,IAAMY,EAAmB,GAAAC,QAAU,SAASzB,CAAQ,EAE9C0B,EACF,OAAOC,GAAsB,WACvBA,EAAkBf,EAAK,CAAE,IAAAd,EAAK,OAAAC,CAAO,EAAGC,CAAQ,EAChD2B,EAEVjC,EAAmBgC,EAAoB,CACnC,IAAK,GAAG5B,KAAOE,kCACf,QAASjB,EACL,0BACA,CACI,SAAUyC,EACV,WAAYZ,EAAI,UACpB,EACA,uBAAuBY,mBAAkCZ,EAAI,aACjE,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CACJ,CAGJ,ECtXA,IAAAkB,GAA+D,iBAC/DC,GAAsB,kBA+Df,IAAMC,GAAgB,IAI8B,CACvD,GAAM,CAAE,OAAQC,CAAW,EAAIC,EAAc,EAEvC,CACF,aAAcC,EACd,gBAAiBC,CACrB,EAAIC,GAAgB,EACdC,EAAeC,EAAgB,EAE/B,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjDC,EAAYC,EAAa,EACzBC,EAAUC,EAAW,EACrBC,EAAqBC,EAAsB,EAC3CC,EAAkBC,GAAc,EAEhCC,KAAc,mBAAe,EAsQnC,SApQiB,gBAMb,CAAC,CACG,SAAAC,EACA,IAAAC,EACA,aAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,OAAAC,CACJ,IAAoC,CAChC,IAAMC,EACFN,GAAA,KAAAA,EAAgBlB,EAEdyB,EACFN,GAAA,KAAAA,EAAmBlB,EACvB,OAAMuB,IAA8B,WACzBrB,EAAamB,CAAgB,EAAE,WAAkB,CACpD,SAAAN,EACA,IAAAC,EACA,SAAAI,EACA,UAAWE,CACf,CAAC,EAGiB,IAAI,QACtB,CAACG,EAASC,IAAW,CACjB,IAAMC,EAAa,IAAM,CACrBzB,EAAamB,CAAgB,EACxB,WAAkB,CACf,SAAAN,EACA,IAAAC,EACA,SAAAI,EACA,UAAWE,CACf,CAAC,EACA,KAAMM,GAAWH,EAAQG,CAAM,CAAC,EAChC,MAAOC,GAAQH,EAAOG,CAAG,CAAC,CACnC,EAEMC,EAAiB,IAAM,CACzBJ,EAAO,CAAE,QAAS,mBAAoB,CAAC,CAC3C,EAEIP,GACAA,EAASW,CAAc,EAG3B1B,EAAqB,CACjB,WACA,QAAS,CACL,GAAIY,EACJ,SAAUD,EACV,eAAgBe,EAChB,WAAYH,EACZ,QAASH,EACT,SAAU,CAAC,CAACL,CAChB,CACJ,CAAC,CACL,CACJ,CAEJ,EACA,CACI,SAAU,MAAO,CACb,IAAAH,EACA,SAAAD,EACA,aAAAE,EACA,iBAAAI,CACJ,IAAM,CACF,IAAMU,EAAWC,EAAUjB,EAAUM,CAAgB,EAE/CE,EACFN,GAAA,KAAAA,EAAgBlB,EAEpB,MAAMe,EAAY,cACdiB,EAAS,YACT,OACA,CACI,OAAQ,EACZ,CACJ,EAEA,IAAME,EACFnB,EAAY,eAAeiB,EAAS,WAAW,EAEnD,GAAMR,IAA8B,cAAgB,CAEhDT,EAAY,eACRiB,EAAS,KAAK,EACbG,GACQA,EAYE,CACH,KATSA,EAAS,KAAK,OACtBC,GACGA,EAAK,IACL,CAACnB,EACI,IAAI,MAAM,EACV,SAASmB,EAAK,GAAG,SAAS,CAAC,CACxC,EAII,MAAOD,EAAS,MAAQ,CAC5B,EAdW,IAgBnB,EAEApB,EAAY,eACRiB,EAAS,KAAK,EACbG,GAA6C,CAC1C,GAAI,CAACA,EACD,OAAO,KAGX,IAAME,EAAOF,EAAS,KAAK,OACtBG,GACOA,EAAO,GACA,CAACrB,EACH,IAAI,MAAM,EACV,SAASqB,EAAO,GAAG,SAAS,CAAC,EAE/B,EAEf,EAEA,MAAO,CACH,GAAGH,EACH,KAAAE,CACJ,CACJ,CACJ,EAEA,QAAWE,KAAMtB,EACbF,EAAY,eACRiB,EAAS,OAAOO,CAAE,EACjBJ,GACO,CAACA,GAAYA,EAAS,KAAK,IAAMI,EAC1B,KAEJ,CACH,GAAGJ,CACP,CAER,CAER,CAEA,MAAO,CACH,gBAAAD,EACA,SAAAF,CACJ,CACJ,EAEA,UAAW,CACPQ,EACAC,EACA,CACI,SAAAzB,EACA,IAAAC,EACA,iBAAAK,EACA,YAAAoB,EAAc,CAAC,OAAQ,MAAM,CACjC,IACC,CAED7B,EAAgB,CACZ,SAAAG,EACA,iBAAAM,EACA,YAAAoB,CACJ,CAAC,EAEDrC,EAAqB,CACjB,cACA,QAAS,CAAE,GAAIY,EAAK,SAAAD,CAAS,CACjC,CAAC,CACL,EACA,UAAW,CACPwB,EACA,CAAE,IAAAvB,EAAK,SAAAD,EAAU,oBAAA2B,CAAoB,EACrCC,IACC,CAED3B,EAAI,QAASsB,GACTxB,EAAY,cAAc6B,GAAA,YAAAA,EAAS,SAAS,OAAOL,EAAG,CAC1D,EAEA,IAAMM,EACF,OAAOF,GAAwB,WACzBA,EAAoBH,EAAOvB,EAAKD,CAAQ,EACxC2B,EAEVhC,EAAmBkC,EAAoB,CACnC,IAAK,GAAG5B,KAAOD,iBACf,YAAaT,EAAU,wBAAyB,SAAS,EACzD,QAASA,EACL,8BACA,CACI,SAAUA,EACN,GAAGS,KAAYA,IACfA,CACJ,CACJ,EACA,wBAAwBA,GAC5B,EACA,KAAM,SACV,CAAC,EAEDP,GAAA,MAAAA,EAAU,CACN,QAAS,aAAaO,IACtB,KAAM,UACN,QAAS,CAAE,IAAAC,CAAI,EACf,KAAM,IAAI,IACd,GAGAA,EAAI,QAASsB,GACTxB,EAAY,cAAc6B,GAAA,YAAAA,EAAS,SAAS,OAAOL,EAAG,CAC1D,CACJ,EACA,QAAS,CAACT,EAAK,CAAE,IAAAb,EAAK,SAAAD,EAAU,kBAAA8B,CAAkB,EAAGF,IAAY,CAE7D,GAAIA,EACA,QAAWG,KAASH,EAAQ,gBACxB7B,EAAY,aAAagC,EAAM,GAAIA,EAAM,EAAE,EAInD,GAAIjB,EAAI,UAAY,oBAAqB,CACrChC,EAAWgC,CAAG,EACd,IAAMkB,EAAmB,GAAAC,QAAU,SAASjC,CAAQ,EAE9C6B,EACF,OAAOC,GAAsB,WACvBA,EAAkBhB,EAAKb,EAAKD,CAAQ,EACpC8B,EAEVnC,EAAmBkC,EAAoB,CACnC,IAAK,GAAG5B,KAAOD,iBACf,QAAST,EACL,4BACA,CACI,SAAUyC,EACV,WAAYlB,EAAI,UACpB,EACA,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CACJ,CAGJ,ECxVO,IAAMoB,GAAaC,GAAsC,CAC5D,IAAMC,EAAeC,EAAgB,EAE/B,CAAE,UAAAC,CAAU,EAAIF,EAAaD,CAAgB,EAEnD,OAAOG,EAAU,CACrB,ECRA,IAAAC,GAA+D,iBAgDxD,IAAMC,GAAY,CAKvB,CACE,IAAAC,EACA,OAAAC,EACA,OAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,IAGK,CACD,IAAMC,EAAeC,EAAgB,EAE/B,CAAE,OAAAC,CAAO,EAAIF,EAAaD,CAAgB,EAC1C,CAAE,OAAQI,CAAW,EAAIC,EAAc,EACvCC,EAAYC,EAAa,EACzBC,EAAqBC,EAAsB,EAEjD,GAAIN,EA+CA,SA9CsB,aAClB,CACIH,EACA,SACAN,EACAD,EACA,CAAE,GAAGE,EAAQ,GAAGI,CAAS,CAC7B,EACA,IAAMI,EAAc,CAAE,IAAAV,EAAK,OAAAC,EAAQ,GAAGC,EAAQ,SAAAI,CAAS,CAAC,EACxD,CACI,GAAGH,EACH,UAAYc,GAAS,CArFrC,IAAAC,GAsFoBA,EAAAf,GAAA,YAAAA,EAAc,YAAd,MAAAe,EAAA,KAAAf,EAA0Bc,GAE1B,IAAME,EACF,OAAOf,GAAwB,WACzBA,EAAoBa,EAAM,CACtB,GAAGf,EACH,GAAGI,CACP,CAAC,EACDF,EAEVW,EAAmBI,CAAkB,CACzC,EACA,QAAUC,GAAgB,CAlG1C,IAAAF,EAmGoBP,EAAWS,CAAG,GACdF,EAAAf,GAAA,YAAAA,EAAc,UAAd,MAAAe,EAAA,KAAAf,EAAwBiB,GAExB,IAAMD,EACF,OAAOd,GAAsB,WACvBA,EAAkBe,EAAK,CAAE,GAAGlB,EAAQ,GAAGI,CAAS,CAAC,EACjDD,EAEVU,EAAmBI,EAAoB,CACnC,IAAK,GAAGlB,iBACR,QAASY,EACL,6BACA,CAAE,WAAYO,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,EAGA,MAAM,MAAM,0CAA0C,CAE9D,EC5HA,IAAAC,GAA+C,iBAgDxC,IAAMC,GAAoB,IAI8B,CAC3D,IAAMC,EAAqBC,EAAsB,EAC3CC,EAAeC,EAAgB,EAC/BC,EAAYC,EAAa,EAgF/B,SA9EiB,gBAMb,CAAC,CACG,IAAAC,EACA,OAAAC,EACA,OAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,OAAAC,CACJ,IAA2C,CACvC,GAAM,CAAE,OAAAC,CAAO,EAAIV,EAAaQ,CAAgB,EAEhD,GAAIE,EACA,OAAOA,EAAc,CACjB,IAAAN,EACA,OAAAC,EACA,QAASC,EACT,SAAAC,EACA,QAAS,CAAE,GAAGE,GAAA,YAAAA,EAAQ,OAAQ,CAClC,CAAC,EAGL,MAAM,MAAM,0CAA0C,CAC1D,EACA,CACI,UAAW,CACPE,EACA,CACI,oBAAqBC,EACrB,OAAAH,EACA,SAAAF,CACJ,IACC,CACD,IAAMM,EACF,OAAOD,GAAgC,WACjCA,EAA4BD,EAAM,CAC9B,GAAGF,EACH,GAAGF,CACP,CAAC,EACDK,EAEVd,EAAmBe,CAAkB,CACzC,EACA,QAAS,CACLC,EACA,CACI,kBAAmBC,EACnB,OAAAV,EACA,OAAAI,EACA,SAAAF,CACJ,IACC,CACD,IAAMM,EACF,OAAOE,GAA8B,WAC/BA,EAA0BD,EAAK,CAC3B,GAAGL,EACH,GAAGF,CACP,CAAC,EACDQ,EAEVjB,EAAmBe,EAAoB,CACnC,IAAK,GAAGR,iBACR,QAASH,EACL,6BACA,CAAE,WAAYY,EAAI,UAAW,EAC7B,uBAAuBA,EAAI,aAC/B,EACA,YAAaA,EAAI,QACjB,KAAM,OACV,CAAC,CACL,CACJ,CACJ,CAGJ,ECxIA,IAAAE,GAAwC,WCAxC,IAAAC,GAAkB,cAQLC,GAAsB,KACxB,CACH,QAAS,CACL,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACjD,WAAY,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC9C,UAAW,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACpD,WAAY,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC9C,QAAS,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,EAAG,MAAO,CAAE,CAAC,EACrD,QAAS,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC3C,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACjD,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAE,GAAI,CAAE,CAAE,CAAC,EACjD,WAAY,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC9C,OAAQ,IAAM,QAAQ,QAAQ,CAAE,KAAM,CAAC,CAAE,CAAC,EAC1C,UAAW,IAAM,EACrB,CACJ,GAGSC,GAAc,GAAAC,QAAM,cAC7BF,GAAoB,CACxB,EAEaG,GAKT,CAAC,CAAE,SAAAC,KAAaC,CAAK,IAAM,CAC3B,IAAIC,EACJ,MACI,CAACD,EAAK,eAAe,YAAY,GACjC,CAACA,EAAK,eAAe,YAAY,EAEjCC,EAAgBD,EAEhBC,EAAgB,CACZ,QAASD,CACb,EAGA,GAAAH,QAAA,cAACD,GAAY,SAAZ,CAAqB,MAAOK,GACxBF,CACL,CAER,ED5CO,IAAMG,EAAkB,IAED,CAC1B,IAAMC,KAAU,eAAyCC,EAAW,EAuBpE,SArB2B,gBACtBC,GAA8B,CAC3B,GAAIA,EAAkB,CAElB,GAAI,CADiBF,EAAQE,GAEzB,MAAM,IAAI,MACN,IAAIA,4BACR,EAEJ,OAAOF,EAAQE,EACnB,CACA,GAAIF,EAAQ,QACR,OAAOA,EAAQ,QAEf,MAAM,IAAI,MACN,oEACJ,CACR,EACA,CAACA,CAAO,CACZ,CAGJ,EEnCA,IAAAG,GAAsC,WACtCC,GAA+B,iBCD/B,IAAAC,GAAkB,cAILC,GAAc,GAAAC,QAAM,cAA4B,MAAS,EAEzDC,GAAsD,CAAC,CAChE,aAAAC,EACA,SAAAC,CACJ,IAEQ,GAAAH,QAAA,cAACD,GAAY,SAAZ,CAAqB,MAAOG,GACxBC,CACL,ECbR,IAAAC,GAAkB,cCAlB,IAAAC,GAAkB,cAILC,GAAuC,CAAC,CAAE,SAAAC,CAAS,IACrD,GAAAC,QAAA,cAAC,WAAKD,CAAS,EDEnB,IAAME,EAAgB,GAAAC,QAAM,cAA8B,CAC7D,aAAc,GACd,aAAc,cACd,uBAAwB,GACxB,iBAAkB,GAClB,gBAAiB,IACjB,MAAO,OACP,MAAO,OACP,OAAQ,OACR,OAAQ,OACR,OAAQC,GACR,cAAe,OACf,SAAU,MACV,YAAa,MACjB,CAAC,EAEYC,GAA0D,CAAC,CACpE,aAAAC,EACA,aAAAC,EACA,uBAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,cAAAC,EACA,MAAAC,EACA,OAAAC,EAASV,GACT,OAAAW,EACA,MAAAC,EACA,OAAAC,EACA,cAAAC,EACA,UAAAC,EAAYA,GACZ,SAAAC,EACA,SAAAC,EAAW,MACX,YAAAC,CACJ,IAEQ,GAAAnB,QAAA,cAACD,EAAc,SAAd,CACG,MAAO,CACH,aAAAI,EACA,aAAAC,EACA,uBAAAC,EACA,iBAAAC,EACA,MAAAI,EACA,gBAAAH,EACA,OAAAI,EACA,OAAAC,EACA,MAAAC,EACA,OAAAC,EACA,cAAAC,EACA,cAAAN,EACA,UAAAO,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,CACJ,GAECX,CACL,EFzBD,IAAMY,GAA0B,CAAC,CACpC,SAAAC,EACA,OAAAC,EACA,QAAAC,EACA,MAAAC,EACA,QAAAC,EAAU,GACV,SAAUC,EACV,YAAAC,CACJ,IAA0C,CACtC,IAAMC,KAAc,mBAAe,EAC7BC,EAAWC,EAAUT,CAAQ,EAE7BU,KAAkB,eAAyBC,EAAW,EACtD,CACF,SAAUC,EACV,YAAaC,CACjB,KAAI,eAA2BC,CAAa,EAEtCC,EAAWV,GAAA,KAAAA,EAAoBO,KAErC,cAAU,IAAM,CACZ,IAAII,EAEJ,OAAID,GAAYA,IAAa,OAASX,IAClCY,EAAeN,GAAA,YAAAA,EAAiB,UAAU,CACtC,QAAAR,EACA,OAAQ,CACJ,SAAAF,EACA,GAAGC,CACP,EACA,MAAAE,EACA,SAAWc,GAAU,CACbF,IAAa,QACbR,EAAY,kBAAkBC,EAAS,WAAW,EAGtDF,GAAA,MAAAA,EAAcW,GACdJ,GAAA,MAAAA,EAA6BI,EACjC,CACJ,IAGG,IAAM,CACLD,IACAN,GAAA,MAAAA,EAAiB,YAAYM,GAErC,CACJ,EAAG,CAACZ,CAAO,CAAC,CAChB,EIvFA,IAAAc,GAA2B,WAIpB,IAAMC,GACTC,GAC4B,CAC5B,GAAM,CAAE,SAAUC,CAAoB,KAClC,eAA2BC,CAAa,EAE5C,OAAOF,GAAA,KAAAA,EAAYC,CACvB,ECXA,IAAAE,GAAsC,WAgC/B,IAAMC,GAAkB,CAAC,CAC5B,OAAAC,EACA,QAAAC,EACA,MAAAC,EAAQ,CAAC,GAAG,EACZ,QAAAC,EAAU,GACV,YAAAC,CACJ,IAAkC,CAC9B,IAAMC,KAAkB,eAAyBC,EAAW,KAE5D,cAAU,IAAM,CACZ,IAAIC,EAEJ,OAAIJ,IACAI,EAAeF,GAAA,YAAAA,EAAiB,UAAU,CACtC,QAAAJ,EACA,OAAAD,EACA,MAAAE,EACA,SAAUE,CACd,IAGG,IAAM,CACLG,IACAF,GAAA,MAAAA,EAAiB,YAAYE,GAErC,CACJ,EAAG,CAACJ,CAAO,CAAC,CAChB,EC3DA,IAAAK,GAA2B,WAKpB,IAAMC,EAAyD,IAAM,CACxE,IAAMC,KAAc,eAAyBC,EAAW,EAExD,OAAOD,GAAA,YAAAA,EAAa,OACxB,ECTA,IAAAE,GAA2B,WCA3B,IAAAC,GAAiC,cAWpBC,GAAkB,GAAAC,QAAM,cAAgC,CACjE,UAAW,CAAC,CAChB,CAAC,EAEYC,GAET,CAAC,CAAE,UAAAC,EAAW,SAAAC,CAAS,IAEnB,GAAAH,QAAA,cAACD,GAAgB,SAAhB,CAAyB,MAAO,CAAE,UAAAG,CAAU,GACxCC,CACL,EDMD,IAAMC,GAAc,CAAC,CACxB,aAAcC,EACd,wBAAAC,EACA,aAAAC,CACJ,EAA0B,CAAC,IAA6B,CACpD,GAAM,CAAE,UAAAC,CAAU,KAAI,eAAWC,EAAe,EAE1CC,EAAoBC,EAAqB,EAEzC,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjCC,EAASF,EAAgC,EAEzCG,EAAWL,EACbJ,GAAA,KAAAA,EAA2BQ,EAAO,QACtC,EAEME,EAAeX,GAAA,KAAAA,EAAoBU,EAAS,KAE5CE,EAAKV,GAAA,KAAAA,EAAgBO,EAAO,GAElC,MAAO,CAAE,UAAAN,EAAW,SAAAO,EAAU,aAAAC,EAAc,GAAAC,CAAG,CACnD,EEjDA,IAAAC,GAAwC,WAMjC,IAAMC,EAAuB,IAAsC,CACtE,GAAM,CAAE,UAAAC,CAAU,KAAI,eAAWC,EAAe,EAoBhD,SAlB0B,gBACrBC,GAAkB,CACf,IAAMC,EAAWH,EAAU,KAAMI,GAAMA,EAAE,QAAUF,CAAK,EAExD,GAAI,CAACC,EAAU,CACX,IAAME,EAAmBL,EAAU,KAC9BI,GAAMA,EAAE,OAASF,CACtB,EACA,OACIG,GAAA,KAAAA,EACC,CAAE,KAAMH,EAAO,MAAOA,CAAM,CAErC,CACA,OAAOC,CACX,EACA,CAACH,CAAS,CACd,CAGJ,EC5BA,IAAAM,GAA2B,WAUpB,IAAMC,GAAmD,IAAM,CAClE,GAAM,CAAE,cAAAC,EAAe,qBAAAC,CAAqB,KACxC,eAAkCC,EAAoB,EAE1D,MAAO,CAAE,cAAAF,EAAe,qBAAAC,CAAqB,CACjD,ECfA,IAAAE,GAA2B,WCA3B,IAAAC,GAAqC,cAO9B,IAAMC,MAAsB,kBAAoC,CAAC,CAAC,EAE5DC,GAIT,CAAC,CAAE,KAAAC,EAAM,MAAAC,EAAO,SAAAC,CAAS,IAErB,GAAAC,QAAA,cAACL,GAAoB,SAApB,CAA6B,MAAO,CAAE,KAAAE,EAAM,MAAAC,CAAM,GAC9CC,CACL,EDZD,IAAME,GAAkB,IAA4B,CACvD,GAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,KAAI,eAAWC,EAAmB,EAEtD,MAAO,CAAE,KAAAF,EAAM,MAAAC,CAAM,CACzB,EETA,IAAAE,GAA4B,WAKrB,IAAMC,EAAwB,IAAiC,CAClE,GAAM,CAAE,KAAAC,CAAK,EAAIC,GAAgB,EAkBjC,SAhB2B,gBACvB,CACIC,EACAC,IACC,CACGD,IAAiB,KACbA,EACAF,GAAA,MAAAA,EAAOE,GACAC,IACPH,GAAA,MAAAA,EAAOG,IAGnB,EACA,CAAC,CACL,CAGJ,ECzBA,IAAAC,GAAwC,WCAxC,IAAAC,GAAkB,cAOX,IAAMC,GAAqB,GAAAC,QAAM,cAAmC,CAAC,CAAC,EAEhEC,GAIT,CAAC,CAAE,SAAAC,EAAU,aAAAC,CAAa,IAEtB,GAAAH,QAAA,cAACD,GAAmB,SAAnB,CACG,MAAO,CACH,aAAcI,CAClB,GAECD,CACL,EDZD,IAAME,GAAe,IAAM,CAC9B,GAAM,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAEtD,SAAO,gBAAaC,GAAiBF,GAAA,YAAAA,EAAc,aAAaE,GAAO,CAAC,CAAC,CAC7E,EEbA,IAAAC,GAAoC,WAS7B,IAAMC,EAAe,IAAM,CAC9B,GAAM,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EA4BtD,SA1BW,YAAQ,IAAM,CAQrB,SAASC,EACLC,EACAC,EACAC,EACF,CAxBV,IAAAC,EAAAC,EAyBY,OACIA,GAAAD,EAAAN,GAAA,YAAAA,EAAc,UAAUG,EAAKC,EAASC,KAAtC,KAAAC,EACAD,IADA,KAAAE,EAEC,OAAOH,GAAY,UACpB,OAAOC,EAAmB,IACpBD,EACAD,CAEd,CAEA,OAAOD,CACX,EAAG,CAACF,CAAY,CAAC,CAGrB,ECvCA,IAAAQ,GAAwC,WAWjC,IAAMC,GAAiC,IAAM,CAChD,GAAM,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAEtD,SAAO,gBAAY,IAAMD,GAAA,YAAAA,EAAc,YAAa,CAAC,CAAC,CAC1D,ECfA,IAAAE,GAA2B,WAiBpB,IAAMC,GAAuC,IAAM,CACtD,GAAM,CAAE,aAAAC,EAAc,gBAAAC,CAAgB,KAAI,eAAWC,CAAa,EAElE,MAAO,CAAE,aAAAF,EAAc,gBAAAC,CAAgB,CAC3C,ECrBA,IAAAE,GAA2B,WCA3B,IAAAC,GAA2C,cAI9BC,GAAqB,GAAAC,QAAM,cAAmC,CAAC,CAAC,EAEhEC,GAAgE,CAAC,CAC1E,SAAAC,CACJ,IAAM,CACF,GAAM,CAACC,EAAUC,CAAW,KAAI,aAAS,EAAK,EAE9C,OACI,GAAAJ,QAAA,cAACD,GAAmB,SAAnB,CAA4B,MAAO,CAAE,SAAAI,EAAU,YAAAC,CAAY,GACvDF,CACL,CAER,EDEO,IAAMG,GAA6C,IAAM,CAC5D,GAAM,CAAE,uBAAAC,CAAuB,KAAI,eAAWC,CAAa,EAErD,CAAE,SAAAC,EAAU,YAAAC,CAAY,KAAI,eAAWC,EAAkB,EAE/D,MAAO,CACH,uBAAAJ,EACA,SAAU,QAAQE,CAAQ,EAC1B,YAAaC,GAAA,KAAAA,EAAgB,IAAG,EACpC,CACJ,EE5BA,IAAAE,GAA2B,WAepB,IAAMC,GAA+C,IAAM,CAC9D,GAAM,CAAE,iBAAAC,CAAiB,KAAI,eAAWC,CAAa,EAErD,MAAO,CAAE,iBAAAD,CAAiB,CAC9B,ECnBA,IAAAE,GAA2B,WAUpB,IAAMC,GAAmD,IAAM,CAClE,GAAM,CAAE,MAAAC,CAAM,KAAI,eAAWC,CAAa,EAE1C,OAAOD,CACX,ECdA,IAAAE,GAA2B,WAIpB,IAAMC,GAAmB,IAAM,CAClC,GAAM,CACF,OAAAC,EACA,OAAAC,EACA,OAAAC,EACA,cAAAC,EACA,MAAAC,EACA,MAAAC,EACA,aAAAC,EACA,aAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,uBAAAC,EACA,cAAAC,EACA,UAAAC,EACA,SAAAC,CACJ,KAAI,eAAWC,CAAa,EAE5B,MAAO,CACH,OAAAd,EACA,OAAAC,EACA,OAAAC,EACA,cAAAC,EACA,MAAAC,EACA,MAAAC,EACA,aAAAC,EACA,aAAAC,EACA,iBAAAC,EACA,gBAAAC,EACA,uBAAAC,EACA,cAAAC,EACA,UAAAC,EACA,SAAAC,CACJ,CACJ,ECtCA,IAAAE,GAAyB,WAezB,IAAAC,GAAqC,kCAgCxBC,GAAY,CAGvB,CACE,aAAAC,EACA,OAAAC,EACA,QAAAC,EACA,aAAAC,EACA,SAAAC,EAAW,GACX,QAAAC,EAAWC,GAASA,EACpB,cAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,QAAAC,CACJ,EAA6C,CAAC,IAA2B,CACrE,GAAM,CAACC,EAAWC,CAAY,KAAI,aAAS,EAAK,EAE1CC,EAAoBC,EAAqB,EACzCC,EAAeC,EAAgB,EAE/B,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjC,CAAE,SAAUC,CAAkB,EAAIF,EAAgC,EACpE,CAAE,KAAMG,CAAS,EAAIP,EAAkBM,CAAiB,EAExDnB,IACAoB,EAAWpB,GAGf,IAAMqB,EAAW,GAAGC,GAChBF,EACA,QACJ,KAAK,IAAI,KAAK,EAAE,eAAe,IAEzB,CAAE,QAAAG,CAAQ,EAAIR,EAAaN,CAAgB,EAuDjD,MAAO,CACH,UAAAE,EACA,cAvDkB,SAAY,CAC9BC,EAAa,EAAI,EAEjB,IAAIY,EAAwB,CAAC,EAEzBC,EAAU,EACVC,EAAgB,GACpB,KAAOA,GACH,GAAI,CACA,GAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,EAAI,MAAML,EAAe,CACzC,SAAAH,EACA,QAAAlB,EACA,KAAMD,EACN,WAAY,CACR,QAAAwB,EACA,SAAArB,CACJ,EACA,SAAAI,CACJ,CAAC,EAEDiB,IAEAD,EAAQ,KAAK,GAAGG,CAAI,EAEhBxB,GAAgBqB,EAAQ,QAAUrB,IAClCqB,EAAUA,EAAQ,MAAM,EAAGrB,CAAY,EACvCuB,EAAgB,IAGhBE,IAAUJ,EAAQ,SAClBE,EAAgB,GAExB,OAASG,EAAP,CACEjB,EAAa,EAAK,EAClBc,EAAgB,GAEhBhB,GAAA,MAAAA,EAAUmB,GAEV,MACJ,CAGgB,IAAI,eAAY,CAChC,SAAAR,EACA,iBAAkB,GAClB,GAAGd,CACP,CAAC,EAEW,YAAYiB,EAAQ,IAAInB,CAAc,CAAC,EAEnDO,EAAa,EAAK,CACtB,CAKA,CACJ,EC5IA,IAAAkB,GAAgD,cAuGzC,IAAMC,GAAU,CAIrB,CACE,OAAQC,EACR,SAAUC,EACV,GAAIC,EACJ,kBAAAC,EACA,gBAAAC,EACA,SAAUC,EACV,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,aAAcC,EACd,SAAAC,EACA,YAAAC,EACA,WAAAC,EACA,gBAAAC,EACA,iBAAAC,EACA,YAAAC,EACA,aAAAC,CACJ,EAA6C,CAAC,IAIzC,CAjIL,IAAAC,GAkII,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EACjC,CACF,SAAUC,EACV,OAAQC,EACR,GAAIC,CACR,EAAIJ,EAAgC,EAE9BK,EACF,CAACtB,GAAqBA,IAAsBmB,EACtClB,GAAA,KAAAA,EAAeoB,EACfpB,EAGJ,CAACsB,EAAIC,CAAK,EAAI,GAAAC,QAAM,SAA8BH,CAAS,EAE3DI,EAAe1B,GAAA,KAAAA,EAAqBmB,EACpCQ,GAASX,GAAAjB,GAAA,KAAAA,EAAmBqB,IAAnB,KAAAJ,GAAsC,SAG/CY,EADoBC,EAAqB,EACZH,CAAY,EAEzC,CAAE,aAAcI,CAAoB,EAAIC,GAAgB,EACxDC,EAAexB,GAAA,KAAAA,EAAoBsB,EAEnCG,EAAWN,IAAW,SACtBO,EAASP,IAAW,OACpBQ,EAAUR,IAAW,QAErBS,EAAWhC,GAAA,KAAAA,EAAqB,OAEhCiC,EAAcd,IAAO,SAAcW,GAAUC,GAE7CG,GAAcC,GAAc,CAC9B,SAAUX,EAAS,KACnB,GAAIL,GAAA,KAAAA,EAAM,GACV,aAAc,CACV,QAASc,EACT,GAAGtB,CACP,EACA,SAAAN,EACA,YAAAC,EACA,WAAAC,EACA,SAAAJ,EACA,iBAAAM,CACJ,CAAC,EAEK,CAAE,WAAY2B,EAAgB,EAAIF,GAElCG,GAAuBC,GAAqC,EAC5D,CAAE,OAAQC,GAAc,UAAWC,EAAgB,EACrDH,GAEEI,GAAuBC,GAAqC,EAC5D,CAAE,OAAQC,GAAc,UAAWC,EAAgB,EACrDH,GAEE,CAAE,YAAAI,EAAY,EAAIC,GAAmB,EAErCC,GAA2BC,GAA8B,EAoI/D,MAAO,CACH,GAHWnB,GAAYE,EAZN,CACjB,YAAaK,IAAmBI,GAChC,eAAgBH,GAChB,SAvHmB,MAAOY,GAAuB,CACjDJ,GAAY,EAAK,EAEjB,IAAMK,GAAa/B,IAAiB,CAChC4B,GAAyB,CACrB,SAAAf,EACA,SAAAR,EACA,GAAAL,EACJ,CAAC,CACL,EAEA,OAAIS,IAAiB,eACjB,WAAW,IAAM,CACbsB,GAAU,CACd,CAAC,EAGE,IAAI,QAAsC,CAACC,GAASC,KACnDxB,IAAiB,eACjBuB,GAAQ,EAELZ,GACH,CACI,OAAAU,EACA,SAAUzB,EAAS,KACnB,oBAAAvB,EACA,kBAAAC,EACA,SAAAC,EACA,iBAAAM,EACA,YAAAC,CACJ,EACA,CACI,UAAW,CAAC2C,EAAMC,GAAGC,KAAY,CA9NrD,IAAA3C,GA+N4Bd,GACAA,EAAkBuD,EAAMJ,EAAQM,EAAO,EAG3C,IAAMC,IAAa5C,GAAAyC,GAAA,YAAAA,EAAM,OAAN,YAAAzC,GAAY,GAE/BsC,GAAUM,EAAU,EAEpBL,GAAQE,CAAI,CAChB,EACA,QAAS,CAACI,EAAeH,GAAGC,KAAY,CACpC,GAAIxD,EACA,OAAOA,EAAgB0D,EAAOR,EAAQM,EAAO,EAEjDH,EAAO,CACX,CACJ,CACJ,EACH,CACL,CAoEA,EAEmB,CACf,YAAahB,IAAmBQ,GAChC,eAAgBH,GAChB,SAvEmB,MAAOQ,GAAuB,CACjDJ,GAAY,EAAK,EAEjB,IAAMa,GAAsC,CACxC,GAAIvC,GAAA,KAAAA,EAAM,GACV,OAAA8B,EACA,SAAUzB,EAAS,KACnB,aAAAI,EACA,gBAAApB,EACA,oBAAAP,EACA,kBAAAC,EACA,SAAAC,EACA,iBAAAM,EACA,YAAAC,CACJ,EAEMwC,GAAY,IAAM,CAEpB9B,EAAMF,CAAS,EACf6B,GAAyB,CACrB,SAAAf,EACA,SAAAR,EACA,GAAAL,CACJ,CAAC,CACL,EAGA,OAAIS,IAAiB,eACjB,WAAW,IAAM,CACbsB,GAAU,CACd,CAAC,EAIE,IAAI,QAAsC,CAACC,EAASC,KACnDxB,IAAiB,eACjBuB,EAAQ,EAEL,WAAW,IAAM,CACpBR,GAAae,GAAW,CACpB,UAAW,CAACL,GAAMC,GAAGC,KAAY,CACzBzD,GACAA,EAAkBuD,GAAMJ,EAAQM,EAAO,EAGvC3B,IAAiB,eACjBsB,GAAU,EAGdC,EAAQE,EAAI,CAChB,EACA,QAAS,CAACI,GAAeH,GAAGC,KAAY,CACpC,GAAIxD,EACA,OAAOA,EAAgB0D,GAAOR,EAAQM,EAAO,EAEjDH,EAAO,CACX,CACJ,CAAC,CACL,CAAC,EACJ,CACL,CAYA,EAMI,YAAAlB,GACA,GAAAf,EACA,MAAAC,EACA,SAAU,CAACY,EAAU2B,KAAyC,CAC1DZ,GAAyB,CACrB,SACIf,IAAa,OACPA,EACAF,EACA,OACA,OACV,SAAAN,EACA,GAAImC,IAAA,KAAAA,GAAkBxC,CAC1B,CAAC,CACL,CACJ,CACJ,EClVA,IAAAyC,GAA4B,WAWrB,IAAMC,GACT,IAAM,CACF,GAAM,CAAE,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,OAAAC,CAAO,EAAIC,EAAc,EAiCnD,SA/BiC,gBAC7B,CAAC,CACG,SAAAC,EACA,SAAAC,EACA,GAAAC,CACJ,IAIM,CACF,GAAIF,GAAYC,EAAS,MACrB,OAAIA,EAAS,SAAWD,IAAa,QAAUE,EACpCP,EAAKM,EAAS,MAAOC,CAAE,EAG9BD,EAAS,SAAWD,IAAa,QAAUE,EACpCN,EAAKK,EAAS,MAAOC,CAAE,EAG9BD,EAAS,WAAaD,IAAa,SAC5BF,EAAOG,EAAS,KAAK,EAGzBJ,EAAKI,EAAS,MAAO,MAAM,CAI1C,EACA,CAAC,CACL,CAGJ,ECnCG,IAAME,EAAgB,IAAM,CAC/B,GAAM,CAAE,WAAAC,CAAW,EAAIC,EAAiB,EAClCC,EAAUF,EAAW,EACrBG,EAAoBC,EAAqB,EAEzCC,EAAY,CAACC,EAAaC,EAAoB,SAAW,CAC3DA,IAAS,OAASL,EAAQ,KAAKI,CAAG,EAAIJ,EAAQ,QAAQI,CAAG,CAC7D,EAEME,EAAaC,GAER,IADcN,EAAkBM,CAAQ,EACvB,eAGtBC,EAAU,CAACD,EAAkBE,IAAgB,CAC/C,IAAMC,EAAeT,EAAkBM,CAAQ,EACzCI,EAAY,mBAAmBF,CAAE,EAEvC,MAAO,IAAIC,EAAa,cAAcC,GAC1C,EAEMC,EAAW,CAACL,EAAkBE,IAAgB,CAChD,IAAMC,EAAeT,EAAkBM,CAAQ,EACzCI,EAAY,mBAAmBF,CAAE,EACvC,MAAO,IAAIC,EAAa,eAAeC,GAC3C,EAEME,EAAU,CAACN,EAAkBE,IAAgB,CAC/C,IAAMC,EAAeT,EAAkBM,CAAQ,EACzCI,EAAY,mBAAmBF,CAAE,EACvC,MAAO,IAAIC,EAAa,cAAcC,GAC1C,EAEMG,EAAWP,GAEN,IADcN,EAAkBM,CAAQ,EACvB,QA+C5B,MAAO,CACH,OA7CW,CAACA,EAAkBF,EAAoB,SAAW,CAC7DF,EAAUG,EAAUC,CAAQ,EAAGF,CAAI,CACvC,EA4CI,UAAAC,EACA,KA3CS,CACTC,EACAE,EACAJ,EAAoB,SACnB,CACDF,EAAUK,EAAQD,EAAUE,CAAE,EAAGJ,CAAI,CACzC,EAsCI,QAAAG,EACA,MArCU,CACVD,EACAE,EACAJ,EAAoB,SACnB,CACDF,EAAUS,EAASL,EAAUE,CAAE,EAAGJ,CAAI,CAC1C,EAgCI,SAAAO,EACA,KA/BS,CACTL,EACAE,EACAJ,EAAoB,SACnB,CACDF,EAAUU,EAAQN,EAAUE,CAAE,EAAGJ,CAAI,CACzC,EA0BI,QAAAQ,EACA,KAzBS,CAACN,EAAkBF,EAAoB,SAAW,CAC3DF,EAAUW,EAAQP,CAAQ,EAAGF,CAAI,CACrC,EAwBI,QAAAS,EACA,KAvBS,CAACC,EAAcC,IAAoB,CAC5ChB,EAAQ,KAAKe,EAAMC,CAAK,CAC5B,EAsBI,QApBY,CAACD,EAAcC,IAAoB,CAC/ChB,EAAQ,QAAQe,EAAMC,CAAK,CAC/B,EAmBI,OAjBW,IAAM,CACjBhB,EAAQ,OAAO,CACnB,CAgBA,CACJ,EC7GA,IAAAiB,GAAgC,WAoCzB,IAAMC,GAAU,CAAwC,CAC3D,SAAUC,EACV,GAAAC,EACA,oBAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,iBAAAC,CACJ,EAAkB,CAAC,IAAgC,CAC/C,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjC,CAAE,SAAUC,EAAmB,GAAIC,CAAY,EACjDH,EAAgC,EAE9BI,EACF,CAACZ,GAAoBA,IAAqBU,EACpCT,GAAA,KAAAA,EAAMU,EACNV,EAEJ,CAACY,EAAQC,CAAS,KAAI,aAA8BF,CAAS,EAI7DG,EAFoBC,EAAqB,EAEZhB,GAAA,KAAAA,EAAoBU,CAAiB,EAgBxE,MAAO,CACH,YAfgBO,GAAc,CAC9B,SAAUF,EAAS,KACnB,GAAIF,GAAA,KAAAA,EAAU,GACd,aAAc,CACV,QAASA,IAAW,MACxB,EACA,oBAAAX,EACA,kBAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,iBAAAC,CACJ,CAAC,EAIG,OAAAM,EACA,UAAAC,CACJ,CACJ,ECjFA,IAAAI,GAAoC,WACpCC,GAAmC,eACnCC,GAAkB,qBA8FX,IAAMC,GAAY,CAKvB,CACE,aAAAC,EACA,QAAAC,EAAWC,GAASA,EACpB,eAAAC,EACA,UAAAC,EAAY,OAAO,iBACnB,SAAAC,EACA,SAAAC,EACA,WAAAC,CACJ,EAA6C,CAAC,IAIzC,CACD,GAAM,CAACC,EAAiBC,CAAkB,KAAI,aAAiB,CAAC,EAC1D,CAACC,EAAaC,CAAc,KAAI,aAAiB,CAAC,EAClD,CAACC,EAAWC,CAAY,KAAI,aAAS,EAAK,EAE1CC,EAAoBC,EAAqB,EACzC,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjC,CAAE,SAAUC,CAAkB,EAAIF,EAAgC,EAClE,CAAE,KAAMG,CAAS,EAAIL,EACvBd,GAAA,KAAAA,EAAgBkB,CACpB,EAEME,EAAaC,GAAyC,EACtDC,EAASC,GAAqC,EAEhDC,EAIApB,IAAc,EACdoB,EAAiBF,EAEjBE,EAAiBJ,EAGrB,IAAMK,EAAgB,IAAM,CACxBd,EAAe,CAAC,EAChBF,EAAmB,CAAC,EACpBI,EAAa,EAAK,CACtB,EAEMa,EACFC,GACC,CACD,IAAMC,EAAS,CACX,UAAWD,EAAc,OACpBzB,GAASA,EAAK,OAAS,SAC5B,EACA,QAASyB,EAAc,OAClBzB,GAASA,EAAK,OAAS,OAC5B,CACJ,EAEAG,GAAA,MAAAA,EAAWuB,GACXf,EAAa,EAAK,CACtB,KAEA,cAAU,IAAM,CACZN,GAAA,MAAAA,EAAa,CAAE,YAAAG,EAAa,gBAAAF,CAAgB,EAChD,EAAG,CAACE,EAAaF,CAAe,CAAC,EAEjC,IAAMqB,EAAoD,CAAC,CAAE,KAAAC,CAAK,KAC9DL,EAAc,EACP,IAAI,QACNM,GAAY,CACTlB,EAAa,EAAI,KACjB,UAAMiB,EAAa,CACf,SAAU,MAAO,CAAE,KAAAE,CAAK,IAA6B,CACjD,IAAMC,EAASC,GAAgBF,EAAM/B,CAAO,EAG5C,GADAU,EAAesB,EAAO,MAAM,EACxB7B,IAAc,EAAG,CACjB,IAAMuB,EAAgB,MAAM,QAAQ,IAChCM,EACK,IAAKE,IASK,CAAE,SARQb,EAAO,YAAY,CAChC,SAAAH,EACA,OAAQgB,EACR,oBAAqB,GACrB,kBAAmB,GACnB,SAAA7B,CACJ,CAAC,EAEkB,MAAA6B,CAAM,EAC5B,EACA,IAAI,CAAC,CAAE,SAAAC,EAAU,MAAAD,CAAM,IACpBC,EACK,KAAK,CAAC,CAAE,KAAAJ,CAAK,KACVvB,EACK4B,GAEOA,EAAgB,CAG5B,EAEO,CACH,SAAU,CAACL,CAAI,EACf,KAAM,UACN,QAAS,CAACG,CAAK,CACnB,EAIH,EACA,MACIG,IACI,CACG,SAAU,CAACA,CAAK,EAChB,KAAM,QACN,QAAS,CAACH,CAAK,CACnB,EACR,CACR,CACR,EACAJ,EAAQJ,CAAa,CACzB,KAAO,CACH,IAAMA,EAAgB,MAAM,QAAQ,OAChC,GAAAY,SAAMN,EAAQ7B,CAAS,EAClB,IAAKoC,IACK,CACH,SAAUpB,EAAW,YAAY,CAC7B,SAAAD,EACA,OAAQqB,EACR,oBAAqB,GACrB,kBAAmB,GACnB,SAAAlC,CACJ,CAAC,EACD,mBAAoBkC,EAAM,OAC1B,MAAOA,CACX,EACH,EACA,IACG,CAAC,CACG,SAAAJ,EACA,MAAAD,EACA,mBAAAM,CACJ,IACIL,EACK,KAAMA,IACH3B,EACK4B,GAEOA,EACAI,CAGZ,EAEO,CACH,SAAUL,EAAS,KACnB,KAAM,UACN,QAASD,CACb,EAIH,EACA,MACIG,IACI,CACG,SAAU,CAACA,CAAK,EAChB,KAAM,QACN,QAASH,CACb,EACR,CACZ,CACR,EAEAJ,EAAQJ,CAAa,CACzB,CACJ,EAEA,GAAGxB,CACP,CAAC,CACL,CACJ,EAAE,KAAMwB,IACJD,EAAaC,CAAa,EACnBA,EACV,GAGL,MAAO,CACH,WAAY,CACR,KAAM,OACN,OAAQ,OACR,SAAWe,GAA+C,CAClDA,EAAM,OAAO,OAASA,EAAM,OAAO,MAAM,OAAS,GAClDb,EAAa,CAAE,KAAMa,EAAM,OAAO,MAAM,EAAG,CAAC,CAEpD,CACJ,EACA,eAAAlB,EACA,UAAAZ,EACA,aAAAiB,CACJ,CACJ,EC5SA,IAAAc,GAAsC,WAYzBC,GAAW,CAAC,CACrB,eAAAC,EAAiB,EACrB,EAAmB,CAAC,IAA0B,CAC1C,GAAM,CAACC,EAASC,CAAU,KAAI,aAASF,CAAc,EAE/CG,KAAO,gBAAY,IAAMD,EAAW,EAAI,EAAG,CAACD,CAAO,CAAC,EACpDG,KAAQ,gBAAY,IAAMF,EAAW,EAAK,EAAG,CAACD,CAAO,CAAC,EAE5D,MAAO,CACH,QAAAA,EACA,KAAAE,EACA,MAAAC,CACJ,CACJ,ECzBA,IAAAC,GAA2B,WCA3B,IAAAC,GAAkB,cAILC,GAAkC,CAC3C,WAAY,IAAM,GAClB,YAAa,IAAM,GACnB,UAAW,KAAO,CAAC,GACnB,OAAQ,IAAM,KACd,KAAM,IAAM,IAChB,EAEaC,GACT,GAAAC,QAAM,cAA8BF,EAAe,EAE1CG,GAIT,CAAC,CACD,SAAAC,EACA,WAAAC,EACA,YAAAC,EACA,UAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,CACJ,IAEQ,GAAAR,QAAA,cAACD,GAAc,SAAd,CACG,MAAO,CACH,WAAAI,EACA,YAAAC,EACA,UAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,CACJ,GAECN,CACL,EDrCD,IAAMO,EAAmB,IAAM,CAClC,GAAM,CAAE,WAAAC,EAAY,YAAAC,EAAa,UAAAC,EAAW,OAAAC,EAAQ,KAAAC,EAAM,OAAAC,CAAO,KAC7D,eAAWC,EAAa,EAE5B,MAAO,CACH,WAAAN,EACA,YAAAC,EACA,UAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,CACJ,CACJ,EEfA,IAAAE,GAA2B,WAC3BC,GAA0D,iBCD1D,IAAAC,GAAkB,cAOX,IAAMC,GAAuB,GAAAC,QAAM,cACtC,CAAC,CACL,EAEaC,GAIT,CAAC,CAAE,IAAAC,EAAK,SAAAC,CAAS,IAEb,GAAAH,QAAA,cAACD,GAAqB,SAArB,CAA8B,MAAO,CAAE,IAAAG,CAAI,GACvCC,CACL,EDDD,IAAMC,GAAS,CAAC,CACnB,OAAAC,EACA,SAAAC,EACA,OAAAC,EACA,aAAAC,CACJ,IAAkD,CAC9C,GAAM,CAAE,IAAAC,CAAI,KAAI,eAAWC,EAAoB,EAEzCC,KAAgB,aAClB,CAAC,SAAU,CAAE,OAAAN,EAAQ,SAAAC,EAAU,OAAAC,CAAO,CAAC,EAEvC,IAAG,CA7BX,IAAAK,EA6Bc,OAAAA,EAAAH,GAAA,YAAAA,EAAM,CAAE,OAAAJ,EAAQ,SAAAC,EAAU,OAAAC,CAAO,KAAjC,KAAAK,EAAuC,CAAE,IAAK,EAAK,GACzD,CACI,QAAS,OAAOH,EAAQ,IACxB,GAAGD,EACH,MAAO,EACX,CACJ,EAEA,OAAO,OAAOC,EAAQ,IACf,CAAE,KAAM,CAAE,IAAK,EAAK,CAAE,EACvBE,CACV,EExCA,IAAAE,GAA2B,WAKpB,IAAMC,GAAqB,IAA6B,CAC3D,GAAM,CAAE,IAAAC,CAAI,KAAI,eAAWC,EAAoB,EAE/C,MAAO,CAAE,IAAAD,CAAI,CACjB,ECTA,IAAAE,GAAkC,WAElCC,GAAmB,sBACnBC,GAAqB,wBAyCd,IAAMC,GAITC,GAC6B,CAC7B,GAAM,CAACC,EAAQC,CAAS,KAAI,aAAsB,CAAC,CAAC,EAC9C,CAACC,EAASC,CAAU,KAAI,aAAmB,CAAC,CAAC,EAC7C,CAACC,EAAiBC,CAAkB,KAAI,aAAmB,CAAC,CAAC,EAE7D,CACF,SAAAC,EACA,KAAAC,EACA,QAAAC,EAAU,CAAC,EACX,YAAAC,EAAc,QACd,YAAAC,EAAc,KACd,SAAUC,EAAgB,IAC1B,oBAAAC,EACA,kBAAAC,EACA,yBAA0BC,EAC1B,aAAAC,EACA,UAAAC,EACA,SAAAC,EACA,aAAAC,EAAe,CAAC,EAChB,YAAAC,EACA,SAAUC,EACV,WAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,EAAIxB,EAEEyB,EAAgB,MAAM,QAAQN,CAAY,EAC1CA,EACA,CAACA,CAAY,EAEbO,EAA8BC,GAAiC,CACjErB,EACIqB,EAAK,KAAK,IAAKC,IAAU,CACrB,MAAOA,EAAKlB,GACZ,MAAOkB,EAAKjB,EAChB,EAAE,CACN,CACJ,EAEMkB,EACFd,GAAA,KAAAA,EAAsCC,EAEpCc,EAA0BC,GAAuB,CACnD,SAAAxB,EACA,IAAKkB,EACL,aAAc,CACV,QAASA,EAAc,OAAS,EAChC,GAAGI,EACH,UAAYF,GAAS,CAjGjC,IAAAK,EAkGgBN,EAA2BC,CAAI,GAC/BK,EAAAH,GAAA,YAAAA,EAA0B,YAA1B,MAAAG,EAAA,KAAAH,EAAsCF,EAC1C,CACJ,EACA,SAAAJ,EACA,SAAU,MACV,iBAAAC,CACJ,CAAC,EAEKS,EAAyBN,GAAiC,CAC5DvB,EACIuB,EAAK,KAAK,IAAKC,IAAU,CACrB,MAAOA,EAAKlB,GACZ,MAAOkB,EAAKjB,EAChB,EAAE,CACN,CACJ,EAEMuB,EAAcC,GAAuB,CACvC,SAAA5B,EACA,OAAQ,CACJ,KAAAC,EACA,QAASC,EAAQ,OAAOR,CAAM,EAC9B,WAAYgB,EACN,CACI,SAAUA,CACd,EACA,MACV,EACA,aAAc,CACV,GAAGD,EACH,UAAYW,GAAS,CAjIjC,IAAAK,EAkIgBC,EAAsBN,CAAI,GAC1BK,EAAAhB,GAAA,YAAAA,EAAc,YAAd,MAAAgB,EAAA,KAAAhB,EAA0BW,EAC9B,CACJ,EACA,oBAAAd,EACA,kBAAAC,EACA,SAAAS,EACA,SAAAL,EACA,WAAAI,EACA,YAAAF,EACA,iBAAAI,CACJ,CAAC,EAEKY,EAAYC,GAA8B,CAC5C,GAAI,CAACA,EAAO,CACRnC,EAAU,CAAC,CAAC,EACZ,MACJ,CAGIA,EADAmB,EACUA,EAAiBgB,CAAK,EAEtB,CACN,CACI,MAAO3B,EACP,SAAU,WACV,MAAA2B,CACJ,CACJ,CARiC,CAUzC,EAEA,MAAO,CACH,YAAAH,EACA,wBAAAJ,EACA,WAAS,YACL,OAAM,GAAAQ,SAAO,CAAC,GAAGnC,EAAS,GAAGE,CAAe,EAAG,OAAO,EACtD,CAACF,EAASE,CAAe,CAC7B,EACA,YAAU,GAAAkC,SAASH,EAAUxB,CAAa,CAC9C,CACJ,EC3KA,IAAA4B,GAA6C,WAE7CC,GAA2B,8BAC3BC,GAAoB,uBA6FpB,IAAMC,GAAsC,CAAC,EACvCC,GAAsC,CAAC,EAqBtC,SAASC,GAGd,CACE,eAAAC,EAAiB,EACjB,gBAAAC,EAAkB,GAClB,cAAAC,EAAgB,GAChB,cAAAC,EACA,gBAAAC,EAAkBN,GAClB,yBAAAO,EAA2B,QAC3B,cAAAC,EACA,gBAAAC,EAAkBV,GAClB,iBAAkBW,EAClB,SAAUC,EACV,oBAAAC,EACA,kBAAAC,EACA,aAAAC,EACA,SAAUC,EACV,YAAAC,EACA,WAAAC,EACA,SAAAC,EACA,iBAAAC,CACJ,EAAkC,CAAC,EAES,CA9I5C,IAAAC,GA+II,GAAM,CAAE,iBAAkBC,CAAwB,EAAIC,GAAoB,EAEpEC,EAAmBb,GAAA,KAAAA,EAAwBW,EAE3C,CAAE,YAAAG,EAAa,UAAAC,CAAU,EAAIC,EAAiB,EAC9C,CAAE,OAAAC,EAAQ,SAAAC,CAAS,EAAIJ,EAAY,EACnCK,EAAWC,GAAYf,CAAgB,EAIvC,CAAE,cAAAgB,EAAe,eAAAC,EAAgB,aAAAC,EAAc,cAAAC,CAAc,EAC/DC,GAAiBR,CAAM,EAErBS,EAAiBL,GAAiB7B,EAClCmC,EAAkBL,GAAkB7B,EACpCmC,EAAgBL,EAAa,OAASA,EAAe5B,EACrDkC,EAAgBL,EAAc,OAASA,EAAgB1B,EAEvD,CAAE,SAAUgC,CAAkB,EAAIf,EAAgC,EAElE,CAAE,KAAAgB,CAAK,EAAIC,EAAc,EAGzBC,GAFoBC,EAAqB,EAEZjC,GAAA,KAAAA,EAAoB6B,CAAiB,EAElE,CAACK,GAAQC,EAAS,KAAI,aACxBC,GAAkBzC,EAAiBgC,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAC1D,EACM,CAACU,GAASC,EAAU,KAAI,aAC1BC,GAAkBzC,EAAiB8B,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAC1D,EACM,CAACY,GAASC,EAAU,KAAI,aAAiBhB,CAAc,EACvD,CAACiB,GAAUC,EAAW,KAAI,aAAiBjB,CAAe,EAE1DkB,GAAgC,CAAC,CACnC,WAAY,CAAE,QAAAJ,EAAS,SAAAE,CAAS,EAChC,OAAAR,GACA,QAAAG,EACJ,IAA8B,CAC1B,IAAMQ,GAAkBC,GAAqB,CACzC,WAAY,CACR,SAAAJ,EACA,QAAAF,CACJ,EACA,OAAAN,GACA,QAAAG,EACJ,CAAC,EACD,MAAO,GAAGpB,KAAY4B,IAC1B,KAEA,cAAU,IAAM,CACR7B,IAAW,KACXyB,GAAWhB,CAAc,EACzBkB,GAAYjB,CAAe,EAC3BS,GAAUC,GAAkBzC,EAAiBgC,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAAC,EACjEW,GAAWC,GAAkBzC,EAAiB8B,GAAA,KAAAA,EAAiB,CAAC,CAAC,CAAC,EAE1E,EAAG,CAACZ,CAAM,CAAC,KAEX,cAAU,IAAM,CACZ,GAAIJ,EAAkB,CAClB,IAAMiC,EAAkBC,GAAqB,CACzC,GAAIrD,EACE,CACI,WAAY,CACR,SAAAiD,GACA,QAAAF,EACJ,CACJ,EACA,CAAC,EACP,UAAQ,GAAAO,SAAeb,GAAQvC,EAAiB,GAAAqD,OAAO,EACvD,WAAS,GAAAD,SAAeV,GAASvC,EAAiB,GAAAkD,OAAO,CAC7D,CAAC,EAGD,OAAOlB,EAAK,GAAGb,KAAY4B,GAAiB,CAChD,CACJ,EAAG,CAACjC,EAAkB4B,GAASE,GAAUR,GAAQG,EAAO,CAAC,EAEzD,IAAMY,GAAcC,GAAuB,CACvC,SAAUlB,GAAS,KACnB,OAAQ,CACJ,cAAAvC,EACA,WAAY,CAAE,QAAA+C,GAAS,SAAAE,EAAS,EAChC,QAASS,GAAarD,EAAiBuC,EAAO,EAC9C,KAAMe,GAAazD,EAAiBuC,EAAM,CAC9C,EACA,aAAA/B,EACA,oBAAAF,EACA,kBAAAC,EACA,SAAAK,EACA,SAAAW,EACA,WAAAZ,EACA,YAAAD,EACA,iBAAAG,CACJ,CAAC,EAEK6C,GAAqBC,GAA4B,CACnDhB,GAAYiB,GACRJ,GAAarD,EAAiBwD,EAAYC,CAAW,CACzD,CACJ,EAEMC,GAAuBF,GAA4B,CACrDhB,GAAWa,GAAarD,EAAiBwD,CAAU,CAAC,CACxD,EAEMG,GACFC,GACC,CACDpB,GAAYqB,GAASR,GAAarD,EAAiB4D,EAAOC,CAAI,CAAC,CAAC,CACpE,EAEMC,GAAwD,CAC1DC,EACAC,EAA8BlE,IAC7B,CACG,OAAOiE,GAAoB,WAC3BJ,GAAqBI,CAAe,EAEhCC,IAAa,UACbN,GAAoBK,CAAe,EAEnCR,GAAkBQ,CAAe,CAG7C,EAEME,EAAoBC,GAA2B,CACjD7B,GAAU,IAAMiB,GAAazD,EAAiBqE,CAAS,CAAC,CAC5D,EAEMC,MAAmB,YAAQ,IAAM,CAnR3C,IAAAxD,EAAAyD,EAoRQ,OAAIzE,EACO,CACH,QAAA+C,GACA,WAAAC,GACA,SAAAC,GACA,YAAAC,GACA,UAAWD,GACL,KAAK,OAAMwB,GAAAzD,EAAAwC,GAAY,OAAZ,YAAAxC,EAAkB,QAAlB,KAAAyD,EAA2B,GAAKxB,EAAQ,EACnD,CACV,EAGG,CACH,QAAS,OACT,WAAY,OACZ,SAAU,OACV,YAAa,OACb,UAAW,MACf,CACJ,EAAG,CAACjD,EAAe+C,GAASE,IAAUjC,GAAAwC,GAAY,OAAZ,YAAAxC,GAAkB,KAAK,CAAC,EAE9D,MAAO,CACH,iBAAkBwC,GAClB,OAAAf,GACA,UAAW6B,EACX,QAAA1B,GACA,WAAYuB,GACZ,GAAGK,GACH,8BAAArB,EACJ,CACJ,CClTA,IAAAuB,GAA2B,WAC3BC,GAA+D,iBCD/D,IAAAC,GAAkB,cAILC,GAAkB,GAAAC,QAAM,cAAgC,CAAC,CAAC,EAE1DC,GAIT,CAAC,CAAE,OAAAC,EAAQ,IAAAC,EAAK,OAAAC,EAAQ,SAAAC,CAAS,IAE7B,GAAAL,QAAA,cAACD,GAAgB,SAAhB,CAAyB,MAAO,CAAE,OAAAG,EAAQ,IAAAC,EAAK,OAAAC,CAAO,GAClDC,CACL,EDkBD,IAAMC,GAAS,IAG6B,CAC/C,IAAMC,KAAc,mBAAe,EAC7BC,KAAkB,eAAWC,EAAe,EAE5C,CAAE,UAAAC,CAAU,KAAI,eAAWC,EAAe,EAC1C,CACF,KAAMC,EACN,QAAAC,EACA,UAAAC,CACJ,EAAIC,GAAe,CACf,aAAc,CACV,QAAS,CAAC,CAACP,CACf,CACJ,CAAC,EAEKQ,KAAM,gBACR,MAAOC,GAAW,CAnD1B,IAAAC,EAAAC,EAAAC,EAoDY,IAAMC,EAAWX,EAAU,KAAMY,GAAMA,EAAE,OAASL,EAAO,QAAQ,EAC3DM,GAAiBJ,GAAAD,EAAAG,GAAA,YAAAA,EAAU,UAAV,YAAAH,EAAmB,WAAnB,YAAAC,EAA6B,YAEpD,GAAII,GACI,CAACC,GAAcD,EAAgBN,EAAO,MAAM,EAC5C,OAIR,IAAIQ,EACJ,OAAIX,IACAW,EAAa,MAAMZ,EAAQ,GAGxB,OAAMO,EAAAZ,EAAgB,SAAhB,YAAAY,EAAA,KAAAZ,EAAyB,CAClC,GAAGS,EACH,OAAQL,GAAA,KAAAA,EAAgBa,GAAA,YAAAA,EAAY,IACxC,GACJ,CACJ,EAEMC,KAAS,gBAMX,MAAOT,GAAW,CA/E1B,IAAAC,EAgFY,OAAO,OAAMA,EAAAV,EAAgB,SAAhB,YAAAU,EAAA,KAAAV,EAAyBS,GAC1C,EACA,CACI,UAAYU,GAAS,CACjB,GAAIA,GAAA,MAAAA,EAAM,SAAU,CAChB,IAAMC,EAAWC,EAAUF,GAAA,YAAAA,EAAM,QAAQ,EACzCpB,EAAY,kBAAkBqB,EAAS,QAAQ,CAAC,CACpD,CACJ,CACJ,CACJ,EAEA,MAAO,CAAE,IAAAZ,EAAK,OAAAU,CAAO,CACzB,EE7FA,IAAAI,GAA2B,WAC3BC,GAA0D,iBAmBnD,IAAMC,GAAa,CAAoD,CAC1E,SAAAC,EACA,OAAAC,EACA,KAAAC,EACA,OAAAC,EACA,SAAAC,EACA,aAAAC,CACJ,IAAyD,CACrD,GAAM,CAAE,IAAAC,CAAI,KAAI,eAAWC,EAAe,EAEpCC,EAAWC,EAAUT,EAAU,OAAWI,CAAQ,EAmBxD,SAjBsB,aAClBI,EAAS,QAAQN,CAAI,EACrB,IAAG,CAlCX,IAAAQ,EAmCY,OAAAA,EAAAJ,GAAA,YAAAA,EAAM,CACF,SAAAN,EACA,OAAAC,EACA,OAAAE,EACA,KAAAD,EACA,SAAAE,CACJ,KANA,KAAAM,EAMM,QAAQ,QAAQ,CAAC,CAAC,GAC5B,CACI,QAAS,OAAOJ,EAAQ,IACxB,GAAGD,EACH,MAAO,EACX,CACJ,CAGJ,EClDA,IAAAM,GAA4B,WAC5BC,GAA+B,iBAYxB,IAAMC,GAAgB,IAA4C,CACrE,IAAMC,KAAc,mBAAe,EAyCnC,SAvCmB,gBACf,CAAC,CACG,SAAAC,EACA,iBAAAC,EACA,YAAAC,EACA,GAAAC,CACJ,IAAyB,CACrB,GAAID,IAAgB,GAChB,OAEJ,IAAME,EAAWC,EAAUL,EAAUC,CAAgB,EAErDC,EAAY,QAASI,GAAQ,CACzB,OAAQA,OACC,MACDP,EAAY,kBAAkBK,EAAS,GAAG,EAC1C,UACC,OACDL,EAAY,kBAAkBK,EAAS,KAAK,CAAC,EAC7C,UACC,OACDL,EAAY,kBAAkBK,EAAS,KAAK,CAAC,EAC7C,UACC,cACDL,EAAY,kBAAkBK,EAAS,WAAW,EAClD,UACC,SACDL,EAAY,kBACRK,EAAS,OAAOD,GAAM,EAAE,CAC5B,EACA,cAEA,MAEZ,CAAC,CACL,EACA,CAAC,CACL,CAGJ,ECxDA,IAAAI,GAAkC,WAClCC,GAA2B,wBAC3BC,GAAqB,kBAiBd,IAAMC,GAAgB,IAA+B,CAnB5D,IAAAC,EAoBI,GAAM,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EACjC,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAEhDC,EAAYC,EAAa,EAEzB,CAAE,UAAAC,EAAW,SAAAC,CAAS,EAAIC,GAAY,EAEtC,CAAE,OAAAC,CAAO,EAAIT,EAAgC,EAE7CU,EAAiC,CAAC,EAExC,GAAI,EAACH,GAAA,MAAAA,EAAU,MACX,MAAO,CAAE,YAAAG,CAAY,EAGzB,IAAMC,EAAiBC,GAAuB,CAnClD,IAAAb,EAoCQ,IAAMc,EAAiBP,EAAU,KAC5BC,GAAaA,EAAS,OAASK,CACpC,EAEIC,IACIA,EAAe,YACfF,EAAcE,EAAe,UAAU,EAE3CH,EAAY,KAAK,CACb,OACIX,EAAAc,EAAe,QAAf,KAAAd,EACAK,EACI,GAAGS,EAAe,QAAQA,EAAe,UACzC,GAAAC,SAAeD,EAAe,IAAI,CACtC,EAEJ,KAAQA,EAAe,KACjB,IAAIA,EAAe,QACnB,OACN,KAAMA,EAAe,IACzB,CAAC,EAET,EAiBA,GAfIN,EAAS,YACTI,EAAcJ,EAAS,UAAU,EAGrCG,EAAY,KAAK,CACb,OACIX,EAAAQ,EAAS,QAAT,KAAAR,EACAK,EACI,GAAGG,EAAS,QAAQA,EAAS,UAC7B,GAAAO,SAAeP,EAAS,IAAI,CAChC,EACJ,KAAQA,EAAS,KAAO,IAAIA,EAAS,QAAU,OAC/C,KAAMA,EAAS,IACnB,CAAC,EAEGE,EAAQ,CACR,IAAMM,EAAM,WAAWN,IACjBO,EAAcZ,EAAUW,CAAG,EAC7B,OAAOb,EAAiB,KAAec,IAAgBD,MACvD,GAAAE,SACI,GACA,8DAA8DR,kCAAuCA;AAAA,yFACzG,EACAC,EAAY,KAAK,CACb,MAAON,EAAU,WAAWK,OAAU,GAAAK,SAAeL,CAAM,CAAC,CAChE,CAAC,GAEDC,EAAY,KAAK,CACb,MAAON,EAAUW,KAAK,GAAAD,SAAeL,CAAM,CAAC,CAChD,CAAC,CAET,CAEA,MAAO,CACH,YAAAC,CACJ,CACJ,EChGA,IAAAQ,GAAkB,cAwBX,IAAMC,GAAmC,IAAM,CAClD,GAAM,CAAE,UAAAC,CAAU,EAAIC,GAAY,EAC5BC,EAAYC,EAAa,EAEzB,CAAE,YAAAC,EAAa,UAAAC,CAAU,EAAIC,EAAiB,EAC9CC,EAAWH,EAAY,EACvBI,EAASH,EAAgC,EAEzC,CAAE,aAAAI,CAAa,EAAIC,GAAiB,EAEpCC,EAAc,GAAAC,QAAM,QAAQ,IAAM,CACpC,IAAIC,EAAmBb,EAAU,KAC5Bc,IAAOP,GAAA,YAAAA,EAAU,YAAa,IAAIO,EAAG,OAC1C,EAEKD,IACDA,EAAmBb,EAAU,KACxBc,IAAON,GAAA,YAAAA,EAAQ,YAAcM,EAAG,KACrC,GAGJ,IAAIC,EACJ,OAAIF,GAAA,MAAAA,EAAkB,MAClBE,EAAe,IAAIF,GAAA,YAAAA,EAAkB,QAC9BN,EAAS,WAAa,IAC7BQ,EAAe,IAEfA,EAAeR,GAAA,YAAAA,EAAU,SAEtBQ,CACX,EAAG,CAACf,EAAWO,EAAUC,CAAM,CAAC,EAE1BQ,EAA6B,GAAAJ,QAAM,QACrC,IACIZ,EAAU,IAAKiB,GAAa,CA1DxC,IAAAC,EAAAC,EA2DgB,IAAMC,EAAQ,IAAIH,EAAS,QAE3B,MAAO,CACH,GAAGA,EACH,KAAMA,EAAS,KACf,MAAOG,EACP,KAAKF,EAAAD,EAAS,MAAT,KAAAC,EAAgBE,EACrB,OACID,EAAAF,EAAS,QAAT,KAAAE,EACAjB,EACI,GAAGe,EAAS,QAAQA,EAAS,OAC7BI,GAAyBJ,EAAS,KAAM,QAAQ,CACpD,CACR,CACJ,CAAC,EACL,CAACjB,EAAWS,CAAY,CAC5B,EACMa,EAAyB,GAAAV,QAAM,QACjC,IAAMW,GAAeP,CAAa,EAClC,CAACA,CAAa,CAClB,EAEMQ,EAAkB,GAAAZ,QAAM,YAC1B,CACIa,EACAC,EACAC,EAAW,KACA,CACX,IAAMC,EAAiBF,EAAiB,KAAMZ,GAC1Ca,EAAWb,EAAG,OAASW,EAAaX,EAAG,QAAUW,CACrD,EAEA,GAAIG,EAAgB,CAChB,IAAMC,EAAsB,CAAC,EAE7B,OAAIF,GAAYC,EAAe,OAC3BC,EAAU,QAAYD,EAAe,KAAM,EAG3CA,EAAe,YACfC,EAAU,QACN,GAAGL,EACCI,EAAe,WACfF,EACA,EACJ,CACJ,EAEGG,CACX,CAEA,MAAO,CAAC,CACZ,EACA,CAAC,CACL,EAEMC,EAAkB,GAAAlB,QAAM,QAC1B,IAAMY,EAAgBb,EAAaK,CAAa,EAChD,CAACL,EAAaK,CAAa,CAC/B,EA2BA,OAzBe,GAAAJ,QAAM,QAAQ,IAAM,CAC/B,IAAMmB,EAA6BC,GACxBA,EAAM,OAAO,CAACC,EAAuBC,IACpCA,EAAI,SAAS,OAAS,EACf,CACH,GAAGD,EACH,CACI,GAAGC,EACH,SAAUH,EAA0BG,EAAI,QAAQ,CACpD,CACJ,EACK,OAAOA,EAAI,KAAS,IAClB,CAAC,GAAGD,EAAUC,CAAG,EAErBD,EACR,CAAC,CAAC,EAGT,MAAO,CACH,gBAAAH,EACA,YAAAnB,EACA,UAAWoB,EAA0BT,CAAS,CAClD,CACJ,EAAG,CAACQ,EAAiBnB,EAAaW,CAAS,CAAC,CAGhD,E7ElIO,IAAMa,GAA2B,IAAM,CAC1C,GAAM,CAACC,EAAcC,CAAe,KAAI,aAAiB,EACnD,CAAE,KAAAC,CAAK,EAAIC,EAAc,EACzBC,EAAYC,EAAa,EACzBC,EAAc,CAAC,OAAQ,SAAU,MAAM,EAEvC,CAAE,UAAAC,CAAU,EAAIC,EAAiB,EAEjCC,EAASF,EAAqC,EAC9CG,EAAWC,EAAqB,EAEtC,uBAAU,IAAM,CACZ,GAAIF,EAAO,SAAU,CACjB,IAAMG,EAAoBF,EAASD,EAAO,QAAQ,EAE9CA,EAAO,QACPH,EAAY,SAASG,EAAO,MAAM,GAClC,CAACG,EAAkBH,EAAO,SAE1BR,EACIG,EACI,mBACA,CACI,OAAQK,EAAO,OACf,SAAUA,EAAO,QACrB,EACA,sCAAsCA,EAAO,yBAAyBA,EAAO,qBACjF,CACJ,CAER,CACJ,EAAG,CAACA,CAAM,CAAC,EAGP,GAAAI,QAAA,iBAAAA,QAAA,cACI,GAAAA,QAAA,cAAC,UACIT,EACG,kBACA,OACA,6CACJ,CACJ,EACCJ,GAAgB,GAAAa,QAAA,cAAC,SAAGb,CAAa,EAClC,GAAAa,QAAA,cAAC,UAAO,QAAS,IAAMX,EAAK,GAAG,GAC1BE,EAAU,uBAAwB,OAAW,WAAW,CAC7D,CACJ,CAER,E8EhEA,IAAAU,EAAgC,cAazB,IAAMC,GAAsB,IAAM,CACrC,GAAM,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAE,EACrC,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAE,EAErCC,EAAYC,EAAa,EAEzB,CAAE,OAAQC,CAAM,EAAIC,GAAqB,EAE/C,OACI,EAAAC,QAAA,gBAAAA,QAAA,cACI,EAAAA,QAAA,cAAC,UAAIJ,EAAU,oBAAqB,sBAAsB,CAAE,EAC5D,EAAAI,QAAA,cAAC,QACG,SAAWC,GAAM,CACbA,EAAE,eAAe,EACjBH,EAAM,CAAE,SAAAN,EAAU,SAAAE,CAAS,CAAC,CAChC,GAEA,EAAAM,QAAA,cAAC,aACG,EAAAA,QAAA,cAAC,aACG,EAAAA,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,UACIJ,EACG,uBACA,OACA,UACJ,EAAE,GAEN,EACA,EAAAI,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,SACG,KAAK,OACL,KAAM,GACN,YAAY,MACZ,WAAY,GACZ,eAAe,MACf,UAAS,GACT,SAAQ,GACR,MAAOR,EACP,SAAWS,GACPR,EAAYQ,EAAE,OAAO,KAAK,EAElC,CACJ,CACJ,EACA,EAAAD,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,UACIJ,EACG,uBACA,OACA,UACJ,EAAE,GAEN,EACA,EAAAI,QAAA,cAAC,UACG,EAAAA,QAAA,cAAC,SACG,KAAK,WACL,SAAQ,GACR,KAAM,GACN,MAAON,EACP,SAAWO,GACPN,EAAYM,EAAE,OAAO,KAAK,EAElC,CACJ,CACJ,CACJ,CACJ,EACA,EAAAD,QAAA,cAAC,SAAG,EACJ,EAAAA,QAAA,cAAC,SAAM,KAAK,SAAS,MAAM,QAAQ,CACvC,CACJ,CAER,ECrFA,IAAAE,EAAkB,cAOLC,GAAsB,IAE3B,EAAAC,QAAA,gBAAAA,QAAA,cACI,EAAAA,QAAA,cAAC,UAAG,kBAAgB,EACpB,EAAAA,QAAA,cAAC,SAAE,kCAAgC,EACnC,EAAAA,QAAA,cAAC,SAAE,0DACyD,IACxD,EAAAA,QAAA,cAAC,YAAK,aAAW,EAAO,gBAAa,EAAAA,QAAA,cAAC,YAAM,YAAa,CAC7D,EACA,EAAAA,QAAA,cAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,CAAE,GAClC,EAAAA,QAAA,cAAC,KAAE,KAAK,qBAAqB,OAAO,SAAS,IAAI,cAC7C,EAAAA,QAAA,cAAC,cAAO,eAAa,CACzB,EACA,EAAAA,QAAA,cAAC,KACG,KAAK,4CACL,OAAO,SACP,IAAI,cAEJ,EAAAA,QAAA,cAAC,cAAO,UAAQ,CACpB,EACA,EAAAA,QAAA,cAAC,KACG,KAAK,4BACL,OAAO,SACP,IAAI,cAEJ,EAAAA,QAAA,cAAC,cAAO,WAAS,CACrB,CACJ,CACJ,ECnCR,IAAAC,EAAkB,cAClBC,GAMO,iBACPC,GAAmC,0BCRnC,IAAAC,GAA0B,WAC1BC,GAA0C,UCD1C,IAAAC,GAA2B,WAe3B,IAAMC,GAAiB,SAEVC,GAAmB,IAAsB,CAClD,IAAMC,KAAc,eAAWC,CAAW,EACpCC,KAAkB,eAAWC,EAAe,EAC5CC,KAAc,eAAWC,EAAW,EACpCC,KAAgB,eAAWC,EAAa,EACxCC,KAAc,eAAWC,EAAW,EACpC,CAAE,aAAAC,CAAa,KAAI,eAAWC,EAAkB,EAChDC,KAAsB,eAAWC,EAAmB,EACpDC,KAAuB,eAAWC,EAAoB,EACtD,CAAE,UAAAC,CAAU,EAAIC,GAAY,EAE5BC,EAAOlB,EAAY,WAEnBmB,EACF,CAAC,CAACjB,EAAgB,QAClB,CAAC,CAACA,EAAgB,KAClB,CAAC,CAACA,EAAgB,OAEhBkB,EACF,CAAC,EAAChB,GAAA,MAAAA,EAAa,UACf,CAAC,EAACA,GAAA,MAAAA,EAAa,YACf,CAAC,EAACA,GAAA,MAAAA,EAAa,aAEbiB,EACF,CAAC,CAACf,EAAc,YAChB,CAAC,CAACA,EAAc,MAChB,CAAC,CAACA,EAAc,QAChB,CAAC,CAACA,EAAc,aAChB,CAAC,CAACA,EAAc,UAEdgB,EAAO,CAAC,CAACd,EAETe,EACF,CAAC,EAACb,GAAA,MAAAA,EAAc,eAChB,CAAC,EAACA,GAAA,MAAAA,EAAc,YAChB,CAAC,EAACA,GAAA,MAAAA,EAAc,WAEdc,EACF,CAAC,CAACZ,EAAoB,OAAS,CAAC,CAACA,EAAoB,KAEnDa,EAAgB,CAAC,CAACX,EAAqB,IAE7C,MAAO,CACH,UAAW,CACP,KAAAI,EACA,SAAAC,EACA,KAAAC,EACA,OAAAC,EACA,KAAAC,EACA,KAAAC,EACA,aAAAC,EACA,cAAAC,CACJ,EACA,QAAS3B,GACT,cAAekB,EAAU,MAC7B,CACJ,EDpEA,IAAMU,GAAa,CACf,IAAK,MACL,EAAG,OACH,IAAK,MACL,IAAK,eACL,EAAG,wVACP,EAEaC,GAA0B,IAAM,CACzC,IAAMC,EAAUC,GAAiB,EAEjC,uBAAU,IAAM,CACR,OAAO,OAAW,MAIrB,SAAY,CACT,IAAMC,EAAM,QAAM,cAAUJ,EAAU,EAEhCK,EAAmB,MAAM,IAAI,kBAC/B,IAAI,YAAY,EAAE,OAAO,KAAK,UAAUH,CAAO,CAAC,CACpD,EACK,mBAAmB,CAAE,IAAK,eAAgB,IAAK,SAAU,CAAC,EAC1D,QAAQE,CAAG,EAEhB,MAAM,oCAAqC,CACvC,QAAS,CACL,OAAQ,mBACR,eAAgB,kBACpB,EACA,OAAQ,OACR,KAAMC,CACV,CAAC,CACL,GAAG,CACP,EAAG,CAAC,CAAC,EAEE,IACX,ED6CO,IAAMC,GAAgC,CAAC,CAC1C,aAAAC,EACA,aAAAC,EACA,eAAAC,EACA,qBAAAC,EACA,sBAAAC,EACA,iBAAAC,EACA,UAAWC,EACX,cAAAC,EACA,UAAAC,EACA,UAAAC,EACA,SAAAC,EACA,SAAAC,EACA,aAAAC,EACA,aAAAC,EACA,aAAAC,EAAe,cACf,iBAAAC,EAAmB,GACnB,uBAAAC,EAAyB,GACzB,gBAAAC,EAAkB,IAClB,MAAAC,EACA,OAAAC,EACA,MAAAC,EACA,OAAAC,EACA,OAAAC,EACA,cAAAC,EACA,uBAAAC,EACA,wBAAAC,EACA,SAAAC,EACA,YAAAC,EACA,iBAAAC,EAAmB,EACvB,IAAM,CArHN,IAAAC,EAsHI,IAAMC,EAAc,IAAI,eAAY,CAChC,GAAGN,EACH,eAAgB,CACZ,GAAGA,GAAA,YAAAA,EAAwB,eAC3B,QAAS,CACL,qBAAsB,GACtB,iBAAkB,GAClB,IAAGK,EAAAL,GAAA,YAAAA,EAAwB,iBAAxB,YAAAK,EAAwC,OAC/C,CACJ,CACJ,CAAC,EAEKE,EACF,OAAO5B,GAAyB,WAC1BA,EAAqB,EACrBA,GAAA,KAAAA,EAAwB,CAAC,EAE7B6B,EAA6B,CAAC,EAwBpC,GAtBA1B,GAAA,MAAAA,EAAoB,IAAK2B,GAAa,CAzI1C,IAAAJ,GAAAK,GAAAC,GA0IQH,EAAU,KAAK,CACX,IAAKC,EAAS,IACd,KAAMA,EAAS,KACf,OAAOJ,GAAAI,EAAS,UAAT,YAAAJ,GAAkB,MACzB,KAAMI,EAAS,KACf,OACIE,IAAAD,GAAAD,EAAS,UAAT,YAAAC,GAAkB,QAAlB,KAAAC,GACAC,GAAeH,EAAU3B,CAAkB,EAC/C,UAAW,CAAC,CAAC2B,EAAS,OACtB,QAAS,CAAC,CAACA,EAAS,KACpB,QAAS,CAAC,CAACA,EAAS,KACpB,UAAWA,EAAS,UACpB,OAAQA,EAAS,OACjB,KAAMA,EAAS,KACf,KAAMA,EAAS,KACf,KAAMA,EAAS,KACf,QAASA,EAAS,QAClB,WAAYA,EAAS,UACzB,CAAC,CACL,GAEID,EAAU,SAAW,EACrB,OAAOxB,EAAY,EAAA6B,QAAA,cAAC7B,EAAA,IAAU,EAAK,EAAA6B,QAAA,cAAC7B,GAAA,IAAiB,EAGzD,GAAM,CAAE,gBAAA8B,EAAkB,EAAAD,QAAM,QAAS,EAAInC,EAE7C,OACI,EAAAmC,QAAA,cAAC,wBAAoB,OAAQP,GACzB,EAAAO,QAAA,cAACE,GAAA,CAA6B,GAAGR,GAC7B,EAAAM,QAAA,cAACG,GAAA,CACI,GAAIxC,GAAA,KAAAA,EAAgB,CAAC,EACtB,WAAY,QAAQA,CAAY,GAEhC,EAAAqC,QAAA,cAACI,GAAA,CAAqB,GAAGxC,GACrB,EAAAoC,QAAA,cAACK,GAAA,CAAoB,aAAc9B,GAC/B,EAAAyB,QAAA,cAACM,GAAA,CAAuB,GAAGzC,GACvB,EAAAmC,QAAA,cAACO,GAAA,CAAwB,UAAWZ,GAChC,EAAAK,QAAA,cAACQ,GAAA,CACG,aAAchC,GAEd,EAAAwB,QAAA,cAACS,GAAA,CACI,GAAI1C,GAAA,KAAAA,EAAyB,CAAC,GAE/B,EAAAiC,QAAA,cAACU,GAAA,CACI,GAAI1C,GAAA,KAAAA,EAAoB,CAAC,GAE1B,EAAAgC,QAAA,cAACW,GAAA,KACG,EAAAX,QAAA,cAACY,GAAA,CACG,aACInC,EAEJ,uBACIE,EAEJ,iBACID,EAEJ,MAAOG,EACP,gBACID,EAEJ,SAAUP,EACV,cACIH,EAEJ,UAAWE,EACX,OAAQU,EACR,MAAOC,EACP,OAAQE,EACR,OAAQD,EACR,cACIE,EAEJ,aACI,CAAC,CAAChB,EAEN,SAAUmB,EACV,YACIC,GAGJ,EAAAU,QAAA,cAACa,GAAA,KACG,EAAAb,QAAA,cAACC,EAAA,KACI3B,EACA,CAACiB,GACE,EAAAS,QAAA,cAACc,GAAA,IAAU,EAEf,EAAAd,QAAA,cAACe,GAAA,IAAmB,CACxB,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,CACJ,EACA,EAAAf,QAAA,cAAC,uBACG,cAAe,GACf,SAAS,eACR,GAAGZ,EACR,CACJ,CAER,EGvPA,IAAA4B,GAAiC,WAQ1B,IAAMC,GAER,CAAC,CAAE,cAAAC,CAAc,IAAM,CACxB,IAAMC,EAAYC,EAAa,EAEzB,CAAE,qBAAAC,CAAqB,EAAIC,GAAsB,EACjD,CAAE,KAAAC,CAAK,EAAIC,GAAgB,EAE3BC,EAAqB,IAAM,CAC7BP,EAAc,QAASQ,GAAqC,CACpDA,EAAiB,YAAc,KAC3BA,EAAiB,UAAY,GAC7BA,EAAiB,WAAW,EAE3BA,EAAiB,UAClBH,GAAA,MAAAA,EAAO,CACH,IAAK,GAAGG,EAAiB,MAAMA,EAAiB,wBAChD,KAAM,WACN,QAASP,EACL,yBACA,CACI,QAASQ,GACLD,EAAiB,OACrB,CACJ,EACA,YAAYC,GACRD,EAAiB,OACrB,mBACJ,EACA,eAAgBA,EAAiB,eACjC,gBAAiBC,GACbD,EAAiB,OACrB,CACJ,GAGAA,EAAiB,QAAU,GAC3B,WAAW,IAAM,CACbL,EAAqB,CACjB,oCACA,QAAS,CACL,GAAIK,EAAiB,GACrB,QAASA,EAAiB,QAC1B,SAAUA,EAAiB,QAC/B,CACJ,CAAC,CACL,EAAG,GAAI,EAGnB,CAAC,CACL,EAEA,uBAAU,IAAM,CACZD,EAAmB,CACvB,EAAG,CAACP,CAAa,CAAC,EAEX,IACX,ECjEA,IAAAU,GAAiC,cA2B1B,IAAMC,GAA8C,CAAC,CACxD,SAAAC,EACA,OAAQC,EACR,MAAOC,EACP,OAAQC,EACR,MAAOC,EACP,OAAQC,EACR,cAAeC,CACnB,IAAM,CACF,GAAM,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,OAAAC,EAAQ,MAAAC,EAAO,MAAAC,EAAO,cAAAC,CAAc,EACxDC,GAAiB,EAEfC,EAAiBb,GAAA,KAAAA,EAAmBM,EAE1C,OACI,GAAAQ,QAAA,cAACD,EAAA,CACG,MAAOZ,GAAA,KAAAA,EAAkBQ,EACzB,OAAQP,GAAA,KAAAA,EAAmBM,EAC3B,OAAQJ,GAAA,KAAAA,EAAmBG,EAC3B,MAAOJ,GAAA,KAAAA,EAAkBO,EACzB,cAAeL,GAAA,KAAAA,EAA0BM,GAExCZ,EACD,GAAAe,QAAA,cAACC,GAAA,IAAc,CACnB,CAER,EAEMA,GAA0B,IAAM,CAClC,GAAM,CAAE,OAAAC,CAAO,EAAIC,EAAiB,EAE9BC,EAAYC,EAAa,EAEzB,CAAE,SAAAC,EAAU,YAAAC,CAAY,EAAIC,GAAmB,EAE/CC,EAAoBC,IAItBA,EAAE,eAAe,EAEjBA,EAAE,YAAcN,EACZ,yBACA,2DACJ,EAEOM,EAAE,aAGb,uBAAU,KACFJ,GACA,OAAO,iBAAiB,eAAgBG,CAAgB,EAGrD,OAAO,oBAAoB,eAAgBA,CAAgB,GACnE,CAACH,CAAQ,CAAC,EAGT,GAAAN,QAAA,cAACE,EAAA,CACG,KAAMI,EACN,QAASF,EACL,yBACA,2DACJ,EACA,YAAaG,EACjB,CAER,EC9FA,IAAAI,GAAkB,cAeX,IAAMC,GAA8C,CAAC,CACxD,SAAAC,EACA,SAAAC,EACA,QAAAC,CACJ,IAAM,CACF,GAAM,CAAE,UAAAC,EAAW,UAAAC,EAAW,QAAAC,CAAQ,EAAIC,GAAiB,EAErD,CAAE,QAAAC,CAAQ,EAAIC,EAAc,EAC5B,CAAE,YAAAC,CAAY,EAAIC,EAAiB,EACnC,CAAE,SAAAC,EAAU,OAAAC,CAAO,EAAIH,EAAY,EAEzC,GAAIL,EACA,OAAO,GAAAS,QAAA,iBAAAA,QAAA,cAAGX,CAAQ,GAAO,KAE7B,GAAIG,EAAS,CACT,GAAI,CAACJ,EAAU,CACX,IAAMa,EAAQ,GAAGH,IAAWC,IAC5B,OAAKD,EAAS,SAAS,QAAQ,GAC3BJ,EAAQ,aAAa,mBAAmBO,CAAK,GAAG,EAE7C,IACX,CAEA,OAAO,GAAAD,QAAA,iBAAAA,QAAA,cAAGZ,CAAS,CACvB,CAEA,OAAIE,EACO,GAAAU,QAAA,iBAAAA,QAAA,cAAGb,CAAS,EAGhB,IACX,EC9CA,IAAAe,GAAsC,WAM/B,IAAMC,GAA+B,IAAM,CAC9C,GAAM,CAAE,YAAAC,CAAY,EAAIC,EAAiB,EAEnC,CAAE,UAAAC,CAAU,KAAI,eAAyBC,CAAW,EACpDC,EAAWJ,EAAY,EAE7B,uBAAU,IAAM,CACZE,GAAA,MAAAA,IAAc,MAAM,IAAM,GAC9B,EAAG,CAACE,GAAA,YAAAA,EAAU,QAAQ,CAAC,EAEhB,IACX,ECjBA,IAAAC,GAAkB,cAUX,IAAMC,GAAsC,CAAC,CAChD,SAAAC,EACA,OAAAC,EACA,OAAAC,EACA,SAAAC,EACA,SAAAC,KACGC,CACP,IAAM,CACF,GAAM,CAAE,KAAAC,CAAK,EAAIC,GAAO,CACpB,SAAAP,EACA,OAAAC,EACA,OAAAC,CACJ,CAAC,EAED,OAAII,GAAA,MAAAA,EAAM,IACF,GAAAE,QAAM,eAAeJ,CAAQ,EACZ,GAAAI,QAAM,aAAaJ,EAAUC,CAAI,EAI/C,GAAAG,QAAA,iBAAAA,QAAA,cAAGJ,CAAS,GAGnBE,GAAA,YAAAA,EAAM,OAAQ,GACP,GAAAE,QAAA,iBAAAA,QAAA,cAAGL,GAAA,KAAAA,EAAY,IAAK,EAGxB,IACX","names":["import_react","import_react","import_react","import_react_query","AuthContext","React","AuthContextProvider","children","isProvided","authOperations","replace","useNavigation","queryClient","invalidateAuthStore","loginFunc","params","_a","result","error","logoutFunc","redirectPath","checkAuthFunc","import_react_query","usePermissions","options","getPermissions","AuthContext","import_react","import_react_query","useGetIdentity","queryOptions","getUserIdentity","React","AuthContext","import_react","import_react_query","useLogout","push","useNavigation","logoutFromContext","React","AuthContext","open","useNotification","redirectPathFromAuth","error","import_react","import_react_query","import_qs","useLogin","replace","useNavigation","loginFromContext","React","AuthContext","useLocation","useRouterContext","search","close","open","useNotification","to","qs","redirectPathFromAuth","error","import_react","import_react_query","useAuthenticated","params","checkAuth","AuthContext","import_react","import_react_query","useCheckError","checkErrorFromContext","React","AuthContext","logout","useLogout","redirectPath","import_react","useIsExistAuthentication","isProvided","AuthContext","import_react_query","userFriendlySecond","miliseconds","import_zip","import_fromPairs","importCSVMapper","data","mapData","item","headers","body","entry","fromPairs","zip","index","array","import_humanize_string","import_pluralize","userFriendlyResourceName","resource","type","humanizeResource","humanizeString","pluralize","handleUseParams","params","queryKeys","resource","dataProviderName","metaData","providerName","keys","config","ids","item","id","meta","hasPermission","permissions","action","i","routeGenerator","item","resourcesFromProps","route","hasParentName","p","createTreeView","resources","_a","_b","_c","tree","resourcesRouteObject","resourcesNameObject","parent","child","i","route","name","useList","resource","config","queryOptions","successNotification","errorNotification","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","dataProvider","useDataProvider","queryKey","queryKeys","getList","translate","useTranslate","checkError","useCheckError","handleNotification","useHandleNotification","isEnabled","useResourceSubscription","hasPagination","restConfig","data","_a","notificationConfig","err","import_react_query","import_qs","import_unionWith","import_differenceWith","parseTableParams","url","current","pageSize","sorter","filters","qs","parseTableParamsFromQuery","params","stringifyTableParams","options","pagination","compareFilters","left","right","compareSorters","unionFilters","permanentFilter","newFilters","prevFilters","unionWith","crudFilter","unionSorters","permanentSorter","newSorters","crudSorter","setInitialFilters","defaultFilter","differenceWith","setInitialSorters","defaultSorter","getDefaultSortOrder","columnName","sortItem","item","getDefaultFilter","operatorType","filter","operator","field","file2Base64","file","resolve","reject","reader","resultHandler","error","useOne","resource","id","queryOptions","successNotification","errorNotification","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","dataProvider","useDataProvider","queryKey","queryKeys","getOne","translate","useTranslate","checkError","useCheckError","handleNotification","useHandleNotification","useResourceSubscription","data","_a","notificationConfig","err","import_react_query","useMany","resource","ids","queryOptions","successNotification","errorNotification","metaData","liveMode","onLiveEvent","liveParams","dataProviderName","dataProvider","useDataProvider","queryKey","queryKeys","getMany","translate","useTranslate","checkError","useCheckError","handleNotification","useHandleNotification","isEnabled","useResourceSubscription","data","_a","notificationConfig","err","import_react_query","import_react","import_react_dom","UndoableQueueContext","React","initialState","undoableQueueReducer","state","action","notificationItem","UndoableQueueContextProvider","children","notifications","notificationDispatch","notificationData","UndoableQueue","import_pluralize","useUpdate","queryClient","dataProvider","useDataProvider","mutationModeContext","undoableTimeoutContext","useMutationMode","translate","useTranslate","checkError","useCheckError","publish","usePublish","log","useLog","notificationDispatch","useCancelNotification","handleNotification","useHandleNotification","invalidateStore","useInvalidate","id","values","resource","mutationMode","undoableTimeout","onCancel","metaData","dataProviderName","mutationModePropOrContext","undoableTimeoutPropOrContext","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","data","record","_a","_data","_error","invalidates","successNotification","context","resourceSingular","pluralize","notificationConfig","previousData","queryData","acc","item","fields","operation","variables","rest","errorNotification","query","import_react_query","import_pluralize","useCreate","checkError","useCheckError","dataProvider","useDataProvider","invalidateStore","useInvalidate","translate","useTranslate","publish","usePublish","log","useLog","handleNotification","useHandleNotification","resource","values","metaData","dataProviderName","data","successNotificationFromProp","invalidates","_a","_b","_c","resourceSingular","pluralize","notificationConfig","fields","operation","variables","rest","err","errorNotificationFromProp","import_react_query","import_pluralize","useDelete","checkError","useCheckError","dataProvider","useDataProvider","queryClient","mutationModeContext","undoableTimeoutContext","useMutationMode","notificationDispatch","useCancelNotification","translate","useTranslate","publish","usePublish","log","useLog","handleNotification","useHandleNotification","invalidateStore","useInvalidate","id","mutationMode","undoableTimeout","resource","onCancel","metaData","dataProviderName","values","mutationModePropOrContext","undoableTimeoutPropOrContext","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","record","_a","data","_data","_error","invalidates","successNotification","context","resourceSingular","pluralize","notificationConfig","fields","operation","variables","rest","errorNotification","query","import_react_query","import_pluralize","useCreateMany","dataProvider","useDataProvider","translate","useTranslate","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","resource","values","metaData","dataProviderName","response","successNotification","invalidates","resourcePlural","pluralize","notificationConfig","ids","item","err","errorNotification","import_react_query","import_pluralize","useUpdateMany","queryClient","dataProvider","useDataProvider","translate","useTranslate","mutationModeContext","undoableTimeoutContext","useMutationMode","checkError","useCheckError","notificationDispatch","useCancelNotification","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","ids","values","resource","onCancel","mutationMode","undoableTimeout","metaData","dataProviderName","mutationModePropOrContext","undoableTimeoutPropOrContext","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","data","record","id","_data","_error","successNotification","resourceSingular","pluralize","notificationConfig","errorNotification","context","query","import_react_query","import_pluralize","useDeleteMany","checkError","useCheckError","mutationModeContext","undoableTimeoutContext","useMutationMode","dataProvider","useDataProvider","notificationDispatch","useCancelNotification","translate","useTranslate","publish","usePublish","handleNotification","useHandleNotification","invalidateStore","useInvalidate","queryClient","resource","ids","mutationMode","undoableTimeout","onCancel","metaData","dataProviderName","values","mutationModePropOrContext","undoableTimeoutPropOrContext","resolve","reject","doMutation","result","err","cancelMutation","queryKey","queryKeys","previousQueries","previous","item","data","record","id","_data","_error","invalidates","successNotification","context","notificationConfig","errorNotification","query","resourceSingular","pluralize","useApiUrl","dataProviderName","dataProvider","useDataProvider","getApiUrl","import_react_query","useCustom","url","method","config","queryOptions","successNotification","errorNotification","metaData","dataProviderName","dataProvider","useDataProvider","custom","checkError","useCheckError","translate","useTranslate","handleNotification","useHandleNotification","data","_a","notificationConfig","err","import_react_query","useCustomMutation","handleNotification","useHandleNotification","dataProvider","useDataProvider","translate","useTranslate","url","method","values","metaData","dataProviderName","config","custom","data","successNotificationFromProp","notificationConfig","err","errorNotificationFromProp","import_react","import_react","defaultDataProvider","DataContext","React","DataContextProvider","children","rest","dataProviders","useDataProvider","context","DataContext","dataProviderName","import_react","import_react_query","import_react","LiveContext","React","LiveContextProvider","liveProvider","children","import_react","import_react","DefaultLayout","children","React","RefineContext","React","DefaultLayout","RefineContextProvider","hasDashboard","mutationMode","warnWhenUnsavedChanges","syncWithLocation","undoableTimeout","children","DashboardPage","Title","Layout","Header","Sider","Footer","OffLayoutArea","LoginPage","catchAll","liveMode","onLiveEvent","useResourceSubscription","resource","params","channel","types","enabled","liveModeFromProp","onLiveEvent","queryClient","queryKey","queryKeys","liveDataContext","LiveContext","liveModeFromContext","onLiveEventContextCallback","RefineContext","liveMode","subscription","event","import_react","useLiveMode","liveMode","liveModeFromContext","RefineContext","import_react","useSubscription","params","channel","types","enabled","onLiveEvent","liveDataContext","LiveContext","subscription","import_react","usePublish","liveContext","LiveContext","import_react","import_react","ResourceContext","React","ResourceContextProvider","resources","children","useResource","propResourceName","resourceNameOrRouteName","recordItemId","resources","ResourceContext","resourceWithRoute","useResourceWithRoute","useParams","useRouterContext","params","resource","resourceName","id","import_react","useResourceWithRoute","resources","ResourceContext","route","resource","p","resourceWithName","import_react","useCancelNotification","notifications","notificationDispatch","UndoableQueueContext","import_react","import_react","NotificationContext","NotificationContextProvider","open","close","children","React","useNotification","open","close","NotificationContext","import_react","useHandleNotification","open","useNotification","notification","fallbackNotification","import_react","import_react","TranslationContext","React","TranslationContextProvider","children","i18nProvider","useSetLocale","i18nProvider","TranslationContext","lang","import_react","useTranslate","i18nProvider","TranslationContext","translate","key","options","defaultMessage","_a","_b","import_react","useGetLocale","i18nProvider","TranslationContext","import_react","useMutationMode","mutationMode","undoableTimeout","RefineContext","import_react","import_react","UnsavedWarnContext","React","UnsavedWarnContextProvider","children","warnWhen","setWarnWhen","useWarnAboutChange","warnWhenUnsavedChanges","RefineContext","warnWhen","setWarnWhen","UnsavedWarnContext","import_react","useSyncWithLocation","syncWithLocation","RefineContext","import_react","useTitle","Title","RefineContext","import_react","useRefineContext","Footer","Header","Layout","OffLayoutArea","Sider","Title","hasDashboard","mutationMode","syncWithLocation","undoableTimeout","warnWhenUnsavedChanges","DashboardPage","LoginPage","catchAll","RefineContext","import_react","import_export_to_csv_fix_source_map","useExport","resourceName","sorter","filters","maxItemCount","pageSize","mapData","item","exportOptions","metaData","dataProviderName","onError","isLoading","setIsLoading","resourceWithRoute","useResourceWithRoute","dataProvider","useDataProvider","useParams","useRouterContext","routeResourceName","resource","filename","userFriendlyResourceName","getList","rawData","current","preparingData","data","total","error","import_react","useForm","actionFromProps","resourceFromProps","idFromProps","onMutationSuccess","onMutationError","redirectFromProps","successNotification","errorNotification","metaData","mutationModeProp","liveMode","onLiveEvent","liveParams","undoableTimeout","dataProviderName","invalidates","queryOptions","_a","useParams","useRouterContext","resourceFromRoute","actionFromRoute","idFromParams","defaultId","id","setId","React","resourceName","action","resource","useResourceWithRoute","mutationModeContext","useMutationMode","mutationMode","isCreate","isEdit","isClone","redirect","enableQuery","queryResult","useOne","isFetchingQuery","mutationResultCreate","useCreate","mutateCreate","isLoadingCreate","mutationResultUpdate","useUpdate","mutateUpdate","isLoadingUpdate","setWarnWhen","useWarnAboutChange","handleSubmitWithRedirect","useRedirectionAfterSubmission","values","onSuccess","resolve","reject","data","_","context","responseId","error","variables","idFromFunction","import_react","useRedirectionAfterSubmission","show","edit","list","create","useNavigation","redirect","resource","id","useNavigation","useHistory","useRouterContext","history","resourceWithRoute","useResourceWithRoute","handleUrl","url","type","createUrl","resource","editUrl","id","resourceName","encodedId","cloneUrl","showUrl","listUrl","path","state","import_react","useShow","resourceFromProp","id","successNotification","errorNotification","metaData","liveMode","onLiveEvent","dataProviderName","useParams","useRouterContext","routeResourceName","idFromRoute","defaultId","showId","setShowId","resource","useResourceWithRoute","useOne","import_react","import_papaparse","import_chunk","useImport","resourceName","mapData","item","paparseOptions","batchSize","onFinish","metaData","onProgress","processedAmount","setProcessedAmount","totalAmount","setTotalAmount","isLoading","setIsLoading","resourceWithRoute","useResourceWithRoute","useParams","useRouterContext","routeResourceName","resource","createMany","useCreateMany","create","useCreate","mutationResult","handleCleanup","handleFinish","createdValues","result","handleChange","file","resolve","data","values","importCSVMapper","value","response","currentAmount","error","chunk","batch","currentBatchLength","event","import_react","useModal","defaultVisible","visible","setVisible","show","close","import_react","import_react","defaultProvider","RouterContext","React","RouterContextProvider","children","useHistory","useLocation","useParams","Prompt","Link","routes","useRouterContext","useHistory","useLocation","useParams","Prompt","Link","routes","RouterContext","import_react","import_react_query","import_react","AccessControlContext","React","AccessControlContextProvider","can","children","useCan","action","resource","params","queryOptions","can","AccessControlContext","queryResponse","_a","import_react","useCanWithoutCache","can","AccessControlContext","import_react","import_uniqBy","import_debounce","useSelect","props","search","setSearch","options","setOptions","selectedOptions","setSelectedOptions","resource","sort","filters","optionLabel","optionValue","debounceValue","successNotification","errorNotification","defaultValueQueryOptionsFromProps","queryOptions","fetchSize","liveMode","defaultValue","onLiveEvent","onSearchFromProp","liveParams","metaData","dataProviderName","defaultValues","defaultValueQueryOnSuccess","data","item","defaultValueQueryOptions","defaultValueQueryResult","useMany","_a","defaultQueryOnSuccess","queryResult","useList","onSearch","value","uniqBy","debounce","import_react","import_differenceWith","import_isEqual","defaultPermanentFilter","defaultPermanentSorter","useTable","initialCurrent","initialPageSize","hasPagination","initialSorter","permanentSorter","defaultSetFilterBehavior","initialFilter","permanentFilter","syncWithLocationProp","resourceFromProp","successNotification","errorNotification","queryOptions","liveModeFromProp","onLiveEvent","liveParams","metaData","dataProviderName","_a","syncWithLocationContext","useSyncWithLocation","syncWithLocation","useLocation","useParams","useRouterContext","search","pathname","liveMode","useLiveMode","parsedCurrent","parsedPageSize","parsedSorter","parsedFilters","parseTableParams","defaultCurrent","defaultPageSize","defaultSorter","defaultFilter","routeResourceName","push","useNavigation","resource","useResourceWithRoute","sorter","setSorter","setInitialSorters","filters","setFilters","setInitialFilters","current","setCurrent","pageSize","setPageSize","createLinkForSyncWithLocation","stringifyParams","stringifyTableParams","differenceWith","isEqual","queryResult","useList","unionFilters","unionSorters","setFiltersAsMerge","newFilters","prevFilters","setFiltersAsReplace","setFiltersWithSetter","setter","prev","setFiltersFn","setterOrFilters","behavior","setSortWithUnion","newSorter","paginationValues","_b","import_react","import_react_query","import_react","AuditLogContext","React","AuditLogContextProvider","create","get","update","children","useLog","queryClient","auditLogContext","AuditLogContext","resources","ResourceContext","identityData","refetch","isLoading","useGetIdentity","log","params","_a","_b","_c","resource","p","logPermissions","hasPermission","authorData","rename","data","queryKey","queryKeys","import_react","import_react_query","useLogList","resource","action","meta","author","metaData","queryOptions","get","AuditLogContext","queryKey","queryKeys","_a","import_react","import_react_query","useInvalidate","queryClient","resource","dataProviderName","invalidates","id","queryKey","queryKeys","key","import_react","import_humanize_string","import_warn_once","useBreadcrumb","_a","useParams","useRouterContext","i18nProvider","TranslationContext","translate","useTranslate","resources","resource","useResource","action","breadcrumbs","addBreadcrumb","parentName","parentResource","humanizeString","key","actionLabel","warnOnce","import_react","useMenu","resources","useResource","translate","useTranslate","useLocation","useParams","useRouterContext","location","params","hasDashboard","useRefineContext","selectedKey","React","selectedResource","el","_selectedKey","treeMenuItems","resource","_a","_b","route","userFriendlyResourceName","menuItems","createTreeView","crawlNestedKeys","currentKey","currentResources","isParent","currentElement","keysArray","defaultOpenKeys","filterMenuItemsByListView","menus","menuItem","obj","ErrorComponent","errorMessage","setErrorMessage","push","useNavigation","translate","useTranslate","actionTypes","useParams","useRouterContext","params","resource","useResourceWithRoute","resourceFromRoute","React","import_react","LoginPage","username","setUsername","password","setPassword","translate","useTranslate","login","useLogin","React","e","import_react","ReadyPage","React","import_react","import_react_query","import_devtools","import_react","import_jose","import_react","REFINE_VERSION","useTelemetryData","authContext","AuthContext","auditLogContext","AuditLogContext","liveContext","LiveContext","routerContext","RouterContext","dataContext","DataContext","i18nProvider","TranslationContext","notificationContext","NotificationContext","accessControlContext","AccessControlContext","resources","useResource","auth","auditLog","live","router","data","i18n","notification","accessControl","PUBLIC_KEY","Telemetry","payload","useTelemetryData","jwk","encryptedPayload","Refine","authProvider","dataProvider","routerProvider","notificationProvider","accessControlProvider","auditLogProvider","resourcesFromProps","DashboardPage","ReadyPage","LoginPage","catchAll","children","liveProvider","i18nProvider","mutationMode","syncWithLocation","warnWhenUnsavedChanges","undoableTimeout","Title","Layout","Sider","Header","Footer","OffLayoutArea","reactQueryClientConfig","reactQueryDevtoolConfig","liveMode","onLiveEvent","disableTelemetry","_a","queryClient","notificationProviderContextValues","resources","resource","_b","_c","routeGenerator","React","RouterComponent","NotificationContextProvider","AuthContextProvider","DataContextProvider","LiveContextProvider","RouterContextProvider","ResourceContextProvider","TranslationContextProvider","AccessControlContextProvider","AuditLogContextProvider","UndoableQueueContextProvider","RefineContextProvider","UnsavedWarnContextProvider","Telemetry","RouteChangeHandler","import_react","UndoableQueue","notifications","translate","useTranslate","notificationDispatch","useCancelNotification","open","useNotification","cancelNotification","notificationItem","userFriendlySecond","import_react","LayoutWrapper","children","LayoutFromProps","SiderFromProps","HeaderFromProps","TitleFromProps","FooterFromProps","OffLayoutAreaFromProps","Layout","Footer","Header","Sider","Title","OffLayoutArea","useRefineContext","LayoutToRender","React","UnsavedPrompt","Prompt","useRouterContext","translate","useTranslate","warnWhen","setWarnWhen","useWarnAboutChange","warnWhenListener","e","import_react","Authenticated","children","fallback","loading","isSuccess","isLoading","isError","useAuthenticated","replace","useNavigation","useLocation","useRouterContext","pathname","search","React","toURL","import_react","RouteChangeHandler","useLocation","useRouterContext","checkAuth","AuthContext","location","import_react","CanAccess","resource","action","params","fallback","children","rest","data","useCan","React"]}